/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

//var $protobuf = require("protobufjs/minimal");
var $protobuf = protobuf;

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.game = (function() {

    /**
     * Namespace game.
     * @exports game
     * @namespace
     */
    var game = {};

    game.request_enter_room = (function() {

        /**
         * Properties of a request_enter_room.
         * @memberof game
         * @interface Irequest_enter_room
         * @property {number} userid request_enter_room userid
         * @property {string} password request_enter_room password
         * @property {string} uuid request_enter_room uuid
         */

        /**
         * Constructs a new request_enter_room.
         * @memberof game
         * @classdesc Represents a request_enter_room.
         * @implements Irequest_enter_room
         * @constructor
         * @param {game.Irequest_enter_room=} [properties] Properties to set
         */
        function request_enter_room(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_enter_room userid.
         * @member {number} userid
         * @memberof game.request_enter_room
         * @instance
         */
        request_enter_room.prototype.userid = 0;

        /**
         * request_enter_room password.
         * @member {string} password
         * @memberof game.request_enter_room
         * @instance
         */
        request_enter_room.prototype.password = "";

        /**
         * request_enter_room uuid.
         * @member {string} uuid
         * @memberof game.request_enter_room
         * @instance
         */
        request_enter_room.prototype.uuid = "";

        /**
         * Creates a new request_enter_room instance using the specified properties.
         * @function create
         * @memberof game.request_enter_room
         * @static
         * @param {game.Irequest_enter_room=} [properties] Properties to set
         * @returns {game.request_enter_room} request_enter_room instance
         */
        request_enter_room.create = function create(properties) {
            return new request_enter_room(properties);
        };

        /**
         * Encodes the specified request_enter_room message. Does not implicitly {@link game.request_enter_room.verify|verify} messages.
         * @function encode
         * @memberof game.request_enter_room
         * @static
         * @param {game.Irequest_enter_room} message request_enter_room message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_enter_room.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.uuid);
            return writer;
        };

        /**
         * Encodes the specified request_enter_room message, length delimited. Does not implicitly {@link game.request_enter_room.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.request_enter_room
         * @static
         * @param {game.Irequest_enter_room} message request_enter_room message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_enter_room.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_enter_room message from the specified reader or buffer.
         * @function decode
         * @memberof game.request_enter_room
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.request_enter_room} request_enter_room
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_enter_room.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.request_enter_room();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.uuid = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("uuid"))
                throw $util.ProtocolError("missing required 'uuid'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_enter_room message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.request_enter_room
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.request_enter_room} request_enter_room
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_enter_room.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_enter_room message.
         * @function verify
         * @memberof game.request_enter_room
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_enter_room.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
            return null;
        };

        /**
         * Creates a request_enter_room message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.request_enter_room
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.request_enter_room} request_enter_room
         */
        request_enter_room.fromObject = function fromObject(object) {
            if (object instanceof $root.game.request_enter_room)
                return object;
            var message = new $root.game.request_enter_room();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.uuid != null)
                message.uuid = String(object.uuid);
            return message;
        };

        /**
         * Creates a plain object from a request_enter_room message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.request_enter_room
         * @static
         * @param {game.request_enter_room} message request_enter_room
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_enter_room.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.uuid = "";
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.uuid != null && message.hasOwnProperty("uuid"))
                object.uuid = message.uuid;
            return object;
        };

        /**
         * Converts this request_enter_room to JSON.
         * @function toJSON
         * @memberof game.request_enter_room
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_enter_room.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_enter_room;
    })();

    game.request_leave_room = (function() {

        /**
         * Properties of a request_leave_room.
         * @memberof game
         * @interface Irequest_leave_room
         */

        /**
         * Constructs a new request_leave_room.
         * @memberof game
         * @classdesc Represents a request_leave_room.
         * @implements Irequest_leave_room
         * @constructor
         * @param {game.Irequest_leave_room=} [properties] Properties to set
         */
        function request_leave_room(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new request_leave_room instance using the specified properties.
         * @function create
         * @memberof game.request_leave_room
         * @static
         * @param {game.Irequest_leave_room=} [properties] Properties to set
         * @returns {game.request_leave_room} request_leave_room instance
         */
        request_leave_room.create = function create(properties) {
            return new request_leave_room(properties);
        };

        /**
         * Encodes the specified request_leave_room message. Does not implicitly {@link game.request_leave_room.verify|verify} messages.
         * @function encode
         * @memberof game.request_leave_room
         * @static
         * @param {game.Irequest_leave_room} message request_leave_room message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_leave_room.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified request_leave_room message, length delimited. Does not implicitly {@link game.request_leave_room.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.request_leave_room
         * @static
         * @param {game.Irequest_leave_room} message request_leave_room message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_leave_room.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_leave_room message from the specified reader or buffer.
         * @function decode
         * @memberof game.request_leave_room
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.request_leave_room} request_leave_room
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_leave_room.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.request_leave_room();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a request_leave_room message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.request_leave_room
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.request_leave_room} request_leave_room
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_leave_room.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_leave_room message.
         * @function verify
         * @memberof game.request_leave_room
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_leave_room.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a request_leave_room message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.request_leave_room
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.request_leave_room} request_leave_room
         */
        request_leave_room.fromObject = function fromObject(object) {
            if (object instanceof $root.game.request_leave_room)
                return object;
            return new $root.game.request_leave_room();
        };

        /**
         * Creates a plain object from a request_leave_room message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.request_leave_room
         * @static
         * @param {game.request_leave_room} message request_leave_room
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_leave_room.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this request_leave_room to JSON.
         * @function toJSON
         * @memberof game.request_leave_room
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_leave_room.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_leave_room;
    })();

    game.response_enter_room_success = (function() {

        /**
         * Properties of a response_enter_room_success.
         * @memberof game
         * @interface Iresponse_enter_room_success
         */

        /**
         * Constructs a new response_enter_room_success.
         * @memberof game
         * @classdesc Represents a response_enter_room_success.
         * @implements Iresponse_enter_room_success
         * @constructor
         * @param {game.Iresponse_enter_room_success=} [properties] Properties to set
         */
        function response_enter_room_success(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new response_enter_room_success instance using the specified properties.
         * @function create
         * @memberof game.response_enter_room_success
         * @static
         * @param {game.Iresponse_enter_room_success=} [properties] Properties to set
         * @returns {game.response_enter_room_success} response_enter_room_success instance
         */
        response_enter_room_success.create = function create(properties) {
            return new response_enter_room_success(properties);
        };

        /**
         * Encodes the specified response_enter_room_success message. Does not implicitly {@link game.response_enter_room_success.verify|verify} messages.
         * @function encode
         * @memberof game.response_enter_room_success
         * @static
         * @param {game.Iresponse_enter_room_success} message response_enter_room_success message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_enter_room_success.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified response_enter_room_success message, length delimited. Does not implicitly {@link game.response_enter_room_success.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.response_enter_room_success
         * @static
         * @param {game.Iresponse_enter_room_success} message response_enter_room_success message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_enter_room_success.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_enter_room_success message from the specified reader or buffer.
         * @function decode
         * @memberof game.response_enter_room_success
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.response_enter_room_success} response_enter_room_success
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_enter_room_success.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.response_enter_room_success();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a response_enter_room_success message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.response_enter_room_success
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.response_enter_room_success} response_enter_room_success
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_enter_room_success.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_enter_room_success message.
         * @function verify
         * @memberof game.response_enter_room_success
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_enter_room_success.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a response_enter_room_success message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.response_enter_room_success
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.response_enter_room_success} response_enter_room_success
         */
        response_enter_room_success.fromObject = function fromObject(object) {
            if (object instanceof $root.game.response_enter_room_success)
                return object;
            return new $root.game.response_enter_room_success();
        };

        /**
         * Creates a plain object from a response_enter_room_success message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.response_enter_room_success
         * @static
         * @param {game.response_enter_room_success} message response_enter_room_success
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_enter_room_success.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this response_enter_room_success to JSON.
         * @function toJSON
         * @memberof game.response_enter_room_success
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_enter_room_success.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_enter_room_success;
    })();

    game.response_enter_room_failed = (function() {

        /**
         * Properties of a response_enter_room_failed.
         * @memberof game
         * @interface Iresponse_enter_room_failed
         * @property {string} reason response_enter_room_failed reason
         */

        /**
         * Constructs a new response_enter_room_failed.
         * @memberof game
         * @classdesc Represents a response_enter_room_failed.
         * @implements Iresponse_enter_room_failed
         * @constructor
         * @param {game.Iresponse_enter_room_failed=} [properties] Properties to set
         */
        function response_enter_room_failed(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_enter_room_failed reason.
         * @member {string} reason
         * @memberof game.response_enter_room_failed
         * @instance
         */
        response_enter_room_failed.prototype.reason = "";

        /**
         * Creates a new response_enter_room_failed instance using the specified properties.
         * @function create
         * @memberof game.response_enter_room_failed
         * @static
         * @param {game.Iresponse_enter_room_failed=} [properties] Properties to set
         * @returns {game.response_enter_room_failed} response_enter_room_failed instance
         */
        response_enter_room_failed.create = function create(properties) {
            return new response_enter_room_failed(properties);
        };

        /**
         * Encodes the specified response_enter_room_failed message. Does not implicitly {@link game.response_enter_room_failed.verify|verify} messages.
         * @function encode
         * @memberof game.response_enter_room_failed
         * @static
         * @param {game.Iresponse_enter_room_failed} message response_enter_room_failed message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_enter_room_failed.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.reason);
            return writer;
        };

        /**
         * Encodes the specified response_enter_room_failed message, length delimited. Does not implicitly {@link game.response_enter_room_failed.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.response_enter_room_failed
         * @static
         * @param {game.Iresponse_enter_room_failed} message response_enter_room_failed message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_enter_room_failed.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_enter_room_failed message from the specified reader or buffer.
         * @function decode
         * @memberof game.response_enter_room_failed
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.response_enter_room_failed} response_enter_room_failed
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_enter_room_failed.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.response_enter_room_failed();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.reason = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("reason"))
                throw $util.ProtocolError("missing required 'reason'", { instance: message });
            return message;
        };

        /**
         * Decodes a response_enter_room_failed message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.response_enter_room_failed
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.response_enter_room_failed} response_enter_room_failed
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_enter_room_failed.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_enter_room_failed message.
         * @function verify
         * @memberof game.response_enter_room_failed
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_enter_room_failed.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isString(message.reason))
                return "reason: string expected";
            return null;
        };

        /**
         * Creates a response_enter_room_failed message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.response_enter_room_failed
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.response_enter_room_failed} response_enter_room_failed
         */
        response_enter_room_failed.fromObject = function fromObject(object) {
            if (object instanceof $root.game.response_enter_room_failed)
                return object;
            var message = new $root.game.response_enter_room_failed();
            if (object.reason != null)
                message.reason = String(object.reason);
            return message;
        };

        /**
         * Creates a plain object from a response_enter_room_failed message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.response_enter_room_failed
         * @static
         * @param {game.response_enter_room_failed} message response_enter_room_failed
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_enter_room_failed.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.reason = "";
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            return object;
        };

        /**
         * Converts this response_enter_room_failed to JSON.
         * @function toJSON
         * @memberof game.response_enter_room_failed
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_enter_room_failed.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_enter_room_failed;
    })();

    game.wanfa = (function() {

        /**
         * Properties of a wanfa.
         * @memberof game
         * @interface Iwanfa
         * @property {Array.<number>|null} [item] wanfa item
         */

        /**
         * Constructs a new wanfa.
         * @memberof game
         * @classdesc Represents a wanfa.
         * @implements Iwanfa
         * @constructor
         * @param {game.Iwanfa=} [properties] Properties to set
         */
        function wanfa(properties) {
            this.item = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * wanfa item.
         * @member {Array.<number>} item
         * @memberof game.wanfa
         * @instance
         */
        wanfa.prototype.item = $util.emptyArray;

        /**
         * Creates a new wanfa instance using the specified properties.
         * @function create
         * @memberof game.wanfa
         * @static
         * @param {game.Iwanfa=} [properties] Properties to set
         * @returns {game.wanfa} wanfa instance
         */
        wanfa.create = function create(properties) {
            return new wanfa(properties);
        };

        /**
         * Encodes the specified wanfa message. Does not implicitly {@link game.wanfa.verify|verify} messages.
         * @function encode
         * @memberof game.wanfa
         * @static
         * @param {game.Iwanfa} message wanfa message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        wanfa.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.item != null && message.item.length)
                for (var i = 0; i < message.item.length; ++i)
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.item[i]);
            return writer;
        };

        /**
         * Encodes the specified wanfa message, length delimited. Does not implicitly {@link game.wanfa.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.wanfa
         * @static
         * @param {game.Iwanfa} message wanfa message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        wanfa.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a wanfa message from the specified reader or buffer.
         * @function decode
         * @memberof game.wanfa
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.wanfa} wanfa
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        wanfa.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.wanfa();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.item && message.item.length))
                        message.item = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.item.push(reader.uint32());
                    } else
                        message.item.push(reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a wanfa message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.wanfa
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.wanfa} wanfa
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        wanfa.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a wanfa message.
         * @function verify
         * @memberof game.wanfa
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        wanfa.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.item != null && message.hasOwnProperty("item")) {
                if (!Array.isArray(message.item))
                    return "item: array expected";
                for (var i = 0; i < message.item.length; ++i)
                    if (!$util.isInteger(message.item[i]))
                        return "item: integer[] expected";
            }
            return null;
        };

        /**
         * Creates a wanfa message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.wanfa
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.wanfa} wanfa
         */
        wanfa.fromObject = function fromObject(object) {
            if (object instanceof $root.game.wanfa)
                return object;
            var message = new $root.game.wanfa();
            if (object.item) {
                if (!Array.isArray(object.item))
                    throw TypeError(".game.wanfa.item: array expected");
                message.item = [];
                for (var i = 0; i < object.item.length; ++i)
                    message.item[i] = object.item[i] >>> 0;
            }
            return message;
        };

        /**
         * Creates a plain object from a wanfa message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.wanfa
         * @static
         * @param {game.wanfa} message wanfa
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        wanfa.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.item = [];
            if (message.item && message.item.length) {
                object.item = [];
                for (var j = 0; j < message.item.length; ++j)
                    object.item[j] = message.item[j];
            }
            return object;
        };

        /**
         * Converts this wanfa to JSON.
         * @function toJSON
         * @memberof game.wanfa
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        wanfa.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return wanfa;
    })();

    game.table_param = (function() {

        /**
         * Properties of a table_param.
         * @memberof game
         * @interface Itable_param
         * @property {number|Long} base_score table_param base_score
         * @property {number|Long} min_enter_score table_param min_enter_score
         * @property {number} max_chair_count table_param max_chair_count
         * @property {game.Iwanfa} wanfa table_param wanfa
         */

        /**
         * Constructs a new table_param.
         * @memberof game
         * @classdesc Represents a table_param.
         * @implements Itable_param
         * @constructor
         * @param {game.Itable_param=} [properties] Properties to set
         */
        function table_param(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * table_param base_score.
         * @member {number|Long} base_score
         * @memberof game.table_param
         * @instance
         */
        table_param.prototype.base_score = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * table_param min_enter_score.
         * @member {number|Long} min_enter_score
         * @memberof game.table_param
         * @instance
         */
        table_param.prototype.min_enter_score = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * table_param max_chair_count.
         * @member {number} max_chair_count
         * @memberof game.table_param
         * @instance
         */
        table_param.prototype.max_chair_count = 0;

        /**
         * table_param wanfa.
         * @member {game.Iwanfa} wanfa
         * @memberof game.table_param
         * @instance
         */
        table_param.prototype.wanfa = null;

        /**
         * Creates a new table_param instance using the specified properties.
         * @function create
         * @memberof game.table_param
         * @static
         * @param {game.Itable_param=} [properties] Properties to set
         * @returns {game.table_param} table_param instance
         */
        table_param.create = function create(properties) {
            return new table_param(properties);
        };

        /**
         * Encodes the specified table_param message. Does not implicitly {@link game.table_param.verify|verify} messages.
         * @function encode
         * @memberof game.table_param
         * @static
         * @param {game.Itable_param} message table_param message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        table_param.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.base_score);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.min_enter_score);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.max_chair_count);
            $root.game.wanfa.encode(message.wanfa, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified table_param message, length delimited. Does not implicitly {@link game.table_param.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.table_param
         * @static
         * @param {game.Itable_param} message table_param message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        table_param.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a table_param message from the specified reader or buffer.
         * @function decode
         * @memberof game.table_param
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.table_param} table_param
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        table_param.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.table_param();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.base_score = reader.uint64();
                    break;
                case 2:
                    message.min_enter_score = reader.uint64();
                    break;
                case 3:
                    message.max_chair_count = reader.uint32();
                    break;
                case 4:
                    message.wanfa = $root.game.wanfa.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("base_score"))
                throw $util.ProtocolError("missing required 'base_score'", { instance: message });
            if (!message.hasOwnProperty("min_enter_score"))
                throw $util.ProtocolError("missing required 'min_enter_score'", { instance: message });
            if (!message.hasOwnProperty("max_chair_count"))
                throw $util.ProtocolError("missing required 'max_chair_count'", { instance: message });
            if (!message.hasOwnProperty("wanfa"))
                throw $util.ProtocolError("missing required 'wanfa'", { instance: message });
            return message;
        };

        /**
         * Decodes a table_param message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.table_param
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.table_param} table_param
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        table_param.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a table_param message.
         * @function verify
         * @memberof game.table_param
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        table_param.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.base_score) && !(message.base_score && $util.isInteger(message.base_score.low) && $util.isInteger(message.base_score.high)))
                return "base_score: integer|Long expected";
            if (!$util.isInteger(message.min_enter_score) && !(message.min_enter_score && $util.isInteger(message.min_enter_score.low) && $util.isInteger(message.min_enter_score.high)))
                return "min_enter_score: integer|Long expected";
            if (!$util.isInteger(message.max_chair_count))
                return "max_chair_count: integer expected";
            {
                var error = $root.game.wanfa.verify(message.wanfa);
                if (error)
                    return "wanfa." + error;
            }
            return null;
        };

        /**
         * Creates a table_param message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.table_param
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.table_param} table_param
         */
        table_param.fromObject = function fromObject(object) {
            if (object instanceof $root.game.table_param)
                return object;
            var message = new $root.game.table_param();
            if (object.base_score != null)
                if ($util.Long)
                    (message.base_score = $util.Long.fromValue(object.base_score)).unsigned = true;
                else if (typeof object.base_score === "string")
                    message.base_score = parseInt(object.base_score, 10);
                else if (typeof object.base_score === "number")
                    message.base_score = object.base_score;
                else if (typeof object.base_score === "object")
                    message.base_score = new $util.LongBits(object.base_score.low >>> 0, object.base_score.high >>> 0).toNumber(true);
            if (object.min_enter_score != null)
                if ($util.Long)
                    (message.min_enter_score = $util.Long.fromValue(object.min_enter_score)).unsigned = true;
                else if (typeof object.min_enter_score === "string")
                    message.min_enter_score = parseInt(object.min_enter_score, 10);
                else if (typeof object.min_enter_score === "number")
                    message.min_enter_score = object.min_enter_score;
                else if (typeof object.min_enter_score === "object")
                    message.min_enter_score = new $util.LongBits(object.min_enter_score.low >>> 0, object.min_enter_score.high >>> 0).toNumber(true);
            if (object.max_chair_count != null)
                message.max_chair_count = object.max_chair_count >>> 0;
            if (object.wanfa != null) {
                if (typeof object.wanfa !== "object")
                    throw TypeError(".game.table_param.wanfa: object expected");
                message.wanfa = $root.game.wanfa.fromObject(object.wanfa);
            }
            return message;
        };

        /**
         * Creates a plain object from a table_param message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.table_param
         * @static
         * @param {game.table_param} message table_param
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        table_param.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.base_score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.base_score = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.min_enter_score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.min_enter_score = options.longs === String ? "0" : 0;
                object.max_chair_count = 0;
                object.wanfa = null;
            }
            if (message.base_score != null && message.hasOwnProperty("base_score"))
                if (typeof message.base_score === "number")
                    object.base_score = options.longs === String ? String(message.base_score) : message.base_score;
                else
                    object.base_score = options.longs === String ? $util.Long.prototype.toString.call(message.base_score) : options.longs === Number ? new $util.LongBits(message.base_score.low >>> 0, message.base_score.high >>> 0).toNumber(true) : message.base_score;
            if (message.min_enter_score != null && message.hasOwnProperty("min_enter_score"))
                if (typeof message.min_enter_score === "number")
                    object.min_enter_score = options.longs === String ? String(message.min_enter_score) : message.min_enter_score;
                else
                    object.min_enter_score = options.longs === String ? $util.Long.prototype.toString.call(message.min_enter_score) : options.longs === Number ? new $util.LongBits(message.min_enter_score.low >>> 0, message.min_enter_score.high >>> 0).toNumber(true) : message.min_enter_score;
            if (message.max_chair_count != null && message.hasOwnProperty("max_chair_count"))
                object.max_chair_count = message.max_chair_count;
            if (message.wanfa != null && message.hasOwnProperty("wanfa"))
                object.wanfa = $root.game.wanfa.toObject(message.wanfa, options);
            return object;
        };

        /**
         * Converts this table_param to JSON.
         * @function toJSON
         * @memberof game.table_param
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        table_param.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return table_param;
    })();

    game.subroom = (function() {

        /**
         * Properties of a subroom.
         * @memberof game
         * @interface Isubroom
         * @property {number} subroomid subroom subroomid
         * @property {boolean} open subroom open
         * @property {string} name subroom name
         * @property {number|Long} base_score subroom base_score
         * @property {number|Long} min_enter_score subroom min_enter_score
         * @property {number} max_chair_count subroom max_chair_count
         * @property {Array.<game.Iwanfa>|null} [wanfa] subroom wanfa
         */

        /**
         * Constructs a new subroom.
         * @memberof game
         * @classdesc Represents a subroom.
         * @implements Isubroom
         * @constructor
         * @param {game.Isubroom=} [properties] Properties to set
         */
        function subroom(properties) {
            this.wanfa = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * subroom subroomid.
         * @member {number} subroomid
         * @memberof game.subroom
         * @instance
         */
        subroom.prototype.subroomid = 0;

        /**
         * subroom open.
         * @member {boolean} open
         * @memberof game.subroom
         * @instance
         */
        subroom.prototype.open = false;

        /**
         * subroom name.
         * @member {string} name
         * @memberof game.subroom
         * @instance
         */
        subroom.prototype.name = "";

        /**
         * subroom base_score.
         * @member {number|Long} base_score
         * @memberof game.subroom
         * @instance
         */
        subroom.prototype.base_score = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * subroom min_enter_score.
         * @member {number|Long} min_enter_score
         * @memberof game.subroom
         * @instance
         */
        subroom.prototype.min_enter_score = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * subroom max_chair_count.
         * @member {number} max_chair_count
         * @memberof game.subroom
         * @instance
         */
        subroom.prototype.max_chair_count = 0;

        /**
         * subroom wanfa.
         * @member {Array.<game.Iwanfa>} wanfa
         * @memberof game.subroom
         * @instance
         */
        subroom.prototype.wanfa = $util.emptyArray;

        /**
         * Creates a new subroom instance using the specified properties.
         * @function create
         * @memberof game.subroom
         * @static
         * @param {game.Isubroom=} [properties] Properties to set
         * @returns {game.subroom} subroom instance
         */
        subroom.create = function create(properties) {
            return new subroom(properties);
        };

        /**
         * Encodes the specified subroom message. Does not implicitly {@link game.subroom.verify|verify} messages.
         * @function encode
         * @memberof game.subroom
         * @static
         * @param {game.Isubroom} message subroom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        subroom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.subroomid);
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.open);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.base_score);
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.min_enter_score);
            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.max_chair_count);
            if (message.wanfa != null && message.wanfa.length)
                for (var i = 0; i < message.wanfa.length; ++i)
                    $root.game.wanfa.encode(message.wanfa[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified subroom message, length delimited. Does not implicitly {@link game.subroom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.subroom
         * @static
         * @param {game.Isubroom} message subroom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        subroom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a subroom message from the specified reader or buffer.
         * @function decode
         * @memberof game.subroom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.subroom} subroom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        subroom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.subroom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.subroomid = reader.uint32();
                    break;
                case 2:
                    message.open = reader.bool();
                    break;
                case 3:
                    message.name = reader.string();
                    break;
                case 4:
                    message.base_score = reader.uint64();
                    break;
                case 5:
                    message.min_enter_score = reader.uint64();
                    break;
                case 6:
                    message.max_chair_count = reader.uint32();
                    break;
                case 7:
                    if (!(message.wanfa && message.wanfa.length))
                        message.wanfa = [];
                    message.wanfa.push($root.game.wanfa.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("subroomid"))
                throw $util.ProtocolError("missing required 'subroomid'", { instance: message });
            if (!message.hasOwnProperty("open"))
                throw $util.ProtocolError("missing required 'open'", { instance: message });
            if (!message.hasOwnProperty("name"))
                throw $util.ProtocolError("missing required 'name'", { instance: message });
            if (!message.hasOwnProperty("base_score"))
                throw $util.ProtocolError("missing required 'base_score'", { instance: message });
            if (!message.hasOwnProperty("min_enter_score"))
                throw $util.ProtocolError("missing required 'min_enter_score'", { instance: message });
            if (!message.hasOwnProperty("max_chair_count"))
                throw $util.ProtocolError("missing required 'max_chair_count'", { instance: message });
            return message;
        };

        /**
         * Decodes a subroom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.subroom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.subroom} subroom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        subroom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a subroom message.
         * @function verify
         * @memberof game.subroom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        subroom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.subroomid))
                return "subroomid: integer expected";
            if (typeof message.open !== "boolean")
                return "open: boolean expected";
            if (!$util.isString(message.name))
                return "name: string expected";
            if (!$util.isInteger(message.base_score) && !(message.base_score && $util.isInteger(message.base_score.low) && $util.isInteger(message.base_score.high)))
                return "base_score: integer|Long expected";
            if (!$util.isInteger(message.min_enter_score) && !(message.min_enter_score && $util.isInteger(message.min_enter_score.low) && $util.isInteger(message.min_enter_score.high)))
                return "min_enter_score: integer|Long expected";
            if (!$util.isInteger(message.max_chair_count))
                return "max_chair_count: integer expected";
            if (message.wanfa != null && message.hasOwnProperty("wanfa")) {
                if (!Array.isArray(message.wanfa))
                    return "wanfa: array expected";
                for (var i = 0; i < message.wanfa.length; ++i) {
                    var error = $root.game.wanfa.verify(message.wanfa[i]);
                    if (error)
                        return "wanfa." + error;
                }
            }
            return null;
        };

        /**
         * Creates a subroom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.subroom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.subroom} subroom
         */
        subroom.fromObject = function fromObject(object) {
            if (object instanceof $root.game.subroom)
                return object;
            var message = new $root.game.subroom();
            if (object.subroomid != null)
                message.subroomid = object.subroomid >>> 0;
            if (object.open != null)
                message.open = Boolean(object.open);
            if (object.name != null)
                message.name = String(object.name);
            if (object.base_score != null)
                if ($util.Long)
                    (message.base_score = $util.Long.fromValue(object.base_score)).unsigned = true;
                else if (typeof object.base_score === "string")
                    message.base_score = parseInt(object.base_score, 10);
                else if (typeof object.base_score === "number")
                    message.base_score = object.base_score;
                else if (typeof object.base_score === "object")
                    message.base_score = new $util.LongBits(object.base_score.low >>> 0, object.base_score.high >>> 0).toNumber(true);
            if (object.min_enter_score != null)
                if ($util.Long)
                    (message.min_enter_score = $util.Long.fromValue(object.min_enter_score)).unsigned = true;
                else if (typeof object.min_enter_score === "string")
                    message.min_enter_score = parseInt(object.min_enter_score, 10);
                else if (typeof object.min_enter_score === "number")
                    message.min_enter_score = object.min_enter_score;
                else if (typeof object.min_enter_score === "object")
                    message.min_enter_score = new $util.LongBits(object.min_enter_score.low >>> 0, object.min_enter_score.high >>> 0).toNumber(true);
            if (object.max_chair_count != null)
                message.max_chair_count = object.max_chair_count >>> 0;
            if (object.wanfa) {
                if (!Array.isArray(object.wanfa))
                    throw TypeError(".game.subroom.wanfa: array expected");
                message.wanfa = [];
                for (var i = 0; i < object.wanfa.length; ++i) {
                    if (typeof object.wanfa[i] !== "object")
                        throw TypeError(".game.subroom.wanfa: object expected");
                    message.wanfa[i] = $root.game.wanfa.fromObject(object.wanfa[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a subroom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.subroom
         * @static
         * @param {game.subroom} message subroom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        subroom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.wanfa = [];
            if (options.defaults) {
                object.subroomid = 0;
                object.open = false;
                object.name = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.base_score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.base_score = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.min_enter_score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.min_enter_score = options.longs === String ? "0" : 0;
                object.max_chair_count = 0;
            }
            if (message.subroomid != null && message.hasOwnProperty("subroomid"))
                object.subroomid = message.subroomid;
            if (message.open != null && message.hasOwnProperty("open"))
                object.open = message.open;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.base_score != null && message.hasOwnProperty("base_score"))
                if (typeof message.base_score === "number")
                    object.base_score = options.longs === String ? String(message.base_score) : message.base_score;
                else
                    object.base_score = options.longs === String ? $util.Long.prototype.toString.call(message.base_score) : options.longs === Number ? new $util.LongBits(message.base_score.low >>> 0, message.base_score.high >>> 0).toNumber(true) : message.base_score;
            if (message.min_enter_score != null && message.hasOwnProperty("min_enter_score"))
                if (typeof message.min_enter_score === "number")
                    object.min_enter_score = options.longs === String ? String(message.min_enter_score) : message.min_enter_score;
                else
                    object.min_enter_score = options.longs === String ? $util.Long.prototype.toString.call(message.min_enter_score) : options.longs === Number ? new $util.LongBits(message.min_enter_score.low >>> 0, message.min_enter_score.high >>> 0).toNumber(true) : message.min_enter_score;
            if (message.max_chair_count != null && message.hasOwnProperty("max_chair_count"))
                object.max_chair_count = message.max_chair_count;
            if (message.wanfa && message.wanfa.length) {
                object.wanfa = [];
                for (var j = 0; j < message.wanfa.length; ++j)
                    object.wanfa[j] = $root.game.wanfa.toObject(message.wanfa[j], options);
            }
            return object;
        };

        /**
         * Converts this subroom to JSON.
         * @function toJSON
         * @memberof game.subroom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        subroom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return subroom;
    })();

    game.notify_room_info = (function() {

        /**
         * Properties of a notify_room_info.
         * @memberof game
         * @interface Inotify_room_info
         * @property {number} room_type notify_room_info room_type
         * @property {boolean} allow_join_playing notify_room_info allow_join_playing
         * @property {boolean} allow_ob notify_room_info allow_ob
         * @property {Array.<game.Isubroom>|null} [subrooms] notify_room_info subrooms
         */

        /**
         * Constructs a new notify_room_info.
         * @memberof game
         * @classdesc Represents a notify_room_info.
         * @implements Inotify_room_info
         * @constructor
         * @param {game.Inotify_room_info=} [properties] Properties to set
         */
        function notify_room_info(properties) {
            this.subrooms = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * notify_room_info room_type.
         * @member {number} room_type
         * @memberof game.notify_room_info
         * @instance
         */
        notify_room_info.prototype.room_type = 0;

        /**
         * notify_room_info allow_join_playing.
         * @member {boolean} allow_join_playing
         * @memberof game.notify_room_info
         * @instance
         */
        notify_room_info.prototype.allow_join_playing = false;

        /**
         * notify_room_info allow_ob.
         * @member {boolean} allow_ob
         * @memberof game.notify_room_info
         * @instance
         */
        notify_room_info.prototype.allow_ob = false;

        /**
         * notify_room_info subrooms.
         * @member {Array.<game.Isubroom>} subrooms
         * @memberof game.notify_room_info
         * @instance
         */
        notify_room_info.prototype.subrooms = $util.emptyArray;

        /**
         * Creates a new notify_room_info instance using the specified properties.
         * @function create
         * @memberof game.notify_room_info
         * @static
         * @param {game.Inotify_room_info=} [properties] Properties to set
         * @returns {game.notify_room_info} notify_room_info instance
         */
        notify_room_info.create = function create(properties) {
            return new notify_room_info(properties);
        };

        /**
         * Encodes the specified notify_room_info message. Does not implicitly {@link game.notify_room_info.verify|verify} messages.
         * @function encode
         * @memberof game.notify_room_info
         * @static
         * @param {game.Inotify_room_info} message notify_room_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_room_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.room_type);
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allow_join_playing);
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.allow_ob);
            if (message.subrooms != null && message.subrooms.length)
                for (var i = 0; i < message.subrooms.length; ++i)
                    $root.game.subroom.encode(message.subrooms[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified notify_room_info message, length delimited. Does not implicitly {@link game.notify_room_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.notify_room_info
         * @static
         * @param {game.Inotify_room_info} message notify_room_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_room_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a notify_room_info message from the specified reader or buffer.
         * @function decode
         * @memberof game.notify_room_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.notify_room_info} notify_room_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_room_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.notify_room_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.room_type = reader.uint32();
                    break;
                case 2:
                    message.allow_join_playing = reader.bool();
                    break;
                case 3:
                    message.allow_ob = reader.bool();
                    break;
                case 4:
                    if (!(message.subrooms && message.subrooms.length))
                        message.subrooms = [];
                    message.subrooms.push($root.game.subroom.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("room_type"))
                throw $util.ProtocolError("missing required 'room_type'", { instance: message });
            if (!message.hasOwnProperty("allow_join_playing"))
                throw $util.ProtocolError("missing required 'allow_join_playing'", { instance: message });
            if (!message.hasOwnProperty("allow_ob"))
                throw $util.ProtocolError("missing required 'allow_ob'", { instance: message });
            return message;
        };

        /**
         * Decodes a notify_room_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.notify_room_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.notify_room_info} notify_room_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_room_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a notify_room_info message.
         * @function verify
         * @memberof game.notify_room_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        notify_room_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.room_type))
                return "room_type: integer expected";
            if (typeof message.allow_join_playing !== "boolean")
                return "allow_join_playing: boolean expected";
            if (typeof message.allow_ob !== "boolean")
                return "allow_ob: boolean expected";
            if (message.subrooms != null && message.hasOwnProperty("subrooms")) {
                if (!Array.isArray(message.subrooms))
                    return "subrooms: array expected";
                for (var i = 0; i < message.subrooms.length; ++i) {
                    var error = $root.game.subroom.verify(message.subrooms[i]);
                    if (error)
                        return "subrooms." + error;
                }
            }
            return null;
        };

        /**
         * Creates a notify_room_info message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.notify_room_info
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.notify_room_info} notify_room_info
         */
        notify_room_info.fromObject = function fromObject(object) {
            if (object instanceof $root.game.notify_room_info)
                return object;
            var message = new $root.game.notify_room_info();
            if (object.room_type != null)
                message.room_type = object.room_type >>> 0;
            if (object.allow_join_playing != null)
                message.allow_join_playing = Boolean(object.allow_join_playing);
            if (object.allow_ob != null)
                message.allow_ob = Boolean(object.allow_ob);
            if (object.subrooms) {
                if (!Array.isArray(object.subrooms))
                    throw TypeError(".game.notify_room_info.subrooms: array expected");
                message.subrooms = [];
                for (var i = 0; i < object.subrooms.length; ++i) {
                    if (typeof object.subrooms[i] !== "object")
                        throw TypeError(".game.notify_room_info.subrooms: object expected");
                    message.subrooms[i] = $root.game.subroom.fromObject(object.subrooms[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a notify_room_info message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.notify_room_info
         * @static
         * @param {game.notify_room_info} message notify_room_info
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        notify_room_info.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.subrooms = [];
            if (options.defaults) {
                object.room_type = 0;
                object.allow_join_playing = false;
                object.allow_ob = false;
            }
            if (message.room_type != null && message.hasOwnProperty("room_type"))
                object.room_type = message.room_type;
            if (message.allow_join_playing != null && message.hasOwnProperty("allow_join_playing"))
                object.allow_join_playing = message.allow_join_playing;
            if (message.allow_ob != null && message.hasOwnProperty("allow_ob"))
                object.allow_ob = message.allow_ob;
            if (message.subrooms && message.subrooms.length) {
                object.subrooms = [];
                for (var j = 0; j < message.subrooms.length; ++j)
                    object.subrooms[j] = $root.game.subroom.toObject(message.subrooms[j], options);
            }
            return object;
        };

        /**
         * Converts this notify_room_info to JSON.
         * @function toJSON
         * @memberof game.notify_room_info
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        notify_room_info.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return notify_room_info;
    })();

    game.user_info = (function() {

        /**
         * Properties of a user_info.
         * @memberof game
         * @interface Iuser_info
         * @property {number} userid user_info userid
         * @property {number} gameid user_info gameid
         * @property {string} nickname user_info nickname
         * @property {number} faceid user_info faceid
         * @property {string} head_img_url user_info head_img_url
         * @property {number} gender user_info gender
         * @property {string} signature user_info signature
         * @property {number} vip_level user_info vip_level
         * @property {number} master_level user_info master_level
         * @property {number|Long} score user_info score
         * @property {number} tableid user_info tableid
         * @property {number} chairid user_info chairid
         * @property {number} user_status user_info user_status
         * @property {boolean} banker user_info banker
         */

        /**
         * Constructs a new user_info.
         * @memberof game
         * @classdesc Represents a user_info.
         * @implements Iuser_info
         * @constructor
         * @param {game.Iuser_info=} [properties] Properties to set
         */
        function user_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * user_info userid.
         * @member {number} userid
         * @memberof game.user_info
         * @instance
         */
        user_info.prototype.userid = 0;

        /**
         * user_info gameid.
         * @member {number} gameid
         * @memberof game.user_info
         * @instance
         */
        user_info.prototype.gameid = 0;

        /**
         * user_info nickname.
         * @member {string} nickname
         * @memberof game.user_info
         * @instance
         */
        user_info.prototype.nickname = "";

        /**
         * user_info faceid.
         * @member {number} faceid
         * @memberof game.user_info
         * @instance
         */
        user_info.prototype.faceid = 0;

        /**
         * user_info head_img_url.
         * @member {string} head_img_url
         * @memberof game.user_info
         * @instance
         */
        user_info.prototype.head_img_url = "";

        /**
         * user_info gender.
         * @member {number} gender
         * @memberof game.user_info
         * @instance
         */
        user_info.prototype.gender = 0;

        /**
         * user_info signature.
         * @member {string} signature
         * @memberof game.user_info
         * @instance
         */
        user_info.prototype.signature = "";

        /**
         * user_info vip_level.
         * @member {number} vip_level
         * @memberof game.user_info
         * @instance
         */
        user_info.prototype.vip_level = 0;

        /**
         * user_info master_level.
         * @member {number} master_level
         * @memberof game.user_info
         * @instance
         */
        user_info.prototype.master_level = 0;

        /**
         * user_info score.
         * @member {number|Long} score
         * @memberof game.user_info
         * @instance
         */
        user_info.prototype.score = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * user_info tableid.
         * @member {number} tableid
         * @memberof game.user_info
         * @instance
         */
        user_info.prototype.tableid = 0;

        /**
         * user_info chairid.
         * @member {number} chairid
         * @memberof game.user_info
         * @instance
         */
        user_info.prototype.chairid = 0;

        /**
         * user_info user_status.
         * @member {number} user_status
         * @memberof game.user_info
         * @instance
         */
        user_info.prototype.user_status = 0;

        /**
         * user_info banker.
         * @member {boolean} banker
         * @memberof game.user_info
         * @instance
         */
        user_info.prototype.banker = false;

        /**
         * Creates a new user_info instance using the specified properties.
         * @function create
         * @memberof game.user_info
         * @static
         * @param {game.Iuser_info=} [properties] Properties to set
         * @returns {game.user_info} user_info instance
         */
        user_info.create = function create(properties) {
            return new user_info(properties);
        };

        /**
         * Encodes the specified user_info message. Does not implicitly {@link game.user_info.verify|verify} messages.
         * @function encode
         * @memberof game.user_info
         * @static
         * @param {game.Iuser_info} message user_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        user_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gameid);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.nickname);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.faceid);
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.head_img_url);
            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.gender);
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.signature);
            writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.vip_level);
            writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.master_level);
            writer.uint32(/* id 10, wireType 0 =*/80).sint64(message.score);
            writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.tableid);
            writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.chairid);
            writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.user_status);
            writer.uint32(/* id 14, wireType 0 =*/112).bool(message.banker);
            return writer;
        };

        /**
         * Encodes the specified user_info message, length delimited. Does not implicitly {@link game.user_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.user_info
         * @static
         * @param {game.Iuser_info} message user_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        user_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a user_info message from the specified reader or buffer.
         * @function decode
         * @memberof game.user_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.user_info} user_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        user_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.user_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.gameid = reader.uint32();
                    break;
                case 3:
                    message.nickname = reader.string();
                    break;
                case 4:
                    message.faceid = reader.uint32();
                    break;
                case 5:
                    message.head_img_url = reader.string();
                    break;
                case 6:
                    message.gender = reader.uint32();
                    break;
                case 7:
                    message.signature = reader.string();
                    break;
                case 8:
                    message.vip_level = reader.uint32();
                    break;
                case 9:
                    message.master_level = reader.uint32();
                    break;
                case 10:
                    message.score = reader.sint64();
                    break;
                case 11:
                    message.tableid = reader.uint32();
                    break;
                case 12:
                    message.chairid = reader.uint32();
                    break;
                case 13:
                    message.user_status = reader.uint32();
                    break;
                case 14:
                    message.banker = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("gameid"))
                throw $util.ProtocolError("missing required 'gameid'", { instance: message });
            if (!message.hasOwnProperty("nickname"))
                throw $util.ProtocolError("missing required 'nickname'", { instance: message });
            if (!message.hasOwnProperty("faceid"))
                throw $util.ProtocolError("missing required 'faceid'", { instance: message });
            if (!message.hasOwnProperty("head_img_url"))
                throw $util.ProtocolError("missing required 'head_img_url'", { instance: message });
            if (!message.hasOwnProperty("gender"))
                throw $util.ProtocolError("missing required 'gender'", { instance: message });
            if (!message.hasOwnProperty("signature"))
                throw $util.ProtocolError("missing required 'signature'", { instance: message });
            if (!message.hasOwnProperty("vip_level"))
                throw $util.ProtocolError("missing required 'vip_level'", { instance: message });
            if (!message.hasOwnProperty("master_level"))
                throw $util.ProtocolError("missing required 'master_level'", { instance: message });
            if (!message.hasOwnProperty("score"))
                throw $util.ProtocolError("missing required 'score'", { instance: message });
            if (!message.hasOwnProperty("tableid"))
                throw $util.ProtocolError("missing required 'tableid'", { instance: message });
            if (!message.hasOwnProperty("chairid"))
                throw $util.ProtocolError("missing required 'chairid'", { instance: message });
            if (!message.hasOwnProperty("user_status"))
                throw $util.ProtocolError("missing required 'user_status'", { instance: message });
            if (!message.hasOwnProperty("banker"))
                throw $util.ProtocolError("missing required 'banker'", { instance: message });
            return message;
        };

        /**
         * Decodes a user_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.user_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.user_info} user_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        user_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a user_info message.
         * @function verify
         * @memberof game.user_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        user_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isInteger(message.gameid))
                return "gameid: integer expected";
            if (!$util.isString(message.nickname))
                return "nickname: string expected";
            if (!$util.isInteger(message.faceid))
                return "faceid: integer expected";
            if (!$util.isString(message.head_img_url))
                return "head_img_url: string expected";
            if (!$util.isInteger(message.gender))
                return "gender: integer expected";
            if (!$util.isString(message.signature))
                return "signature: string expected";
            if (!$util.isInteger(message.vip_level))
                return "vip_level: integer expected";
            if (!$util.isInteger(message.master_level))
                return "master_level: integer expected";
            if (!$util.isInteger(message.score) && !(message.score && $util.isInteger(message.score.low) && $util.isInteger(message.score.high)))
                return "score: integer|Long expected";
            if (!$util.isInteger(message.tableid))
                return "tableid: integer expected";
            if (!$util.isInteger(message.chairid))
                return "chairid: integer expected";
            if (!$util.isInteger(message.user_status))
                return "user_status: integer expected";
            if (typeof message.banker !== "boolean")
                return "banker: boolean expected";
            return null;
        };

        /**
         * Creates a user_info message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.user_info
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.user_info} user_info
         */
        user_info.fromObject = function fromObject(object) {
            if (object instanceof $root.game.user_info)
                return object;
            var message = new $root.game.user_info();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.gameid != null)
                message.gameid = object.gameid >>> 0;
            if (object.nickname != null)
                message.nickname = String(object.nickname);
            if (object.faceid != null)
                message.faceid = object.faceid >>> 0;
            if (object.head_img_url != null)
                message.head_img_url = String(object.head_img_url);
            if (object.gender != null)
                message.gender = object.gender >>> 0;
            if (object.signature != null)
                message.signature = String(object.signature);
            if (object.vip_level != null)
                message.vip_level = object.vip_level >>> 0;
            if (object.master_level != null)
                message.master_level = object.master_level >>> 0;
            if (object.score != null)
                if ($util.Long)
                    (message.score = $util.Long.fromValue(object.score)).unsigned = false;
                else if (typeof object.score === "string")
                    message.score = parseInt(object.score, 10);
                else if (typeof object.score === "number")
                    message.score = object.score;
                else if (typeof object.score === "object")
                    message.score = new $util.LongBits(object.score.low >>> 0, object.score.high >>> 0).toNumber();
            if (object.tableid != null)
                message.tableid = object.tableid >>> 0;
            if (object.chairid != null)
                message.chairid = object.chairid >>> 0;
            if (object.user_status != null)
                message.user_status = object.user_status >>> 0;
            if (object.banker != null)
                message.banker = Boolean(object.banker);
            return message;
        };

        /**
         * Creates a plain object from a user_info message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.user_info
         * @static
         * @param {game.user_info} message user_info
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        user_info.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.gameid = 0;
                object.nickname = "";
                object.faceid = 0;
                object.head_img_url = "";
                object.gender = 0;
                object.signature = "";
                object.vip_level = 0;
                object.master_level = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.score = options.longs === String ? "0" : 0;
                object.tableid = 0;
                object.chairid = 0;
                object.user_status = 0;
                object.banker = false;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.gameid != null && message.hasOwnProperty("gameid"))
                object.gameid = message.gameid;
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                object.nickname = message.nickname;
            if (message.faceid != null && message.hasOwnProperty("faceid"))
                object.faceid = message.faceid;
            if (message.head_img_url != null && message.hasOwnProperty("head_img_url"))
                object.head_img_url = message.head_img_url;
            if (message.gender != null && message.hasOwnProperty("gender"))
                object.gender = message.gender;
            if (message.signature != null && message.hasOwnProperty("signature"))
                object.signature = message.signature;
            if (message.vip_level != null && message.hasOwnProperty("vip_level"))
                object.vip_level = message.vip_level;
            if (message.master_level != null && message.hasOwnProperty("master_level"))
                object.master_level = message.master_level;
            if (message.score != null && message.hasOwnProperty("score"))
                if (typeof message.score === "number")
                    object.score = options.longs === String ? String(message.score) : message.score;
                else
                    object.score = options.longs === String ? $util.Long.prototype.toString.call(message.score) : options.longs === Number ? new $util.LongBits(message.score.low >>> 0, message.score.high >>> 0).toNumber() : message.score;
            if (message.tableid != null && message.hasOwnProperty("tableid"))
                object.tableid = message.tableid;
            if (message.chairid != null && message.hasOwnProperty("chairid"))
                object.chairid = message.chairid;
            if (message.user_status != null && message.hasOwnProperty("user_status"))
                object.user_status = message.user_status;
            if (message.banker != null && message.hasOwnProperty("banker"))
                object.banker = message.banker;
            return object;
        };

        /**
         * Converts this user_info to JSON.
         * @function toJSON
         * @memberof game.user_info
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        user_info.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return user_info;
    })();

    game.notify_myself_info = (function() {

        /**
         * Properties of a notify_myself_info.
         * @memberof game
         * @interface Inotify_myself_info
         * @property {game.Iuser_info} userinfo notify_myself_info userinfo
         */

        /**
         * Constructs a new notify_myself_info.
         * @memberof game
         * @classdesc Represents a notify_myself_info.
         * @implements Inotify_myself_info
         * @constructor
         * @param {game.Inotify_myself_info=} [properties] Properties to set
         */
        function notify_myself_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * notify_myself_info userinfo.
         * @member {game.Iuser_info} userinfo
         * @memberof game.notify_myself_info
         * @instance
         */
        notify_myself_info.prototype.userinfo = null;

        /**
         * Creates a new notify_myself_info instance using the specified properties.
         * @function create
         * @memberof game.notify_myself_info
         * @static
         * @param {game.Inotify_myself_info=} [properties] Properties to set
         * @returns {game.notify_myself_info} notify_myself_info instance
         */
        notify_myself_info.create = function create(properties) {
            return new notify_myself_info(properties);
        };

        /**
         * Encodes the specified notify_myself_info message. Does not implicitly {@link game.notify_myself_info.verify|verify} messages.
         * @function encode
         * @memberof game.notify_myself_info
         * @static
         * @param {game.Inotify_myself_info} message notify_myself_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_myself_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            $root.game.user_info.encode(message.userinfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified notify_myself_info message, length delimited. Does not implicitly {@link game.notify_myself_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.notify_myself_info
         * @static
         * @param {game.Inotify_myself_info} message notify_myself_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_myself_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a notify_myself_info message from the specified reader or buffer.
         * @function decode
         * @memberof game.notify_myself_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.notify_myself_info} notify_myself_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_myself_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.notify_myself_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userinfo = $root.game.user_info.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userinfo"))
                throw $util.ProtocolError("missing required 'userinfo'", { instance: message });
            return message;
        };

        /**
         * Decodes a notify_myself_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.notify_myself_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.notify_myself_info} notify_myself_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_myself_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a notify_myself_info message.
         * @function verify
         * @memberof game.notify_myself_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        notify_myself_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            {
                var error = $root.game.user_info.verify(message.userinfo);
                if (error)
                    return "userinfo." + error;
            }
            return null;
        };

        /**
         * Creates a notify_myself_info message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.notify_myself_info
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.notify_myself_info} notify_myself_info
         */
        notify_myself_info.fromObject = function fromObject(object) {
            if (object instanceof $root.game.notify_myself_info)
                return object;
            var message = new $root.game.notify_myself_info();
            if (object.userinfo != null) {
                if (typeof object.userinfo !== "object")
                    throw TypeError(".game.notify_myself_info.userinfo: object expected");
                message.userinfo = $root.game.user_info.fromObject(object.userinfo);
            }
            return message;
        };

        /**
         * Creates a plain object from a notify_myself_info message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.notify_myself_info
         * @static
         * @param {game.notify_myself_info} message notify_myself_info
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        notify_myself_info.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.userinfo = null;
            if (message.userinfo != null && message.hasOwnProperty("userinfo"))
                object.userinfo = $root.game.user_info.toObject(message.userinfo, options);
            return object;
        };

        /**
         * Converts this notify_myself_info to JSON.
         * @function toJSON
         * @memberof game.notify_myself_info
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        notify_myself_info.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return notify_myself_info;
    })();

    game.notify_user_enter = (function() {

        /**
         * Properties of a notify_user_enter.
         * @memberof game
         * @interface Inotify_user_enter
         * @property {game.Iuser_info} userinfo notify_user_enter userinfo
         */

        /**
         * Constructs a new notify_user_enter.
         * @memberof game
         * @classdesc Represents a notify_user_enter.
         * @implements Inotify_user_enter
         * @constructor
         * @param {game.Inotify_user_enter=} [properties] Properties to set
         */
        function notify_user_enter(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * notify_user_enter userinfo.
         * @member {game.Iuser_info} userinfo
         * @memberof game.notify_user_enter
         * @instance
         */
        notify_user_enter.prototype.userinfo = null;

        /**
         * Creates a new notify_user_enter instance using the specified properties.
         * @function create
         * @memberof game.notify_user_enter
         * @static
         * @param {game.Inotify_user_enter=} [properties] Properties to set
         * @returns {game.notify_user_enter} notify_user_enter instance
         */
        notify_user_enter.create = function create(properties) {
            return new notify_user_enter(properties);
        };

        /**
         * Encodes the specified notify_user_enter message. Does not implicitly {@link game.notify_user_enter.verify|verify} messages.
         * @function encode
         * @memberof game.notify_user_enter
         * @static
         * @param {game.Inotify_user_enter} message notify_user_enter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_user_enter.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            $root.game.user_info.encode(message.userinfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified notify_user_enter message, length delimited. Does not implicitly {@link game.notify_user_enter.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.notify_user_enter
         * @static
         * @param {game.Inotify_user_enter} message notify_user_enter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_user_enter.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a notify_user_enter message from the specified reader or buffer.
         * @function decode
         * @memberof game.notify_user_enter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.notify_user_enter} notify_user_enter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_user_enter.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.notify_user_enter();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userinfo = $root.game.user_info.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userinfo"))
                throw $util.ProtocolError("missing required 'userinfo'", { instance: message });
            return message;
        };

        /**
         * Decodes a notify_user_enter message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.notify_user_enter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.notify_user_enter} notify_user_enter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_user_enter.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a notify_user_enter message.
         * @function verify
         * @memberof game.notify_user_enter
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        notify_user_enter.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            {
                var error = $root.game.user_info.verify(message.userinfo);
                if (error)
                    return "userinfo." + error;
            }
            return null;
        };

        /**
         * Creates a notify_user_enter message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.notify_user_enter
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.notify_user_enter} notify_user_enter
         */
        notify_user_enter.fromObject = function fromObject(object) {
            if (object instanceof $root.game.notify_user_enter)
                return object;
            var message = new $root.game.notify_user_enter();
            if (object.userinfo != null) {
                if (typeof object.userinfo !== "object")
                    throw TypeError(".game.notify_user_enter.userinfo: object expected");
                message.userinfo = $root.game.user_info.fromObject(object.userinfo);
            }
            return message;
        };

        /**
         * Creates a plain object from a notify_user_enter message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.notify_user_enter
         * @static
         * @param {game.notify_user_enter} message notify_user_enter
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        notify_user_enter.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.userinfo = null;
            if (message.userinfo != null && message.hasOwnProperty("userinfo"))
                object.userinfo = $root.game.user_info.toObject(message.userinfo, options);
            return object;
        };

        /**
         * Converts this notify_user_enter to JSON.
         * @function toJSON
         * @memberof game.notify_user_enter
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        notify_user_enter.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return notify_user_enter;
    })();

    game.notify_other_users_info = (function() {

        /**
         * Properties of a notify_other_users_info.
         * @memberof game
         * @interface Inotify_other_users_info
         * @property {Array.<game.Iuser_info>|null} [users_info] notify_other_users_info users_info
         */

        /**
         * Constructs a new notify_other_users_info.
         * @memberof game
         * @classdesc Represents a notify_other_users_info.
         * @implements Inotify_other_users_info
         * @constructor
         * @param {game.Inotify_other_users_info=} [properties] Properties to set
         */
        function notify_other_users_info(properties) {
            this.users_info = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * notify_other_users_info users_info.
         * @member {Array.<game.Iuser_info>} users_info
         * @memberof game.notify_other_users_info
         * @instance
         */
        notify_other_users_info.prototype.users_info = $util.emptyArray;

        /**
         * Creates a new notify_other_users_info instance using the specified properties.
         * @function create
         * @memberof game.notify_other_users_info
         * @static
         * @param {game.Inotify_other_users_info=} [properties] Properties to set
         * @returns {game.notify_other_users_info} notify_other_users_info instance
         */
        notify_other_users_info.create = function create(properties) {
            return new notify_other_users_info(properties);
        };

        /**
         * Encodes the specified notify_other_users_info message. Does not implicitly {@link game.notify_other_users_info.verify|verify} messages.
         * @function encode
         * @memberof game.notify_other_users_info
         * @static
         * @param {game.Inotify_other_users_info} message notify_other_users_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_other_users_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.users_info != null && message.users_info.length)
                for (var i = 0; i < message.users_info.length; ++i)
                    $root.game.user_info.encode(message.users_info[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified notify_other_users_info message, length delimited. Does not implicitly {@link game.notify_other_users_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.notify_other_users_info
         * @static
         * @param {game.Inotify_other_users_info} message notify_other_users_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_other_users_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a notify_other_users_info message from the specified reader or buffer.
         * @function decode
         * @memberof game.notify_other_users_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.notify_other_users_info} notify_other_users_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_other_users_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.notify_other_users_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.users_info && message.users_info.length))
                        message.users_info = [];
                    message.users_info.push($root.game.user_info.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a notify_other_users_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.notify_other_users_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.notify_other_users_info} notify_other_users_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_other_users_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a notify_other_users_info message.
         * @function verify
         * @memberof game.notify_other_users_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        notify_other_users_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.users_info != null && message.hasOwnProperty("users_info")) {
                if (!Array.isArray(message.users_info))
                    return "users_info: array expected";
                for (var i = 0; i < message.users_info.length; ++i) {
                    var error = $root.game.user_info.verify(message.users_info[i]);
                    if (error)
                        return "users_info." + error;
                }
            }
            return null;
        };

        /**
         * Creates a notify_other_users_info message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.notify_other_users_info
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.notify_other_users_info} notify_other_users_info
         */
        notify_other_users_info.fromObject = function fromObject(object) {
            if (object instanceof $root.game.notify_other_users_info)
                return object;
            var message = new $root.game.notify_other_users_info();
            if (object.users_info) {
                if (!Array.isArray(object.users_info))
                    throw TypeError(".game.notify_other_users_info.users_info: array expected");
                message.users_info = [];
                for (var i = 0; i < object.users_info.length; ++i) {
                    if (typeof object.users_info[i] !== "object")
                        throw TypeError(".game.notify_other_users_info.users_info: object expected");
                    message.users_info[i] = $root.game.user_info.fromObject(object.users_info[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a notify_other_users_info message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.notify_other_users_info
         * @static
         * @param {game.notify_other_users_info} message notify_other_users_info
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        notify_other_users_info.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.users_info = [];
            if (message.users_info && message.users_info.length) {
                object.users_info = [];
                for (var j = 0; j < message.users_info.length; ++j)
                    object.users_info[j] = $root.game.user_info.toObject(message.users_info[j], options);
            }
            return object;
        };

        /**
         * Converts this notify_other_users_info to JSON.
         * @function toJSON
         * @memberof game.notify_other_users_info
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        notify_other_users_info.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return notify_other_users_info;
    })();

    game.table_info = (function() {

        /**
         * Properties of a table_info.
         * @memberof game
         * @interface Itable_info
         * @property {number} tableid table_info tableid
         * @property {number} subroomid table_info subroomid
         * @property {game.Itable_param} param table_info param
         */

        /**
         * Constructs a new table_info.
         * @memberof game
         * @classdesc Represents a table_info.
         * @implements Itable_info
         * @constructor
         * @param {game.Itable_info=} [properties] Properties to set
         */
        function table_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * table_info tableid.
         * @member {number} tableid
         * @memberof game.table_info
         * @instance
         */
        table_info.prototype.tableid = 0;

        /**
         * table_info subroomid.
         * @member {number} subroomid
         * @memberof game.table_info
         * @instance
         */
        table_info.prototype.subroomid = 0;

        /**
         * table_info param.
         * @member {game.Itable_param} param
         * @memberof game.table_info
         * @instance
         */
        table_info.prototype.param = null;

        /**
         * Creates a new table_info instance using the specified properties.
         * @function create
         * @memberof game.table_info
         * @static
         * @param {game.Itable_info=} [properties] Properties to set
         * @returns {game.table_info} table_info instance
         */
        table_info.create = function create(properties) {
            return new table_info(properties);
        };

        /**
         * Encodes the specified table_info message. Does not implicitly {@link game.table_info.verify|verify} messages.
         * @function encode
         * @memberof game.table_info
         * @static
         * @param {game.Itable_info} message table_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        table_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tableid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.subroomid);
            $root.game.table_param.encode(message.param, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified table_info message, length delimited. Does not implicitly {@link game.table_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.table_info
         * @static
         * @param {game.Itable_info} message table_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        table_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a table_info message from the specified reader or buffer.
         * @function decode
         * @memberof game.table_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.table_info} table_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        table_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.table_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tableid = reader.uint32();
                    break;
                case 2:
                    message.subroomid = reader.uint32();
                    break;
                case 3:
                    message.param = $root.game.table_param.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("tableid"))
                throw $util.ProtocolError("missing required 'tableid'", { instance: message });
            if (!message.hasOwnProperty("subroomid"))
                throw $util.ProtocolError("missing required 'subroomid'", { instance: message });
            if (!message.hasOwnProperty("param"))
                throw $util.ProtocolError("missing required 'param'", { instance: message });
            return message;
        };

        /**
         * Decodes a table_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.table_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.table_info} table_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        table_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a table_info message.
         * @function verify
         * @memberof game.table_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        table_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.tableid))
                return "tableid: integer expected";
            if (!$util.isInteger(message.subroomid))
                return "subroomid: integer expected";
            {
                var error = $root.game.table_param.verify(message.param);
                if (error)
                    return "param." + error;
            }
            return null;
        };

        /**
         * Creates a table_info message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.table_info
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.table_info} table_info
         */
        table_info.fromObject = function fromObject(object) {
            if (object instanceof $root.game.table_info)
                return object;
            var message = new $root.game.table_info();
            if (object.tableid != null)
                message.tableid = object.tableid >>> 0;
            if (object.subroomid != null)
                message.subroomid = object.subroomid >>> 0;
            if (object.param != null) {
                if (typeof object.param !== "object")
                    throw TypeError(".game.table_info.param: object expected");
                message.param = $root.game.table_param.fromObject(object.param);
            }
            return message;
        };

        /**
         * Creates a plain object from a table_info message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.table_info
         * @static
         * @param {game.table_info} message table_info
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        table_info.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.tableid = 0;
                object.subroomid = 0;
                object.param = null;
            }
            if (message.tableid != null && message.hasOwnProperty("tableid"))
                object.tableid = message.tableid;
            if (message.subroomid != null && message.hasOwnProperty("subroomid"))
                object.subroomid = message.subroomid;
            if (message.param != null && message.hasOwnProperty("param"))
                object.param = $root.game.table_param.toObject(message.param, options);
            return object;
        };

        /**
         * Converts this table_info to JSON.
         * @function toJSON
         * @memberof game.table_info
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        table_info.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return table_info;
    })();

    game.notify_tables_info = (function() {

        /**
         * Properties of a notify_tables_info.
         * @memberof game
         * @interface Inotify_tables_info
         * @property {Array.<game.Itable_info>|null} [tables_info] notify_tables_info tables_info
         */

        /**
         * Constructs a new notify_tables_info.
         * @memberof game
         * @classdesc Represents a notify_tables_info.
         * @implements Inotify_tables_info
         * @constructor
         * @param {game.Inotify_tables_info=} [properties] Properties to set
         */
        function notify_tables_info(properties) {
            this.tables_info = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * notify_tables_info tables_info.
         * @member {Array.<game.Itable_info>} tables_info
         * @memberof game.notify_tables_info
         * @instance
         */
        notify_tables_info.prototype.tables_info = $util.emptyArray;

        /**
         * Creates a new notify_tables_info instance using the specified properties.
         * @function create
         * @memberof game.notify_tables_info
         * @static
         * @param {game.Inotify_tables_info=} [properties] Properties to set
         * @returns {game.notify_tables_info} notify_tables_info instance
         */
        notify_tables_info.create = function create(properties) {
            return new notify_tables_info(properties);
        };

        /**
         * Encodes the specified notify_tables_info message. Does not implicitly {@link game.notify_tables_info.verify|verify} messages.
         * @function encode
         * @memberof game.notify_tables_info
         * @static
         * @param {game.Inotify_tables_info} message notify_tables_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_tables_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tables_info != null && message.tables_info.length)
                for (var i = 0; i < message.tables_info.length; ++i)
                    $root.game.table_info.encode(message.tables_info[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified notify_tables_info message, length delimited. Does not implicitly {@link game.notify_tables_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.notify_tables_info
         * @static
         * @param {game.Inotify_tables_info} message notify_tables_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_tables_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a notify_tables_info message from the specified reader or buffer.
         * @function decode
         * @memberof game.notify_tables_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.notify_tables_info} notify_tables_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_tables_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.notify_tables_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.tables_info && message.tables_info.length))
                        message.tables_info = [];
                    message.tables_info.push($root.game.table_info.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a notify_tables_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.notify_tables_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.notify_tables_info} notify_tables_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_tables_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a notify_tables_info message.
         * @function verify
         * @memberof game.notify_tables_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        notify_tables_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tables_info != null && message.hasOwnProperty("tables_info")) {
                if (!Array.isArray(message.tables_info))
                    return "tables_info: array expected";
                for (var i = 0; i < message.tables_info.length; ++i) {
                    var error = $root.game.table_info.verify(message.tables_info[i]);
                    if (error)
                        return "tables_info." + error;
                }
            }
            return null;
        };

        /**
         * Creates a notify_tables_info message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.notify_tables_info
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.notify_tables_info} notify_tables_info
         */
        notify_tables_info.fromObject = function fromObject(object) {
            if (object instanceof $root.game.notify_tables_info)
                return object;
            var message = new $root.game.notify_tables_info();
            if (object.tables_info) {
                if (!Array.isArray(object.tables_info))
                    throw TypeError(".game.notify_tables_info.tables_info: array expected");
                message.tables_info = [];
                for (var i = 0; i < object.tables_info.length; ++i) {
                    if (typeof object.tables_info[i] !== "object")
                        throw TypeError(".game.notify_tables_info.tables_info: object expected");
                    message.tables_info[i] = $root.game.table_info.fromObject(object.tables_info[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a notify_tables_info message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.notify_tables_info
         * @static
         * @param {game.notify_tables_info} message notify_tables_info
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        notify_tables_info.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.tables_info = [];
            if (message.tables_info && message.tables_info.length) {
                object.tables_info = [];
                for (var j = 0; j < message.tables_info.length; ++j)
                    object.tables_info[j] = $root.game.table_info.toObject(message.tables_info[j], options);
            }
            return object;
        };

        /**
         * Converts this notify_tables_info to JSON.
         * @function toJSON
         * @memberof game.notify_tables_info
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        notify_tables_info.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return notify_tables_info;
    })();

    game.request_sitdown = (function() {

        /**
         * Properties of a request_sitdown.
         * @memberof game
         * @interface Irequest_sitdown
         * @property {number} tableid request_sitdown tableid
         * @property {number} chairid request_sitdown chairid
         * @property {number|null} [subroomid] request_sitdown subroomid
         * @property {number|null} [subroom_wanfaid] request_sitdown subroom_wanfaid
         */

        /**
         * Constructs a new request_sitdown.
         * @memberof game
         * @classdesc Represents a request_sitdown.
         * @implements Irequest_sitdown
         * @constructor
         * @param {game.Irequest_sitdown=} [properties] Properties to set
         */
        function request_sitdown(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_sitdown tableid.
         * @member {number} tableid
         * @memberof game.request_sitdown
         * @instance
         */
        request_sitdown.prototype.tableid = 0;

        /**
         * request_sitdown chairid.
         * @member {number} chairid
         * @memberof game.request_sitdown
         * @instance
         */
        request_sitdown.prototype.chairid = 0;

        /**
         * request_sitdown subroomid.
         * @member {number} subroomid
         * @memberof game.request_sitdown
         * @instance
         */
        request_sitdown.prototype.subroomid = 0;

        /**
         * request_sitdown subroom_wanfaid.
         * @member {number} subroom_wanfaid
         * @memberof game.request_sitdown
         * @instance
         */
        request_sitdown.prototype.subroom_wanfaid = 0;

        /**
         * Creates a new request_sitdown instance using the specified properties.
         * @function create
         * @memberof game.request_sitdown
         * @static
         * @param {game.Irequest_sitdown=} [properties] Properties to set
         * @returns {game.request_sitdown} request_sitdown instance
         */
        request_sitdown.create = function create(properties) {
            return new request_sitdown(properties);
        };

        /**
         * Encodes the specified request_sitdown message. Does not implicitly {@link game.request_sitdown.verify|verify} messages.
         * @function encode
         * @memberof game.request_sitdown
         * @static
         * @param {game.Irequest_sitdown} message request_sitdown message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_sitdown.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tableid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.chairid);
            if (message.subroomid != null && Object.hasOwnProperty.call(message, "subroomid"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.subroomid);
            if (message.subroom_wanfaid != null && Object.hasOwnProperty.call(message, "subroom_wanfaid"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.subroom_wanfaid);
            return writer;
        };

        /**
         * Encodes the specified request_sitdown message, length delimited. Does not implicitly {@link game.request_sitdown.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.request_sitdown
         * @static
         * @param {game.Irequest_sitdown} message request_sitdown message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_sitdown.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_sitdown message from the specified reader or buffer.
         * @function decode
         * @memberof game.request_sitdown
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.request_sitdown} request_sitdown
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_sitdown.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.request_sitdown();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tableid = reader.uint32();
                    break;
                case 2:
                    message.chairid = reader.uint32();
                    break;
                case 3:
                    message.subroomid = reader.uint32();
                    break;
                case 4:
                    message.subroom_wanfaid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("tableid"))
                throw $util.ProtocolError("missing required 'tableid'", { instance: message });
            if (!message.hasOwnProperty("chairid"))
                throw $util.ProtocolError("missing required 'chairid'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_sitdown message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.request_sitdown
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.request_sitdown} request_sitdown
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_sitdown.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_sitdown message.
         * @function verify
         * @memberof game.request_sitdown
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_sitdown.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.tableid))
                return "tableid: integer expected";
            if (!$util.isInteger(message.chairid))
                return "chairid: integer expected";
            if (message.subroomid != null && message.hasOwnProperty("subroomid"))
                if (!$util.isInteger(message.subroomid))
                    return "subroomid: integer expected";
            if (message.subroom_wanfaid != null && message.hasOwnProperty("subroom_wanfaid"))
                if (!$util.isInteger(message.subroom_wanfaid))
                    return "subroom_wanfaid: integer expected";
            return null;
        };

        /**
         * Creates a request_sitdown message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.request_sitdown
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.request_sitdown} request_sitdown
         */
        request_sitdown.fromObject = function fromObject(object) {
            if (object instanceof $root.game.request_sitdown)
                return object;
            var message = new $root.game.request_sitdown();
            if (object.tableid != null)
                message.tableid = object.tableid >>> 0;
            if (object.chairid != null)
                message.chairid = object.chairid >>> 0;
            if (object.subroomid != null)
                message.subroomid = object.subroomid >>> 0;
            if (object.subroom_wanfaid != null)
                message.subroom_wanfaid = object.subroom_wanfaid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a request_sitdown message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.request_sitdown
         * @static
         * @param {game.request_sitdown} message request_sitdown
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_sitdown.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.tableid = 0;
                object.chairid = 0;
                object.subroomid = 0;
                object.subroom_wanfaid = 0;
            }
            if (message.tableid != null && message.hasOwnProperty("tableid"))
                object.tableid = message.tableid;
            if (message.chairid != null && message.hasOwnProperty("chairid"))
                object.chairid = message.chairid;
            if (message.subroomid != null && message.hasOwnProperty("subroomid"))
                object.subroomid = message.subroomid;
            if (message.subroom_wanfaid != null && message.hasOwnProperty("subroom_wanfaid"))
                object.subroom_wanfaid = message.subroom_wanfaid;
            return object;
        };

        /**
         * Converts this request_sitdown to JSON.
         * @function toJSON
         * @memberof game.request_sitdown
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_sitdown.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_sitdown;
    })();

    game.request_standup = (function() {

        /**
         * Properties of a request_standup.
         * @memberof game
         * @interface Irequest_standup
         * @property {number} tableid request_standup tableid
         * @property {number} chairid request_standup chairid
         * @property {boolean|null} [ob_mode] request_standup ob_mode
         */

        /**
         * Constructs a new request_standup.
         * @memberof game
         * @classdesc Represents a request_standup.
         * @implements Irequest_standup
         * @constructor
         * @param {game.Irequest_standup=} [properties] Properties to set
         */
        function request_standup(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_standup tableid.
         * @member {number} tableid
         * @memberof game.request_standup
         * @instance
         */
        request_standup.prototype.tableid = 0;

        /**
         * request_standup chairid.
         * @member {number} chairid
         * @memberof game.request_standup
         * @instance
         */
        request_standup.prototype.chairid = 0;

        /**
         * request_standup ob_mode.
         * @member {boolean} ob_mode
         * @memberof game.request_standup
         * @instance
         */
        request_standup.prototype.ob_mode = false;

        /**
         * Creates a new request_standup instance using the specified properties.
         * @function create
         * @memberof game.request_standup
         * @static
         * @param {game.Irequest_standup=} [properties] Properties to set
         * @returns {game.request_standup} request_standup instance
         */
        request_standup.create = function create(properties) {
            return new request_standup(properties);
        };

        /**
         * Encodes the specified request_standup message. Does not implicitly {@link game.request_standup.verify|verify} messages.
         * @function encode
         * @memberof game.request_standup
         * @static
         * @param {game.Irequest_standup} message request_standup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_standup.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tableid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.chairid);
            if (message.ob_mode != null && Object.hasOwnProperty.call(message, "ob_mode"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.ob_mode);
            return writer;
        };

        /**
         * Encodes the specified request_standup message, length delimited. Does not implicitly {@link game.request_standup.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.request_standup
         * @static
         * @param {game.Irequest_standup} message request_standup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_standup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_standup message from the specified reader or buffer.
         * @function decode
         * @memberof game.request_standup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.request_standup} request_standup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_standup.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.request_standup();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tableid = reader.uint32();
                    break;
                case 2:
                    message.chairid = reader.uint32();
                    break;
                case 3:
                    message.ob_mode = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("tableid"))
                throw $util.ProtocolError("missing required 'tableid'", { instance: message });
            if (!message.hasOwnProperty("chairid"))
                throw $util.ProtocolError("missing required 'chairid'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_standup message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.request_standup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.request_standup} request_standup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_standup.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_standup message.
         * @function verify
         * @memberof game.request_standup
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_standup.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.tableid))
                return "tableid: integer expected";
            if (!$util.isInteger(message.chairid))
                return "chairid: integer expected";
            if (message.ob_mode != null && message.hasOwnProperty("ob_mode"))
                if (typeof message.ob_mode !== "boolean")
                    return "ob_mode: boolean expected";
            return null;
        };

        /**
         * Creates a request_standup message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.request_standup
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.request_standup} request_standup
         */
        request_standup.fromObject = function fromObject(object) {
            if (object instanceof $root.game.request_standup)
                return object;
            var message = new $root.game.request_standup();
            if (object.tableid != null)
                message.tableid = object.tableid >>> 0;
            if (object.chairid != null)
                message.chairid = object.chairid >>> 0;
            if (object.ob_mode != null)
                message.ob_mode = Boolean(object.ob_mode);
            return message;
        };

        /**
         * Creates a plain object from a request_standup message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.request_standup
         * @static
         * @param {game.request_standup} message request_standup
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_standup.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.tableid = 0;
                object.chairid = 0;
                object.ob_mode = false;
            }
            if (message.tableid != null && message.hasOwnProperty("tableid"))
                object.tableid = message.tableid;
            if (message.chairid != null && message.hasOwnProperty("chairid"))
                object.chairid = message.chairid;
            if (message.ob_mode != null && message.hasOwnProperty("ob_mode"))
                object.ob_mode = message.ob_mode;
            return object;
        };

        /**
         * Converts this request_standup to JSON.
         * @function toJSON
         * @memberof game.request_standup
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_standup.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_standup;
    })();

    game.request_change_table = (function() {

        /**
         * Properties of a request_change_table.
         * @memberof game
         * @interface Irequest_change_table
         */

        /**
         * Constructs a new request_change_table.
         * @memberof game
         * @classdesc Represents a request_change_table.
         * @implements Irequest_change_table
         * @constructor
         * @param {game.Irequest_change_table=} [properties] Properties to set
         */
        function request_change_table(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new request_change_table instance using the specified properties.
         * @function create
         * @memberof game.request_change_table
         * @static
         * @param {game.Irequest_change_table=} [properties] Properties to set
         * @returns {game.request_change_table} request_change_table instance
         */
        request_change_table.create = function create(properties) {
            return new request_change_table(properties);
        };

        /**
         * Encodes the specified request_change_table message. Does not implicitly {@link game.request_change_table.verify|verify} messages.
         * @function encode
         * @memberof game.request_change_table
         * @static
         * @param {game.Irequest_change_table} message request_change_table message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_change_table.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified request_change_table message, length delimited. Does not implicitly {@link game.request_change_table.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.request_change_table
         * @static
         * @param {game.Irequest_change_table} message request_change_table message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_change_table.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_change_table message from the specified reader or buffer.
         * @function decode
         * @memberof game.request_change_table
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.request_change_table} request_change_table
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_change_table.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.request_change_table();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a request_change_table message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.request_change_table
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.request_change_table} request_change_table
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_change_table.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_change_table message.
         * @function verify
         * @memberof game.request_change_table
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_change_table.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a request_change_table message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.request_change_table
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.request_change_table} request_change_table
         */
        request_change_table.fromObject = function fromObject(object) {
            if (object instanceof $root.game.request_change_table)
                return object;
            return new $root.game.request_change_table();
        };

        /**
         * Creates a plain object from a request_change_table message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.request_change_table
         * @static
         * @param {game.request_change_table} message request_change_table
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_change_table.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this request_change_table to JSON.
         * @function toJSON
         * @memberof game.request_change_table
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_change_table.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_change_table;
    })();

    game.reponse_action_failed = (function() {

        /**
         * Properties of a reponse_action_failed.
         * @memberof game
         * @interface Ireponse_action_failed
         * @property {string} reason reponse_action_failed reason
         */

        /**
         * Constructs a new reponse_action_failed.
         * @memberof game
         * @classdesc Represents a reponse_action_failed.
         * @implements Ireponse_action_failed
         * @constructor
         * @param {game.Ireponse_action_failed=} [properties] Properties to set
         */
        function reponse_action_failed(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * reponse_action_failed reason.
         * @member {string} reason
         * @memberof game.reponse_action_failed
         * @instance
         */
        reponse_action_failed.prototype.reason = "";

        /**
         * Creates a new reponse_action_failed instance using the specified properties.
         * @function create
         * @memberof game.reponse_action_failed
         * @static
         * @param {game.Ireponse_action_failed=} [properties] Properties to set
         * @returns {game.reponse_action_failed} reponse_action_failed instance
         */
        reponse_action_failed.create = function create(properties) {
            return new reponse_action_failed(properties);
        };

        /**
         * Encodes the specified reponse_action_failed message. Does not implicitly {@link game.reponse_action_failed.verify|verify} messages.
         * @function encode
         * @memberof game.reponse_action_failed
         * @static
         * @param {game.Ireponse_action_failed} message reponse_action_failed message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        reponse_action_failed.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.reason);
            return writer;
        };

        /**
         * Encodes the specified reponse_action_failed message, length delimited. Does not implicitly {@link game.reponse_action_failed.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.reponse_action_failed
         * @static
         * @param {game.Ireponse_action_failed} message reponse_action_failed message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        reponse_action_failed.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a reponse_action_failed message from the specified reader or buffer.
         * @function decode
         * @memberof game.reponse_action_failed
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.reponse_action_failed} reponse_action_failed
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        reponse_action_failed.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.reponse_action_failed();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.reason = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("reason"))
                throw $util.ProtocolError("missing required 'reason'", { instance: message });
            return message;
        };

        /**
         * Decodes a reponse_action_failed message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.reponse_action_failed
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.reponse_action_failed} reponse_action_failed
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        reponse_action_failed.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a reponse_action_failed message.
         * @function verify
         * @memberof game.reponse_action_failed
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        reponse_action_failed.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isString(message.reason))
                return "reason: string expected";
            return null;
        };

        /**
         * Creates a reponse_action_failed message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.reponse_action_failed
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.reponse_action_failed} reponse_action_failed
         */
        reponse_action_failed.fromObject = function fromObject(object) {
            if (object instanceof $root.game.reponse_action_failed)
                return object;
            var message = new $root.game.reponse_action_failed();
            if (object.reason != null)
                message.reason = String(object.reason);
            return message;
        };

        /**
         * Creates a plain object from a reponse_action_failed message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.reponse_action_failed
         * @static
         * @param {game.reponse_action_failed} message reponse_action_failed
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        reponse_action_failed.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.reason = "";
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            return object;
        };

        /**
         * Converts this reponse_action_failed to JSON.
         * @function toJSON
         * @memberof game.reponse_action_failed
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        reponse_action_failed.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return reponse_action_failed;
    })();

    game.notify_userscore = (function() {

        /**
         * Properties of a notify_userscore.
         * @memberof game
         * @interface Inotify_userscore
         * @property {number} userid notify_userscore userid
         * @property {number|Long} user_score notify_userscore user_score
         */

        /**
         * Constructs a new notify_userscore.
         * @memberof game
         * @classdesc Represents a notify_userscore.
         * @implements Inotify_userscore
         * @constructor
         * @param {game.Inotify_userscore=} [properties] Properties to set
         */
        function notify_userscore(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * notify_userscore userid.
         * @member {number} userid
         * @memberof game.notify_userscore
         * @instance
         */
        notify_userscore.prototype.userid = 0;

        /**
         * notify_userscore user_score.
         * @member {number|Long} user_score
         * @memberof game.notify_userscore
         * @instance
         */
        notify_userscore.prototype.user_score = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new notify_userscore instance using the specified properties.
         * @function create
         * @memberof game.notify_userscore
         * @static
         * @param {game.Inotify_userscore=} [properties] Properties to set
         * @returns {game.notify_userscore} notify_userscore instance
         */
        notify_userscore.create = function create(properties) {
            return new notify_userscore(properties);
        };

        /**
         * Encodes the specified notify_userscore message. Does not implicitly {@link game.notify_userscore.verify|verify} messages.
         * @function encode
         * @memberof game.notify_userscore
         * @static
         * @param {game.Inotify_userscore} message notify_userscore message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_userscore.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 0 =*/16).sint64(message.user_score);
            return writer;
        };

        /**
         * Encodes the specified notify_userscore message, length delimited. Does not implicitly {@link game.notify_userscore.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.notify_userscore
         * @static
         * @param {game.Inotify_userscore} message notify_userscore message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_userscore.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a notify_userscore message from the specified reader or buffer.
         * @function decode
         * @memberof game.notify_userscore
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.notify_userscore} notify_userscore
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_userscore.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.notify_userscore();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.user_score = reader.sint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("user_score"))
                throw $util.ProtocolError("missing required 'user_score'", { instance: message });
            return message;
        };

        /**
         * Decodes a notify_userscore message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.notify_userscore
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.notify_userscore} notify_userscore
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_userscore.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a notify_userscore message.
         * @function verify
         * @memberof game.notify_userscore
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        notify_userscore.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isInteger(message.user_score) && !(message.user_score && $util.isInteger(message.user_score.low) && $util.isInteger(message.user_score.high)))
                return "user_score: integer|Long expected";
            return null;
        };

        /**
         * Creates a notify_userscore message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.notify_userscore
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.notify_userscore} notify_userscore
         */
        notify_userscore.fromObject = function fromObject(object) {
            if (object instanceof $root.game.notify_userscore)
                return object;
            var message = new $root.game.notify_userscore();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.user_score != null)
                if ($util.Long)
                    (message.user_score = $util.Long.fromValue(object.user_score)).unsigned = false;
                else if (typeof object.user_score === "string")
                    message.user_score = parseInt(object.user_score, 10);
                else if (typeof object.user_score === "number")
                    message.user_score = object.user_score;
                else if (typeof object.user_score === "object")
                    message.user_score = new $util.LongBits(object.user_score.low >>> 0, object.user_score.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a notify_userscore message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.notify_userscore
         * @static
         * @param {game.notify_userscore} message notify_userscore
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        notify_userscore.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.user_score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.user_score = options.longs === String ? "0" : 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.user_score != null && message.hasOwnProperty("user_score"))
                if (typeof message.user_score === "number")
                    object.user_score = options.longs === String ? String(message.user_score) : message.user_score;
                else
                    object.user_score = options.longs === String ? $util.Long.prototype.toString.call(message.user_score) : options.longs === Number ? new $util.LongBits(message.user_score.low >>> 0, message.user_score.high >>> 0).toNumber() : message.user_score;
            return object;
        };

        /**
         * Converts this notify_userscore to JSON.
         * @function toJSON
         * @memberof game.notify_userscore
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        notify_userscore.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return notify_userscore;
    })();

    game.notify_userstatus = (function() {

        /**
         * Properties of a notify_userstatus.
         * @memberof game
         * @interface Inotify_userstatus
         * @property {number} userid notify_userstatus userid
         * @property {number} tableid notify_userstatus tableid
         * @property {number} chairid notify_userstatus chairid
         * @property {number} user_status notify_userstatus user_status
         * @property {boolean} banker notify_userstatus banker
         */

        /**
         * Constructs a new notify_userstatus.
         * @memberof game
         * @classdesc Represents a notify_userstatus.
         * @implements Inotify_userstatus
         * @constructor
         * @param {game.Inotify_userstatus=} [properties] Properties to set
         */
        function notify_userstatus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * notify_userstatus userid.
         * @member {number} userid
         * @memberof game.notify_userstatus
         * @instance
         */
        notify_userstatus.prototype.userid = 0;

        /**
         * notify_userstatus tableid.
         * @member {number} tableid
         * @memberof game.notify_userstatus
         * @instance
         */
        notify_userstatus.prototype.tableid = 0;

        /**
         * notify_userstatus chairid.
         * @member {number} chairid
         * @memberof game.notify_userstatus
         * @instance
         */
        notify_userstatus.prototype.chairid = 0;

        /**
         * notify_userstatus user_status.
         * @member {number} user_status
         * @memberof game.notify_userstatus
         * @instance
         */
        notify_userstatus.prototype.user_status = 0;

        /**
         * notify_userstatus banker.
         * @member {boolean} banker
         * @memberof game.notify_userstatus
         * @instance
         */
        notify_userstatus.prototype.banker = false;

        /**
         * Creates a new notify_userstatus instance using the specified properties.
         * @function create
         * @memberof game.notify_userstatus
         * @static
         * @param {game.Inotify_userstatus=} [properties] Properties to set
         * @returns {game.notify_userstatus} notify_userstatus instance
         */
        notify_userstatus.create = function create(properties) {
            return new notify_userstatus(properties);
        };

        /**
         * Encodes the specified notify_userstatus message. Does not implicitly {@link game.notify_userstatus.verify|verify} messages.
         * @function encode
         * @memberof game.notify_userstatus
         * @static
         * @param {game.Inotify_userstatus} message notify_userstatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_userstatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tableid);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.chairid);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.user_status);
            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.banker);
            return writer;
        };

        /**
         * Encodes the specified notify_userstatus message, length delimited. Does not implicitly {@link game.notify_userstatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.notify_userstatus
         * @static
         * @param {game.Inotify_userstatus} message notify_userstatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_userstatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a notify_userstatus message from the specified reader or buffer.
         * @function decode
         * @memberof game.notify_userstatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.notify_userstatus} notify_userstatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_userstatus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.notify_userstatus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.tableid = reader.uint32();
                    break;
                case 3:
                    message.chairid = reader.uint32();
                    break;
                case 4:
                    message.user_status = reader.uint32();
                    break;
                case 5:
                    message.banker = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("tableid"))
                throw $util.ProtocolError("missing required 'tableid'", { instance: message });
            if (!message.hasOwnProperty("chairid"))
                throw $util.ProtocolError("missing required 'chairid'", { instance: message });
            if (!message.hasOwnProperty("user_status"))
                throw $util.ProtocolError("missing required 'user_status'", { instance: message });
            if (!message.hasOwnProperty("banker"))
                throw $util.ProtocolError("missing required 'banker'", { instance: message });
            return message;
        };

        /**
         * Decodes a notify_userstatus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.notify_userstatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.notify_userstatus} notify_userstatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_userstatus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a notify_userstatus message.
         * @function verify
         * @memberof game.notify_userstatus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        notify_userstatus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isInteger(message.tableid))
                return "tableid: integer expected";
            if (!$util.isInteger(message.chairid))
                return "chairid: integer expected";
            if (!$util.isInteger(message.user_status))
                return "user_status: integer expected";
            if (typeof message.banker !== "boolean")
                return "banker: boolean expected";
            return null;
        };

        /**
         * Creates a notify_userstatus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.notify_userstatus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.notify_userstatus} notify_userstatus
         */
        notify_userstatus.fromObject = function fromObject(object) {
            if (object instanceof $root.game.notify_userstatus)
                return object;
            var message = new $root.game.notify_userstatus();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.tableid != null)
                message.tableid = object.tableid >>> 0;
            if (object.chairid != null)
                message.chairid = object.chairid >>> 0;
            if (object.user_status != null)
                message.user_status = object.user_status >>> 0;
            if (object.banker != null)
                message.banker = Boolean(object.banker);
            return message;
        };

        /**
         * Creates a plain object from a notify_userstatus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.notify_userstatus
         * @static
         * @param {game.notify_userstatus} message notify_userstatus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        notify_userstatus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.tableid = 0;
                object.chairid = 0;
                object.user_status = 0;
                object.banker = false;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.tableid != null && message.hasOwnProperty("tableid"))
                object.tableid = message.tableid;
            if (message.chairid != null && message.hasOwnProperty("chairid"))
                object.chairid = message.chairid;
            if (message.user_status != null && message.hasOwnProperty("user_status"))
                object.user_status = message.user_status;
            if (message.banker != null && message.hasOwnProperty("banker"))
                object.banker = message.banker;
            return object;
        };

        /**
         * Converts this notify_userstatus to JSON.
         * @function toJSON
         * @memberof game.notify_userstatus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        notify_userstatus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return notify_userstatus;
    })();

    game.request_create_table = (function() {

        /**
         * Properties of a request_create_table.
         * @memberof game
         * @interface Irequest_create_table
         * @property {number} userid request_create_table userid
         * @property {game.Itable_param} param request_create_table param
         */

        /**
         * Constructs a new request_create_table.
         * @memberof game
         * @classdesc Represents a request_create_table.
         * @implements Irequest_create_table
         * @constructor
         * @param {game.Irequest_create_table=} [properties] Properties to set
         */
        function request_create_table(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_create_table userid.
         * @member {number} userid
         * @memberof game.request_create_table
         * @instance
         */
        request_create_table.prototype.userid = 0;

        /**
         * request_create_table param.
         * @member {game.Itable_param} param
         * @memberof game.request_create_table
         * @instance
         */
        request_create_table.prototype.param = null;

        /**
         * Creates a new request_create_table instance using the specified properties.
         * @function create
         * @memberof game.request_create_table
         * @static
         * @param {game.Irequest_create_table=} [properties] Properties to set
         * @returns {game.request_create_table} request_create_table instance
         */
        request_create_table.create = function create(properties) {
            return new request_create_table(properties);
        };

        /**
         * Encodes the specified request_create_table message. Does not implicitly {@link game.request_create_table.verify|verify} messages.
         * @function encode
         * @memberof game.request_create_table
         * @static
         * @param {game.Irequest_create_table} message request_create_table message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_create_table.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            $root.game.table_param.encode(message.param, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified request_create_table message, length delimited. Does not implicitly {@link game.request_create_table.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.request_create_table
         * @static
         * @param {game.Irequest_create_table} message request_create_table message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_create_table.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_create_table message from the specified reader or buffer.
         * @function decode
         * @memberof game.request_create_table
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.request_create_table} request_create_table
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_create_table.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.request_create_table();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.param = $root.game.table_param.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("param"))
                throw $util.ProtocolError("missing required 'param'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_create_table message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.request_create_table
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.request_create_table} request_create_table
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_create_table.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_create_table message.
         * @function verify
         * @memberof game.request_create_table
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_create_table.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            {
                var error = $root.game.table_param.verify(message.param);
                if (error)
                    return "param." + error;
            }
            return null;
        };

        /**
         * Creates a request_create_table message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.request_create_table
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.request_create_table} request_create_table
         */
        request_create_table.fromObject = function fromObject(object) {
            if (object instanceof $root.game.request_create_table)
                return object;
            var message = new $root.game.request_create_table();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.param != null) {
                if (typeof object.param !== "object")
                    throw TypeError(".game.request_create_table.param: object expected");
                message.param = $root.game.table_param.fromObject(object.param);
            }
            return message;
        };

        /**
         * Creates a plain object from a request_create_table message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.request_create_table
         * @static
         * @param {game.request_create_table} message request_create_table
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_create_table.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.param = null;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.param != null && message.hasOwnProperty("param"))
                object.param = $root.game.table_param.toObject(message.param, options);
            return object;
        };

        /**
         * Converts this request_create_table to JSON.
         * @function toJSON
         * @memberof game.request_create_table
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_create_table.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_create_table;
    })();

    game.response_create_table = (function() {

        /**
         * Properties of a response_create_table.
         * @memberof game
         * @interface Iresponse_create_table
         * @property {number} tableid response_create_table tableid
         * @property {string|null} [reason] response_create_table reason
         */

        /**
         * Constructs a new response_create_table.
         * @memberof game
         * @classdesc Represents a response_create_table.
         * @implements Iresponse_create_table
         * @constructor
         * @param {game.Iresponse_create_table=} [properties] Properties to set
         */
        function response_create_table(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_create_table tableid.
         * @member {number} tableid
         * @memberof game.response_create_table
         * @instance
         */
        response_create_table.prototype.tableid = 0;

        /**
         * response_create_table reason.
         * @member {string} reason
         * @memberof game.response_create_table
         * @instance
         */
        response_create_table.prototype.reason = "";

        /**
         * Creates a new response_create_table instance using the specified properties.
         * @function create
         * @memberof game.response_create_table
         * @static
         * @param {game.Iresponse_create_table=} [properties] Properties to set
         * @returns {game.response_create_table} response_create_table instance
         */
        response_create_table.create = function create(properties) {
            return new response_create_table(properties);
        };

        /**
         * Encodes the specified response_create_table message. Does not implicitly {@link game.response_create_table.verify|verify} messages.
         * @function encode
         * @memberof game.response_create_table
         * @static
         * @param {game.Iresponse_create_table} message response_create_table message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_create_table.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tableid);
            if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.reason);
            return writer;
        };

        /**
         * Encodes the specified response_create_table message, length delimited. Does not implicitly {@link game.response_create_table.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.response_create_table
         * @static
         * @param {game.Iresponse_create_table} message response_create_table message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_create_table.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_create_table message from the specified reader or buffer.
         * @function decode
         * @memberof game.response_create_table
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.response_create_table} response_create_table
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_create_table.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.response_create_table();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tableid = reader.uint32();
                    break;
                case 3:
                    message.reason = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("tableid"))
                throw $util.ProtocolError("missing required 'tableid'", { instance: message });
            return message;
        };

        /**
         * Decodes a response_create_table message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.response_create_table
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.response_create_table} response_create_table
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_create_table.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_create_table message.
         * @function verify
         * @memberof game.response_create_table
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_create_table.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.tableid))
                return "tableid: integer expected";
            if (message.reason != null && message.hasOwnProperty("reason"))
                if (!$util.isString(message.reason))
                    return "reason: string expected";
            return null;
        };

        /**
         * Creates a response_create_table message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.response_create_table
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.response_create_table} response_create_table
         */
        response_create_table.fromObject = function fromObject(object) {
            if (object instanceof $root.game.response_create_table)
                return object;
            var message = new $root.game.response_create_table();
            if (object.tableid != null)
                message.tableid = object.tableid >>> 0;
            if (object.reason != null)
                message.reason = String(object.reason);
            return message;
        };

        /**
         * Creates a plain object from a response_create_table message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.response_create_table
         * @static
         * @param {game.response_create_table} message response_create_table
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_create_table.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.tableid = 0;
                object.reason = "";
            }
            if (message.tableid != null && message.hasOwnProperty("tableid"))
                object.tableid = message.tableid;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            return object;
        };

        /**
         * Converts this response_create_table to JSON.
         * @function toJSON
         * @memberof game.response_create_table
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_create_table.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_create_table;
    })();

    game.notify_create_table = (function() {

        /**
         * Properties of a notify_create_table.
         * @memberof game
         * @interface Inotify_create_table
         * @property {game.Itable_info} table_info notify_create_table table_info
         */

        /**
         * Constructs a new notify_create_table.
         * @memberof game
         * @classdesc Represents a notify_create_table.
         * @implements Inotify_create_table
         * @constructor
         * @param {game.Inotify_create_table=} [properties] Properties to set
         */
        function notify_create_table(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * notify_create_table table_info.
         * @member {game.Itable_info} table_info
         * @memberof game.notify_create_table
         * @instance
         */
        notify_create_table.prototype.table_info = null;

        /**
         * Creates a new notify_create_table instance using the specified properties.
         * @function create
         * @memberof game.notify_create_table
         * @static
         * @param {game.Inotify_create_table=} [properties] Properties to set
         * @returns {game.notify_create_table} notify_create_table instance
         */
        notify_create_table.create = function create(properties) {
            return new notify_create_table(properties);
        };

        /**
         * Encodes the specified notify_create_table message. Does not implicitly {@link game.notify_create_table.verify|verify} messages.
         * @function encode
         * @memberof game.notify_create_table
         * @static
         * @param {game.Inotify_create_table} message notify_create_table message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_create_table.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            $root.game.table_info.encode(message.table_info, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified notify_create_table message, length delimited. Does not implicitly {@link game.notify_create_table.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.notify_create_table
         * @static
         * @param {game.Inotify_create_table} message notify_create_table message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_create_table.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a notify_create_table message from the specified reader or buffer.
         * @function decode
         * @memberof game.notify_create_table
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.notify_create_table} notify_create_table
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_create_table.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.notify_create_table();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.table_info = $root.game.table_info.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("table_info"))
                throw $util.ProtocolError("missing required 'table_info'", { instance: message });
            return message;
        };

        /**
         * Decodes a notify_create_table message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.notify_create_table
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.notify_create_table} notify_create_table
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_create_table.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a notify_create_table message.
         * @function verify
         * @memberof game.notify_create_table
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        notify_create_table.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            {
                var error = $root.game.table_info.verify(message.table_info);
                if (error)
                    return "table_info." + error;
            }
            return null;
        };

        /**
         * Creates a notify_create_table message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.notify_create_table
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.notify_create_table} notify_create_table
         */
        notify_create_table.fromObject = function fromObject(object) {
            if (object instanceof $root.game.notify_create_table)
                return object;
            var message = new $root.game.notify_create_table();
            if (object.table_info != null) {
                if (typeof object.table_info !== "object")
                    throw TypeError(".game.notify_create_table.table_info: object expected");
                message.table_info = $root.game.table_info.fromObject(object.table_info);
            }
            return message;
        };

        /**
         * Creates a plain object from a notify_create_table message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.notify_create_table
         * @static
         * @param {game.notify_create_table} message notify_create_table
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        notify_create_table.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.table_info = null;
            if (message.table_info != null && message.hasOwnProperty("table_info"))
                object.table_info = $root.game.table_info.toObject(message.table_info, options);
            return object;
        };

        /**
         * Converts this notify_create_table to JSON.
         * @function toJSON
         * @memberof game.notify_create_table
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        notify_create_table.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return notify_create_table;
    })();

    game.request_delete_table = (function() {

        /**
         * Properties of a request_delete_table.
         * @memberof game
         * @interface Irequest_delete_table
         * @property {number} userid request_delete_table userid
         * @property {number} tableid request_delete_table tableid
         */

        /**
         * Constructs a new request_delete_table.
         * @memberof game
         * @classdesc Represents a request_delete_table.
         * @implements Irequest_delete_table
         * @constructor
         * @param {game.Irequest_delete_table=} [properties] Properties to set
         */
        function request_delete_table(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_delete_table userid.
         * @member {number} userid
         * @memberof game.request_delete_table
         * @instance
         */
        request_delete_table.prototype.userid = 0;

        /**
         * request_delete_table tableid.
         * @member {number} tableid
         * @memberof game.request_delete_table
         * @instance
         */
        request_delete_table.prototype.tableid = 0;

        /**
         * Creates a new request_delete_table instance using the specified properties.
         * @function create
         * @memberof game.request_delete_table
         * @static
         * @param {game.Irequest_delete_table=} [properties] Properties to set
         * @returns {game.request_delete_table} request_delete_table instance
         */
        request_delete_table.create = function create(properties) {
            return new request_delete_table(properties);
        };

        /**
         * Encodes the specified request_delete_table message. Does not implicitly {@link game.request_delete_table.verify|verify} messages.
         * @function encode
         * @memberof game.request_delete_table
         * @static
         * @param {game.Irequest_delete_table} message request_delete_table message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_delete_table.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tableid);
            return writer;
        };

        /**
         * Encodes the specified request_delete_table message, length delimited. Does not implicitly {@link game.request_delete_table.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.request_delete_table
         * @static
         * @param {game.Irequest_delete_table} message request_delete_table message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_delete_table.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_delete_table message from the specified reader or buffer.
         * @function decode
         * @memberof game.request_delete_table
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.request_delete_table} request_delete_table
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_delete_table.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.request_delete_table();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.tableid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("tableid"))
                throw $util.ProtocolError("missing required 'tableid'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_delete_table message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.request_delete_table
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.request_delete_table} request_delete_table
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_delete_table.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_delete_table message.
         * @function verify
         * @memberof game.request_delete_table
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_delete_table.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isInteger(message.tableid))
                return "tableid: integer expected";
            return null;
        };

        /**
         * Creates a request_delete_table message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.request_delete_table
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.request_delete_table} request_delete_table
         */
        request_delete_table.fromObject = function fromObject(object) {
            if (object instanceof $root.game.request_delete_table)
                return object;
            var message = new $root.game.request_delete_table();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.tableid != null)
                message.tableid = object.tableid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a request_delete_table message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.request_delete_table
         * @static
         * @param {game.request_delete_table} message request_delete_table
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_delete_table.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.tableid = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.tableid != null && message.hasOwnProperty("tableid"))
                object.tableid = message.tableid;
            return object;
        };

        /**
         * Converts this request_delete_table to JSON.
         * @function toJSON
         * @memberof game.request_delete_table
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_delete_table.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_delete_table;
    })();

    game.response_delete_table = (function() {

        /**
         * Properties of a response_delete_table.
         * @memberof game
         * @interface Iresponse_delete_table
         * @property {number} tableid response_delete_table tableid
         * @property {string|null} [reason] response_delete_table reason
         */

        /**
         * Constructs a new response_delete_table.
         * @memberof game
         * @classdesc Represents a response_delete_table.
         * @implements Iresponse_delete_table
         * @constructor
         * @param {game.Iresponse_delete_table=} [properties] Properties to set
         */
        function response_delete_table(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_delete_table tableid.
         * @member {number} tableid
         * @memberof game.response_delete_table
         * @instance
         */
        response_delete_table.prototype.tableid = 0;

        /**
         * response_delete_table reason.
         * @member {string} reason
         * @memberof game.response_delete_table
         * @instance
         */
        response_delete_table.prototype.reason = "";

        /**
         * Creates a new response_delete_table instance using the specified properties.
         * @function create
         * @memberof game.response_delete_table
         * @static
         * @param {game.Iresponse_delete_table=} [properties] Properties to set
         * @returns {game.response_delete_table} response_delete_table instance
         */
        response_delete_table.create = function create(properties) {
            return new response_delete_table(properties);
        };

        /**
         * Encodes the specified response_delete_table message. Does not implicitly {@link game.response_delete_table.verify|verify} messages.
         * @function encode
         * @memberof game.response_delete_table
         * @static
         * @param {game.Iresponse_delete_table} message response_delete_table message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_delete_table.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tableid);
            if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.reason);
            return writer;
        };

        /**
         * Encodes the specified response_delete_table message, length delimited. Does not implicitly {@link game.response_delete_table.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.response_delete_table
         * @static
         * @param {game.Iresponse_delete_table} message response_delete_table message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_delete_table.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_delete_table message from the specified reader or buffer.
         * @function decode
         * @memberof game.response_delete_table
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.response_delete_table} response_delete_table
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_delete_table.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.response_delete_table();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tableid = reader.uint32();
                    break;
                case 3:
                    message.reason = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("tableid"))
                throw $util.ProtocolError("missing required 'tableid'", { instance: message });
            return message;
        };

        /**
         * Decodes a response_delete_table message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.response_delete_table
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.response_delete_table} response_delete_table
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_delete_table.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_delete_table message.
         * @function verify
         * @memberof game.response_delete_table
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_delete_table.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.tableid))
                return "tableid: integer expected";
            if (message.reason != null && message.hasOwnProperty("reason"))
                if (!$util.isString(message.reason))
                    return "reason: string expected";
            return null;
        };

        /**
         * Creates a response_delete_table message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.response_delete_table
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.response_delete_table} response_delete_table
         */
        response_delete_table.fromObject = function fromObject(object) {
            if (object instanceof $root.game.response_delete_table)
                return object;
            var message = new $root.game.response_delete_table();
            if (object.tableid != null)
                message.tableid = object.tableid >>> 0;
            if (object.reason != null)
                message.reason = String(object.reason);
            return message;
        };

        /**
         * Creates a plain object from a response_delete_table message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.response_delete_table
         * @static
         * @param {game.response_delete_table} message response_delete_table
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_delete_table.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.tableid = 0;
                object.reason = "";
            }
            if (message.tableid != null && message.hasOwnProperty("tableid"))
                object.tableid = message.tableid;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            return object;
        };

        /**
         * Converts this response_delete_table to JSON.
         * @function toJSON
         * @memberof game.response_delete_table
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_delete_table.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_delete_table;
    })();

    game.notify_delete_table = (function() {

        /**
         * Properties of a notify_delete_table.
         * @memberof game
         * @interface Inotify_delete_table
         * @property {number} tableid notify_delete_table tableid
         */

        /**
         * Constructs a new notify_delete_table.
         * @memberof game
         * @classdesc Represents a notify_delete_table.
         * @implements Inotify_delete_table
         * @constructor
         * @param {game.Inotify_delete_table=} [properties] Properties to set
         */
        function notify_delete_table(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * notify_delete_table tableid.
         * @member {number} tableid
         * @memberof game.notify_delete_table
         * @instance
         */
        notify_delete_table.prototype.tableid = 0;

        /**
         * Creates a new notify_delete_table instance using the specified properties.
         * @function create
         * @memberof game.notify_delete_table
         * @static
         * @param {game.Inotify_delete_table=} [properties] Properties to set
         * @returns {game.notify_delete_table} notify_delete_table instance
         */
        notify_delete_table.create = function create(properties) {
            return new notify_delete_table(properties);
        };

        /**
         * Encodes the specified notify_delete_table message. Does not implicitly {@link game.notify_delete_table.verify|verify} messages.
         * @function encode
         * @memberof game.notify_delete_table
         * @static
         * @param {game.Inotify_delete_table} message notify_delete_table message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_delete_table.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tableid);
            return writer;
        };

        /**
         * Encodes the specified notify_delete_table message, length delimited. Does not implicitly {@link game.notify_delete_table.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.notify_delete_table
         * @static
         * @param {game.Inotify_delete_table} message notify_delete_table message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_delete_table.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a notify_delete_table message from the specified reader or buffer.
         * @function decode
         * @memberof game.notify_delete_table
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.notify_delete_table} notify_delete_table
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_delete_table.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.notify_delete_table();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tableid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("tableid"))
                throw $util.ProtocolError("missing required 'tableid'", { instance: message });
            return message;
        };

        /**
         * Decodes a notify_delete_table message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.notify_delete_table
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.notify_delete_table} notify_delete_table
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_delete_table.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a notify_delete_table message.
         * @function verify
         * @memberof game.notify_delete_table
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        notify_delete_table.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.tableid))
                return "tableid: integer expected";
            return null;
        };

        /**
         * Creates a notify_delete_table message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.notify_delete_table
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.notify_delete_table} notify_delete_table
         */
        notify_delete_table.fromObject = function fromObject(object) {
            if (object instanceof $root.game.notify_delete_table)
                return object;
            var message = new $root.game.notify_delete_table();
            if (object.tableid != null)
                message.tableid = object.tableid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a notify_delete_table message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.notify_delete_table
         * @static
         * @param {game.notify_delete_table} message notify_delete_table
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        notify_delete_table.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.tableid = 0;
            if (message.tableid != null && message.hasOwnProperty("tableid"))
                object.tableid = message.tableid;
            return object;
        };

        /**
         * Converts this notify_delete_table to JSON.
         * @function toJSON
         * @memberof game.notify_delete_table
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        notify_delete_table.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return notify_delete_table;
    })();

    game.request_init_game = (function() {

        /**
         * Properties of a request_init_game.
         * @memberof game
         * @interface Irequest_init_game
         */

        /**
         * Constructs a new request_init_game.
         * @memberof game
         * @classdesc Represents a request_init_game.
         * @implements Irequest_init_game
         * @constructor
         * @param {game.Irequest_init_game=} [properties] Properties to set
         */
        function request_init_game(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new request_init_game instance using the specified properties.
         * @function create
         * @memberof game.request_init_game
         * @static
         * @param {game.Irequest_init_game=} [properties] Properties to set
         * @returns {game.request_init_game} request_init_game instance
         */
        request_init_game.create = function create(properties) {
            return new request_init_game(properties);
        };

        /**
         * Encodes the specified request_init_game message. Does not implicitly {@link game.request_init_game.verify|verify} messages.
         * @function encode
         * @memberof game.request_init_game
         * @static
         * @param {game.Irequest_init_game} message request_init_game message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_init_game.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified request_init_game message, length delimited. Does not implicitly {@link game.request_init_game.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.request_init_game
         * @static
         * @param {game.Irequest_init_game} message request_init_game message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_init_game.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_init_game message from the specified reader or buffer.
         * @function decode
         * @memberof game.request_init_game
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.request_init_game} request_init_game
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_init_game.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.request_init_game();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a request_init_game message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.request_init_game
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.request_init_game} request_init_game
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_init_game.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_init_game message.
         * @function verify
         * @memberof game.request_init_game
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_init_game.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a request_init_game message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.request_init_game
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.request_init_game} request_init_game
         */
        request_init_game.fromObject = function fromObject(object) {
            if (object instanceof $root.game.request_init_game)
                return object;
            return new $root.game.request_init_game();
        };

        /**
         * Creates a plain object from a request_init_game message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.request_init_game
         * @static
         * @param {game.request_init_game} message request_init_game
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_init_game.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this request_init_game to JSON.
         * @function toJSON
         * @memberof game.request_init_game
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_init_game.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_init_game;
    })();

    game.request_userready = (function() {

        /**
         * Properties of a request_userready.
         * @memberof game
         * @interface Irequest_userready
         */

        /**
         * Constructs a new request_userready.
         * @memberof game
         * @classdesc Represents a request_userready.
         * @implements Irequest_userready
         * @constructor
         * @param {game.Irequest_userready=} [properties] Properties to set
         */
        function request_userready(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new request_userready instance using the specified properties.
         * @function create
         * @memberof game.request_userready
         * @static
         * @param {game.Irequest_userready=} [properties] Properties to set
         * @returns {game.request_userready} request_userready instance
         */
        request_userready.create = function create(properties) {
            return new request_userready(properties);
        };

        /**
         * Encodes the specified request_userready message. Does not implicitly {@link game.request_userready.verify|verify} messages.
         * @function encode
         * @memberof game.request_userready
         * @static
         * @param {game.Irequest_userready} message request_userready message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_userready.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified request_userready message, length delimited. Does not implicitly {@link game.request_userready.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.request_userready
         * @static
         * @param {game.Irequest_userready} message request_userready message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_userready.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_userready message from the specified reader or buffer.
         * @function decode
         * @memberof game.request_userready
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.request_userready} request_userready
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_userready.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.request_userready();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a request_userready message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.request_userready
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.request_userready} request_userready
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_userready.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_userready message.
         * @function verify
         * @memberof game.request_userready
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_userready.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a request_userready message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.request_userready
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.request_userready} request_userready
         */
        request_userready.fromObject = function fromObject(object) {
            if (object instanceof $root.game.request_userready)
                return object;
            return new $root.game.request_userready();
        };

        /**
         * Creates a plain object from a request_userready message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.request_userready
         * @static
         * @param {game.request_userready} message request_userready
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_userready.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this request_userready to JSON.
         * @function toJSON
         * @memberof game.request_userready
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_userready.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_userready;
    })();

    game.gamemsg = (function() {

        /**
         * Properties of a gamemsg.
         * @memberof game
         * @interface Igamemsg
         * @property {string} name gamemsg name
         * @property {Uint8Array} payload gamemsg payload
         */

        /**
         * Constructs a new gamemsg.
         * @memberof game
         * @classdesc Represents a gamemsg.
         * @implements Igamemsg
         * @constructor
         * @param {game.Igamemsg=} [properties] Properties to set
         */
        function gamemsg(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * gamemsg name.
         * @member {string} name
         * @memberof game.gamemsg
         * @instance
         */
        gamemsg.prototype.name = "";

        /**
         * gamemsg payload.
         * @member {Uint8Array} payload
         * @memberof game.gamemsg
         * @instance
         */
        gamemsg.prototype.payload = $util.newBuffer([]);

        /**
         * Creates a new gamemsg instance using the specified properties.
         * @function create
         * @memberof game.gamemsg
         * @static
         * @param {game.Igamemsg=} [properties] Properties to set
         * @returns {game.gamemsg} gamemsg instance
         */
        gamemsg.create = function create(properties) {
            return new gamemsg(properties);
        };

        /**
         * Encodes the specified gamemsg message. Does not implicitly {@link game.gamemsg.verify|verify} messages.
         * @function encode
         * @memberof game.gamemsg
         * @static
         * @param {game.Igamemsg} message gamemsg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        gamemsg.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.payload);
            return writer;
        };

        /**
         * Encodes the specified gamemsg message, length delimited. Does not implicitly {@link game.gamemsg.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.gamemsg
         * @static
         * @param {game.Igamemsg} message gamemsg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        gamemsg.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a gamemsg message from the specified reader or buffer.
         * @function decode
         * @memberof game.gamemsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.gamemsg} gamemsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        gamemsg.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.gamemsg();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.payload = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("name"))
                throw $util.ProtocolError("missing required 'name'", { instance: message });
            if (!message.hasOwnProperty("payload"))
                throw $util.ProtocolError("missing required 'payload'", { instance: message });
            return message;
        };

        /**
         * Decodes a gamemsg message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.gamemsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.gamemsg} gamemsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        gamemsg.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a gamemsg message.
         * @function verify
         * @memberof game.gamemsg
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        gamemsg.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isString(message.name))
                return "name: string expected";
            if (!(message.payload && typeof message.payload.length === "number" || $util.isString(message.payload)))
                return "payload: buffer expected";
            return null;
        };

        /**
         * Creates a gamemsg message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.gamemsg
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.gamemsg} gamemsg
         */
        gamemsg.fromObject = function fromObject(object) {
            if (object instanceof $root.game.gamemsg)
                return object;
            var message = new $root.game.gamemsg();
            if (object.name != null)
                message.name = String(object.name);
            if (object.payload != null)
                if (typeof object.payload === "string")
                    $util.base64.decode(object.payload, message.payload = $util.newBuffer($util.base64.length(object.payload)), 0);
                else if (object.payload.length)
                    message.payload = object.payload;
            return message;
        };

        /**
         * Creates a plain object from a gamemsg message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.gamemsg
         * @static
         * @param {game.gamemsg} message gamemsg
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        gamemsg.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.name = "";
                if (options.bytes === String)
                    object.payload = "";
                else {
                    object.payload = [];
                    if (options.bytes !== Array)
                        object.payload = $util.newBuffer(object.payload);
                }
            }
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.payload != null && message.hasOwnProperty("payload"))
                object.payload = options.bytes === String ? $util.base64.encode(message.payload, 0, message.payload.length) : options.bytes === Array ? Array.prototype.slice.call(message.payload) : message.payload;
            return object;
        };

        /**
         * Converts this gamemsg to JSON.
         * @function toJSON
         * @memberof game.gamemsg
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        gamemsg.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return gamemsg;
    })();

    game.notify_system_message = (function() {

        /**
         * Properties of a notify_system_message.
         * @memberof game
         * @interface Inotify_system_message
         * @property {number} type notify_system_message type
         * @property {string} text notify_system_message text
         */

        /**
         * Constructs a new notify_system_message.
         * @memberof game
         * @classdesc Represents a notify_system_message.
         * @implements Inotify_system_message
         * @constructor
         * @param {game.Inotify_system_message=} [properties] Properties to set
         */
        function notify_system_message(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * notify_system_message type.
         * @member {number} type
         * @memberof game.notify_system_message
         * @instance
         */
        notify_system_message.prototype.type = 0;

        /**
         * notify_system_message text.
         * @member {string} text
         * @memberof game.notify_system_message
         * @instance
         */
        notify_system_message.prototype.text = "";

        /**
         * Creates a new notify_system_message instance using the specified properties.
         * @function create
         * @memberof game.notify_system_message
         * @static
         * @param {game.Inotify_system_message=} [properties] Properties to set
         * @returns {game.notify_system_message} notify_system_message instance
         */
        notify_system_message.create = function create(properties) {
            return new notify_system_message(properties);
        };

        /**
         * Encodes the specified notify_system_message message. Does not implicitly {@link game.notify_system_message.verify|verify} messages.
         * @function encode
         * @memberof game.notify_system_message
         * @static
         * @param {game.Inotify_system_message} message notify_system_message message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_system_message.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.type);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
            return writer;
        };

        /**
         * Encodes the specified notify_system_message message, length delimited. Does not implicitly {@link game.notify_system_message.verify|verify} messages.
         * @function encodeDelimited
         * @memberof game.notify_system_message
         * @static
         * @param {game.Inotify_system_message} message notify_system_message message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_system_message.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a notify_system_message message from the specified reader or buffer.
         * @function decode
         * @memberof game.notify_system_message
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {game.notify_system_message} notify_system_message
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_system_message.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.game.notify_system_message();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.type = reader.uint32();
                    break;
                case 2:
                    message.text = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("type"))
                throw $util.ProtocolError("missing required 'type'", { instance: message });
            if (!message.hasOwnProperty("text"))
                throw $util.ProtocolError("missing required 'text'", { instance: message });
            return message;
        };

        /**
         * Decodes a notify_system_message message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof game.notify_system_message
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {game.notify_system_message} notify_system_message
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_system_message.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a notify_system_message message.
         * @function verify
         * @memberof game.notify_system_message
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        notify_system_message.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.type))
                return "type: integer expected";
            if (!$util.isString(message.text))
                return "text: string expected";
            return null;
        };

        /**
         * Creates a notify_system_message message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof game.notify_system_message
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {game.notify_system_message} notify_system_message
         */
        notify_system_message.fromObject = function fromObject(object) {
            if (object instanceof $root.game.notify_system_message)
                return object;
            var message = new $root.game.notify_system_message();
            if (object.type != null)
                message.type = object.type >>> 0;
            if (object.text != null)
                message.text = String(object.text);
            return message;
        };

        /**
         * Creates a plain object from a notify_system_message message. Also converts values to other types if specified.
         * @function toObject
         * @memberof game.notify_system_message
         * @static
         * @param {game.notify_system_message} message notify_system_message
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        notify_system_message.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.type = 0;
                object.text = "";
            }
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = message.text;
            return object;
        };

        /**
         * Converts this notify_system_message to JSON.
         * @function toJSON
         * @memberof game.notify_system_message
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        notify_system_message.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return notify_system_message;
    })();

    return game;
})();

$root.hall = (function() {

    /**
     * Namespace hall.
     * @exports hall
     * @namespace
     */
    var hall = {};

    hall.request_userinfo = (function() {

        /**
         * Properties of a request_userinfo.
         * @memberof hall
         * @interface Irequest_userinfo
         * @property {number} userid request_userinfo userid
         * @property {string} password request_userinfo password
         */

        /**
         * Constructs a new request_userinfo.
         * @memberof hall
         * @classdesc Represents a request_userinfo.
         * @implements Irequest_userinfo
         * @constructor
         * @param {hall.Irequest_userinfo=} [properties] Properties to set
         */
        function request_userinfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_userinfo userid.
         * @member {number} userid
         * @memberof hall.request_userinfo
         * @instance
         */
        request_userinfo.prototype.userid = 0;

        /**
         * request_userinfo password.
         * @member {string} password
         * @memberof hall.request_userinfo
         * @instance
         */
        request_userinfo.prototype.password = "";

        /**
         * Creates a new request_userinfo instance using the specified properties.
         * @function create
         * @memberof hall.request_userinfo
         * @static
         * @param {hall.Irequest_userinfo=} [properties] Properties to set
         * @returns {hall.request_userinfo} request_userinfo instance
         */
        request_userinfo.create = function create(properties) {
            return new request_userinfo(properties);
        };

        /**
         * Encodes the specified request_userinfo message. Does not implicitly {@link hall.request_userinfo.verify|verify} messages.
         * @function encode
         * @memberof hall.request_userinfo
         * @static
         * @param {hall.Irequest_userinfo} message request_userinfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_userinfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            return writer;
        };

        /**
         * Encodes the specified request_userinfo message, length delimited. Does not implicitly {@link hall.request_userinfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_userinfo
         * @static
         * @param {hall.Irequest_userinfo} message request_userinfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_userinfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_userinfo message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_userinfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_userinfo} request_userinfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_userinfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_userinfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_userinfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_userinfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_userinfo} request_userinfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_userinfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_userinfo message.
         * @function verify
         * @memberof hall.request_userinfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_userinfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            return null;
        };

        /**
         * Creates a request_userinfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_userinfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_userinfo} request_userinfo
         */
        request_userinfo.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_userinfo)
                return object;
            var message = new $root.hall.request_userinfo();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            return message;
        };

        /**
         * Creates a plain object from a request_userinfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_userinfo
         * @static
         * @param {hall.request_userinfo} message request_userinfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_userinfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            return object;
        };

        /**
         * Converts this request_userinfo to JSON.
         * @function toJSON
         * @memberof hall.request_userinfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_userinfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_userinfo;
    })();

    hall.club_info_item = (function() {

        /**
         * Properties of a club_info_item.
         * @memberof hall
         * @interface Iclub_info_item
         * @property {number} clubid club_info_item clubid
         * @property {string} club_name club_info_item club_name
         * @property {number} member_count club_info_item member_count
         * @property {number} identity club_info_item identity
         */

        /**
         * Constructs a new club_info_item.
         * @memberof hall
         * @classdesc Represents a club_info_item.
         * @implements Iclub_info_item
         * @constructor
         * @param {hall.Iclub_info_item=} [properties] Properties to set
         */
        function club_info_item(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * club_info_item clubid.
         * @member {number} clubid
         * @memberof hall.club_info_item
         * @instance
         */
        club_info_item.prototype.clubid = 0;

        /**
         * club_info_item club_name.
         * @member {string} club_name
         * @memberof hall.club_info_item
         * @instance
         */
        club_info_item.prototype.club_name = "";

        /**
         * club_info_item member_count.
         * @member {number} member_count
         * @memberof hall.club_info_item
         * @instance
         */
        club_info_item.prototype.member_count = 0;

        /**
         * club_info_item identity.
         * @member {number} identity
         * @memberof hall.club_info_item
         * @instance
         */
        club_info_item.prototype.identity = 0;

        /**
         * Creates a new club_info_item instance using the specified properties.
         * @function create
         * @memberof hall.club_info_item
         * @static
         * @param {hall.Iclub_info_item=} [properties] Properties to set
         * @returns {hall.club_info_item} club_info_item instance
         */
        club_info_item.create = function create(properties) {
            return new club_info_item(properties);
        };

        /**
         * Encodes the specified club_info_item message. Does not implicitly {@link hall.club_info_item.verify|verify} messages.
         * @function encode
         * @memberof hall.club_info_item
         * @static
         * @param {hall.Iclub_info_item} message club_info_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        club_info_item.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.clubid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.club_name);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.member_count);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.identity);
            return writer;
        };

        /**
         * Encodes the specified club_info_item message, length delimited. Does not implicitly {@link hall.club_info_item.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.club_info_item
         * @static
         * @param {hall.Iclub_info_item} message club_info_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        club_info_item.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a club_info_item message from the specified reader or buffer.
         * @function decode
         * @memberof hall.club_info_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.club_info_item} club_info_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        club_info_item.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.club_info_item();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.clubid = reader.uint32();
                    break;
                case 2:
                    message.club_name = reader.string();
                    break;
                case 3:
                    message.member_count = reader.uint32();
                    break;
                case 4:
                    message.identity = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("clubid"))
                throw $util.ProtocolError("missing required 'clubid'", { instance: message });
            if (!message.hasOwnProperty("club_name"))
                throw $util.ProtocolError("missing required 'club_name'", { instance: message });
            if (!message.hasOwnProperty("member_count"))
                throw $util.ProtocolError("missing required 'member_count'", { instance: message });
            if (!message.hasOwnProperty("identity"))
                throw $util.ProtocolError("missing required 'identity'", { instance: message });
            return message;
        };

        /**
         * Decodes a club_info_item message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.club_info_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.club_info_item} club_info_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        club_info_item.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a club_info_item message.
         * @function verify
         * @memberof hall.club_info_item
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        club_info_item.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.clubid))
                return "clubid: integer expected";
            if (!$util.isString(message.club_name))
                return "club_name: string expected";
            if (!$util.isInteger(message.member_count))
                return "member_count: integer expected";
            if (!$util.isInteger(message.identity))
                return "identity: integer expected";
            return null;
        };

        /**
         * Creates a club_info_item message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.club_info_item
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.club_info_item} club_info_item
         */
        club_info_item.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.club_info_item)
                return object;
            var message = new $root.hall.club_info_item();
            if (object.clubid != null)
                message.clubid = object.clubid >>> 0;
            if (object.club_name != null)
                message.club_name = String(object.club_name);
            if (object.member_count != null)
                message.member_count = object.member_count >>> 0;
            if (object.identity != null)
                message.identity = object.identity >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a club_info_item message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.club_info_item
         * @static
         * @param {hall.club_info_item} message club_info_item
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        club_info_item.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.clubid = 0;
                object.club_name = "";
                object.member_count = 0;
                object.identity = 0;
            }
            if (message.clubid != null && message.hasOwnProperty("clubid"))
                object.clubid = message.clubid;
            if (message.club_name != null && message.hasOwnProperty("club_name"))
                object.club_name = message.club_name;
            if (message.member_count != null && message.hasOwnProperty("member_count"))
                object.member_count = message.member_count;
            if (message.identity != null && message.hasOwnProperty("identity"))
                object.identity = message.identity;
            return object;
        };

        /**
         * Converts this club_info_item to JSON.
         * @function toJSON
         * @memberof hall.club_info_item
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        club_info_item.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return club_info_item;
    })();

    hall.response_userinfo = (function() {

        /**
         * Properties of a response_userinfo.
         * @memberof hall
         * @interface Iresponse_userinfo
         * @property {number} userid response_userinfo userid
         * @property {number} gameid response_userinfo gameid
         * @property {number} faceid response_userinfo faceid
         * @property {number} gender response_userinfo gender
         * @property {string} nickname response_userinfo nickname
         * @property {string} password response_userinfo password
         * @property {string} mobilephone response_userinfo mobilephone
         * @property {string} alipay_name response_userinfo alipay_name
         * @property {string} alipay_account response_userinfo alipay_account
         * @property {string} bankcard_id response_userinfo bankcard_id
         * @property {string} bankcard_name response_userinfo bankcard_name
         * @property {number} vip_level response_userinfo vip_level
         * @property {string} signature response_userinfo signature
         * @property {string} head_img_url response_userinfo head_img_url
         * @property {number|Long} score response_userinfo score
         * @property {number|Long} bank_score response_userinfo bank_score
         * @property {number|Long} recharge_score response_userinfo recharge_score
         * @property {Array.<hall.Iclub_info_item>|null} [club_info] response_userinfo club_info
         * @property {number} selected_clubid response_userinfo selected_clubid
         * @property {number} lock_kindid response_userinfo lock_kindid
         * @property {number} lock_roomid response_userinfo lock_roomid
         */

        /**
         * Constructs a new response_userinfo.
         * @memberof hall
         * @classdesc Represents a response_userinfo.
         * @implements Iresponse_userinfo
         * @constructor
         * @param {hall.Iresponse_userinfo=} [properties] Properties to set
         */
        function response_userinfo(properties) {
            this.club_info = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_userinfo userid.
         * @member {number} userid
         * @memberof hall.response_userinfo
         * @instance
         */
        response_userinfo.prototype.userid = 0;

        /**
         * response_userinfo gameid.
         * @member {number} gameid
         * @memberof hall.response_userinfo
         * @instance
         */
        response_userinfo.prototype.gameid = 0;

        /**
         * response_userinfo faceid.
         * @member {number} faceid
         * @memberof hall.response_userinfo
         * @instance
         */
        response_userinfo.prototype.faceid = 0;

        /**
         * response_userinfo gender.
         * @member {number} gender
         * @memberof hall.response_userinfo
         * @instance
         */
        response_userinfo.prototype.gender = 0;

        /**
         * response_userinfo nickname.
         * @member {string} nickname
         * @memberof hall.response_userinfo
         * @instance
         */
        response_userinfo.prototype.nickname = "";

        /**
         * response_userinfo password.
         * @member {string} password
         * @memberof hall.response_userinfo
         * @instance
         */
        response_userinfo.prototype.password = "";

        /**
         * response_userinfo mobilephone.
         * @member {string} mobilephone
         * @memberof hall.response_userinfo
         * @instance
         */
        response_userinfo.prototype.mobilephone = "";

        /**
         * response_userinfo alipay_name.
         * @member {string} alipay_name
         * @memberof hall.response_userinfo
         * @instance
         */
        response_userinfo.prototype.alipay_name = "";

        /**
         * response_userinfo alipay_account.
         * @member {string} alipay_account
         * @memberof hall.response_userinfo
         * @instance
         */
        response_userinfo.prototype.alipay_account = "";

        /**
         * response_userinfo bankcard_id.
         * @member {string} bankcard_id
         * @memberof hall.response_userinfo
         * @instance
         */
        response_userinfo.prototype.bankcard_id = "";

        /**
         * response_userinfo bankcard_name.
         * @member {string} bankcard_name
         * @memberof hall.response_userinfo
         * @instance
         */
        response_userinfo.prototype.bankcard_name = "";

        /**
         * response_userinfo vip_level.
         * @member {number} vip_level
         * @memberof hall.response_userinfo
         * @instance
         */
        response_userinfo.prototype.vip_level = 0;

        /**
         * response_userinfo signature.
         * @member {string} signature
         * @memberof hall.response_userinfo
         * @instance
         */
        response_userinfo.prototype.signature = "";

        /**
         * response_userinfo head_img_url.
         * @member {string} head_img_url
         * @memberof hall.response_userinfo
         * @instance
         */
        response_userinfo.prototype.head_img_url = "";

        /**
         * response_userinfo score.
         * @member {number|Long} score
         * @memberof hall.response_userinfo
         * @instance
         */
        response_userinfo.prototype.score = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * response_userinfo bank_score.
         * @member {number|Long} bank_score
         * @memberof hall.response_userinfo
         * @instance
         */
        response_userinfo.prototype.bank_score = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * response_userinfo recharge_score.
         * @member {number|Long} recharge_score
         * @memberof hall.response_userinfo
         * @instance
         */
        response_userinfo.prototype.recharge_score = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * response_userinfo club_info.
         * @member {Array.<hall.Iclub_info_item>} club_info
         * @memberof hall.response_userinfo
         * @instance
         */
        response_userinfo.prototype.club_info = $util.emptyArray;

        /**
         * response_userinfo selected_clubid.
         * @member {number} selected_clubid
         * @memberof hall.response_userinfo
         * @instance
         */
        response_userinfo.prototype.selected_clubid = 0;

        /**
         * response_userinfo lock_kindid.
         * @member {number} lock_kindid
         * @memberof hall.response_userinfo
         * @instance
         */
        response_userinfo.prototype.lock_kindid = 0;

        /**
         * response_userinfo lock_roomid.
         * @member {number} lock_roomid
         * @memberof hall.response_userinfo
         * @instance
         */
        response_userinfo.prototype.lock_roomid = 0;

        /**
         * Creates a new response_userinfo instance using the specified properties.
         * @function create
         * @memberof hall.response_userinfo
         * @static
         * @param {hall.Iresponse_userinfo=} [properties] Properties to set
         * @returns {hall.response_userinfo} response_userinfo instance
         */
        response_userinfo.create = function create(properties) {
            return new response_userinfo(properties);
        };

        /**
         * Encodes the specified response_userinfo message. Does not implicitly {@link hall.response_userinfo.verify|verify} messages.
         * @function encode
         * @memberof hall.response_userinfo
         * @static
         * @param {hall.Iresponse_userinfo} message response_userinfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_userinfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gameid);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.faceid);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.gender);
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.nickname);
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.password);
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.mobilephone);
            writer.uint32(/* id 8, wireType 2 =*/66).string(message.alipay_name);
            writer.uint32(/* id 9, wireType 2 =*/74).string(message.alipay_account);
            writer.uint32(/* id 10, wireType 2 =*/82).string(message.bankcard_id);
            writer.uint32(/* id 11, wireType 2 =*/90).string(message.bankcard_name);
            writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.vip_level);
            writer.uint32(/* id 13, wireType 2 =*/106).string(message.signature);
            writer.uint32(/* id 14, wireType 2 =*/114).string(message.head_img_url);
            writer.uint32(/* id 15, wireType 0 =*/120).sint64(message.score);
            writer.uint32(/* id 16, wireType 0 =*/128).sint64(message.bank_score);
            writer.uint32(/* id 17, wireType 0 =*/136).int64(message.recharge_score);
            if (message.club_info != null && message.club_info.length)
                for (var i = 0; i < message.club_info.length; ++i)
                    $root.hall.club_info_item.encode(message.club_info[i], writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
            writer.uint32(/* id 19, wireType 0 =*/152).uint32(message.selected_clubid);
            writer.uint32(/* id 20, wireType 0 =*/160).uint32(message.lock_kindid);
            writer.uint32(/* id 21, wireType 0 =*/168).uint32(message.lock_roomid);
            return writer;
        };

        /**
         * Encodes the specified response_userinfo message, length delimited. Does not implicitly {@link hall.response_userinfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_userinfo
         * @static
         * @param {hall.Iresponse_userinfo} message response_userinfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_userinfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_userinfo message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_userinfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_userinfo} response_userinfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_userinfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_userinfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.gameid = reader.uint32();
                    break;
                case 3:
                    message.faceid = reader.uint32();
                    break;
                case 4:
                    message.gender = reader.uint32();
                    break;
                case 5:
                    message.nickname = reader.string();
                    break;
                case 6:
                    message.password = reader.string();
                    break;
                case 7:
                    message.mobilephone = reader.string();
                    break;
                case 8:
                    message.alipay_name = reader.string();
                    break;
                case 9:
                    message.alipay_account = reader.string();
                    break;
                case 10:
                    message.bankcard_id = reader.string();
                    break;
                case 11:
                    message.bankcard_name = reader.string();
                    break;
                case 12:
                    message.vip_level = reader.uint32();
                    break;
                case 13:
                    message.signature = reader.string();
                    break;
                case 14:
                    message.head_img_url = reader.string();
                    break;
                case 15:
                    message.score = reader.sint64();
                    break;
                case 16:
                    message.bank_score = reader.sint64();
                    break;
                case 17:
                    message.recharge_score = reader.int64();
                    break;
                case 18:
                    if (!(message.club_info && message.club_info.length))
                        message.club_info = [];
                    message.club_info.push($root.hall.club_info_item.decode(reader, reader.uint32()));
                    break;
                case 19:
                    message.selected_clubid = reader.uint32();
                    break;
                case 20:
                    message.lock_kindid = reader.uint32();
                    break;
                case 21:
                    message.lock_roomid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("gameid"))
                throw $util.ProtocolError("missing required 'gameid'", { instance: message });
            if (!message.hasOwnProperty("faceid"))
                throw $util.ProtocolError("missing required 'faceid'", { instance: message });
            if (!message.hasOwnProperty("gender"))
                throw $util.ProtocolError("missing required 'gender'", { instance: message });
            if (!message.hasOwnProperty("nickname"))
                throw $util.ProtocolError("missing required 'nickname'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("mobilephone"))
                throw $util.ProtocolError("missing required 'mobilephone'", { instance: message });
            if (!message.hasOwnProperty("alipay_name"))
                throw $util.ProtocolError("missing required 'alipay_name'", { instance: message });
            if (!message.hasOwnProperty("alipay_account"))
                throw $util.ProtocolError("missing required 'alipay_account'", { instance: message });
            if (!message.hasOwnProperty("bankcard_id"))
                throw $util.ProtocolError("missing required 'bankcard_id'", { instance: message });
            if (!message.hasOwnProperty("bankcard_name"))
                throw $util.ProtocolError("missing required 'bankcard_name'", { instance: message });
            if (!message.hasOwnProperty("vip_level"))
                throw $util.ProtocolError("missing required 'vip_level'", { instance: message });
            if (!message.hasOwnProperty("signature"))
                throw $util.ProtocolError("missing required 'signature'", { instance: message });
            if (!message.hasOwnProperty("head_img_url"))
                throw $util.ProtocolError("missing required 'head_img_url'", { instance: message });
            if (!message.hasOwnProperty("score"))
                throw $util.ProtocolError("missing required 'score'", { instance: message });
            if (!message.hasOwnProperty("bank_score"))
                throw $util.ProtocolError("missing required 'bank_score'", { instance: message });
            if (!message.hasOwnProperty("recharge_score"))
                throw $util.ProtocolError("missing required 'recharge_score'", { instance: message });
            if (!message.hasOwnProperty("selected_clubid"))
                throw $util.ProtocolError("missing required 'selected_clubid'", { instance: message });
            if (!message.hasOwnProperty("lock_kindid"))
                throw $util.ProtocolError("missing required 'lock_kindid'", { instance: message });
            if (!message.hasOwnProperty("lock_roomid"))
                throw $util.ProtocolError("missing required 'lock_roomid'", { instance: message });
            return message;
        };

        /**
         * Decodes a response_userinfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_userinfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_userinfo} response_userinfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_userinfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_userinfo message.
         * @function verify
         * @memberof hall.response_userinfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_userinfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isInteger(message.gameid))
                return "gameid: integer expected";
            if (!$util.isInteger(message.faceid))
                return "faceid: integer expected";
            if (!$util.isInteger(message.gender))
                return "gender: integer expected";
            if (!$util.isString(message.nickname))
                return "nickname: string expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isString(message.mobilephone))
                return "mobilephone: string expected";
            if (!$util.isString(message.alipay_name))
                return "alipay_name: string expected";
            if (!$util.isString(message.alipay_account))
                return "alipay_account: string expected";
            if (!$util.isString(message.bankcard_id))
                return "bankcard_id: string expected";
            if (!$util.isString(message.bankcard_name))
                return "bankcard_name: string expected";
            if (!$util.isInteger(message.vip_level))
                return "vip_level: integer expected";
            if (!$util.isString(message.signature))
                return "signature: string expected";
            if (!$util.isString(message.head_img_url))
                return "head_img_url: string expected";
            if (!$util.isInteger(message.score) && !(message.score && $util.isInteger(message.score.low) && $util.isInteger(message.score.high)))
                return "score: integer|Long expected";
            if (!$util.isInteger(message.bank_score) && !(message.bank_score && $util.isInteger(message.bank_score.low) && $util.isInteger(message.bank_score.high)))
                return "bank_score: integer|Long expected";
            if (!$util.isInteger(message.recharge_score) && !(message.recharge_score && $util.isInteger(message.recharge_score.low) && $util.isInteger(message.recharge_score.high)))
                return "recharge_score: integer|Long expected";
            if (message.club_info != null && message.hasOwnProperty("club_info")) {
                if (!Array.isArray(message.club_info))
                    return "club_info: array expected";
                for (var i = 0; i < message.club_info.length; ++i) {
                    var error = $root.hall.club_info_item.verify(message.club_info[i]);
                    if (error)
                        return "club_info." + error;
                }
            }
            if (!$util.isInteger(message.selected_clubid))
                return "selected_clubid: integer expected";
            if (!$util.isInteger(message.lock_kindid))
                return "lock_kindid: integer expected";
            if (!$util.isInteger(message.lock_roomid))
                return "lock_roomid: integer expected";
            return null;
        };

        /**
         * Creates a response_userinfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_userinfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_userinfo} response_userinfo
         */
        response_userinfo.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_userinfo)
                return object;
            var message = new $root.hall.response_userinfo();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.gameid != null)
                message.gameid = object.gameid >>> 0;
            if (object.faceid != null)
                message.faceid = object.faceid >>> 0;
            if (object.gender != null)
                message.gender = object.gender >>> 0;
            if (object.nickname != null)
                message.nickname = String(object.nickname);
            if (object.password != null)
                message.password = String(object.password);
            if (object.mobilephone != null)
                message.mobilephone = String(object.mobilephone);
            if (object.alipay_name != null)
                message.alipay_name = String(object.alipay_name);
            if (object.alipay_account != null)
                message.alipay_account = String(object.alipay_account);
            if (object.bankcard_id != null)
                message.bankcard_id = String(object.bankcard_id);
            if (object.bankcard_name != null)
                message.bankcard_name = String(object.bankcard_name);
            if (object.vip_level != null)
                message.vip_level = object.vip_level >>> 0;
            if (object.signature != null)
                message.signature = String(object.signature);
            if (object.head_img_url != null)
                message.head_img_url = String(object.head_img_url);
            if (object.score != null)
                if ($util.Long)
                    (message.score = $util.Long.fromValue(object.score)).unsigned = false;
                else if (typeof object.score === "string")
                    message.score = parseInt(object.score, 10);
                else if (typeof object.score === "number")
                    message.score = object.score;
                else if (typeof object.score === "object")
                    message.score = new $util.LongBits(object.score.low >>> 0, object.score.high >>> 0).toNumber();
            if (object.bank_score != null)
                if ($util.Long)
                    (message.bank_score = $util.Long.fromValue(object.bank_score)).unsigned = false;
                else if (typeof object.bank_score === "string")
                    message.bank_score = parseInt(object.bank_score, 10);
                else if (typeof object.bank_score === "number")
                    message.bank_score = object.bank_score;
                else if (typeof object.bank_score === "object")
                    message.bank_score = new $util.LongBits(object.bank_score.low >>> 0, object.bank_score.high >>> 0).toNumber();
            if (object.recharge_score != null)
                if ($util.Long)
                    (message.recharge_score = $util.Long.fromValue(object.recharge_score)).unsigned = false;
                else if (typeof object.recharge_score === "string")
                    message.recharge_score = parseInt(object.recharge_score, 10);
                else if (typeof object.recharge_score === "number")
                    message.recharge_score = object.recharge_score;
                else if (typeof object.recharge_score === "object")
                    message.recharge_score = new $util.LongBits(object.recharge_score.low >>> 0, object.recharge_score.high >>> 0).toNumber();
            if (object.club_info) {
                if (!Array.isArray(object.club_info))
                    throw TypeError(".hall.response_userinfo.club_info: array expected");
                message.club_info = [];
                for (var i = 0; i < object.club_info.length; ++i) {
                    if (typeof object.club_info[i] !== "object")
                        throw TypeError(".hall.response_userinfo.club_info: object expected");
                    message.club_info[i] = $root.hall.club_info_item.fromObject(object.club_info[i]);
                }
            }
            if (object.selected_clubid != null)
                message.selected_clubid = object.selected_clubid >>> 0;
            if (object.lock_kindid != null)
                message.lock_kindid = object.lock_kindid >>> 0;
            if (object.lock_roomid != null)
                message.lock_roomid = object.lock_roomid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a response_userinfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_userinfo
         * @static
         * @param {hall.response_userinfo} message response_userinfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_userinfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.club_info = [];
            if (options.defaults) {
                object.userid = 0;
                object.gameid = 0;
                object.faceid = 0;
                object.gender = 0;
                object.nickname = "";
                object.password = "";
                object.mobilephone = "";
                object.alipay_name = "";
                object.alipay_account = "";
                object.bankcard_id = "";
                object.bankcard_name = "";
                object.vip_level = 0;
                object.signature = "";
                object.head_img_url = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.score = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.bank_score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.bank_score = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.recharge_score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.recharge_score = options.longs === String ? "0" : 0;
                object.selected_clubid = 0;
                object.lock_kindid = 0;
                object.lock_roomid = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.gameid != null && message.hasOwnProperty("gameid"))
                object.gameid = message.gameid;
            if (message.faceid != null && message.hasOwnProperty("faceid"))
                object.faceid = message.faceid;
            if (message.gender != null && message.hasOwnProperty("gender"))
                object.gender = message.gender;
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                object.nickname = message.nickname;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.mobilephone != null && message.hasOwnProperty("mobilephone"))
                object.mobilephone = message.mobilephone;
            if (message.alipay_name != null && message.hasOwnProperty("alipay_name"))
                object.alipay_name = message.alipay_name;
            if (message.alipay_account != null && message.hasOwnProperty("alipay_account"))
                object.alipay_account = message.alipay_account;
            if (message.bankcard_id != null && message.hasOwnProperty("bankcard_id"))
                object.bankcard_id = message.bankcard_id;
            if (message.bankcard_name != null && message.hasOwnProperty("bankcard_name"))
                object.bankcard_name = message.bankcard_name;
            if (message.vip_level != null && message.hasOwnProperty("vip_level"))
                object.vip_level = message.vip_level;
            if (message.signature != null && message.hasOwnProperty("signature"))
                object.signature = message.signature;
            if (message.head_img_url != null && message.hasOwnProperty("head_img_url"))
                object.head_img_url = message.head_img_url;
            if (message.score != null && message.hasOwnProperty("score"))
                if (typeof message.score === "number")
                    object.score = options.longs === String ? String(message.score) : message.score;
                else
                    object.score = options.longs === String ? $util.Long.prototype.toString.call(message.score) : options.longs === Number ? new $util.LongBits(message.score.low >>> 0, message.score.high >>> 0).toNumber() : message.score;
            if (message.bank_score != null && message.hasOwnProperty("bank_score"))
                if (typeof message.bank_score === "number")
                    object.bank_score = options.longs === String ? String(message.bank_score) : message.bank_score;
                else
                    object.bank_score = options.longs === String ? $util.Long.prototype.toString.call(message.bank_score) : options.longs === Number ? new $util.LongBits(message.bank_score.low >>> 0, message.bank_score.high >>> 0).toNumber() : message.bank_score;
            if (message.recharge_score != null && message.hasOwnProperty("recharge_score"))
                if (typeof message.recharge_score === "number")
                    object.recharge_score = options.longs === String ? String(message.recharge_score) : message.recharge_score;
                else
                    object.recharge_score = options.longs === String ? $util.Long.prototype.toString.call(message.recharge_score) : options.longs === Number ? new $util.LongBits(message.recharge_score.low >>> 0, message.recharge_score.high >>> 0).toNumber() : message.recharge_score;
            if (message.club_info && message.club_info.length) {
                object.club_info = [];
                for (var j = 0; j < message.club_info.length; ++j)
                    object.club_info[j] = $root.hall.club_info_item.toObject(message.club_info[j], options);
            }
            if (message.selected_clubid != null && message.hasOwnProperty("selected_clubid"))
                object.selected_clubid = message.selected_clubid;
            if (message.lock_kindid != null && message.hasOwnProperty("lock_kindid"))
                object.lock_kindid = message.lock_kindid;
            if (message.lock_roomid != null && message.hasOwnProperty("lock_roomid"))
                object.lock_roomid = message.lock_roomid;
            return object;
        };

        /**
         * Converts this response_userinfo to JSON.
         * @function toJSON
         * @memberof hall.response_userinfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_userinfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_userinfo;
    })();

    hall.response_userinfo_failed = (function() {

        /**
         * Properties of a response_userinfo_failed.
         * @memberof hall
         * @interface Iresponse_userinfo_failed
         * @property {string} reason response_userinfo_failed reason
         */

        /**
         * Constructs a new response_userinfo_failed.
         * @memberof hall
         * @classdesc Represents a response_userinfo_failed.
         * @implements Iresponse_userinfo_failed
         * @constructor
         * @param {hall.Iresponse_userinfo_failed=} [properties] Properties to set
         */
        function response_userinfo_failed(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_userinfo_failed reason.
         * @member {string} reason
         * @memberof hall.response_userinfo_failed
         * @instance
         */
        response_userinfo_failed.prototype.reason = "";

        /**
         * Creates a new response_userinfo_failed instance using the specified properties.
         * @function create
         * @memberof hall.response_userinfo_failed
         * @static
         * @param {hall.Iresponse_userinfo_failed=} [properties] Properties to set
         * @returns {hall.response_userinfo_failed} response_userinfo_failed instance
         */
        response_userinfo_failed.create = function create(properties) {
            return new response_userinfo_failed(properties);
        };

        /**
         * Encodes the specified response_userinfo_failed message. Does not implicitly {@link hall.response_userinfo_failed.verify|verify} messages.
         * @function encode
         * @memberof hall.response_userinfo_failed
         * @static
         * @param {hall.Iresponse_userinfo_failed} message response_userinfo_failed message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_userinfo_failed.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.reason);
            return writer;
        };

        /**
         * Encodes the specified response_userinfo_failed message, length delimited. Does not implicitly {@link hall.response_userinfo_failed.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_userinfo_failed
         * @static
         * @param {hall.Iresponse_userinfo_failed} message response_userinfo_failed message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_userinfo_failed.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_userinfo_failed message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_userinfo_failed
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_userinfo_failed} response_userinfo_failed
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_userinfo_failed.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_userinfo_failed();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.reason = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("reason"))
                throw $util.ProtocolError("missing required 'reason'", { instance: message });
            return message;
        };

        /**
         * Decodes a response_userinfo_failed message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_userinfo_failed
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_userinfo_failed} response_userinfo_failed
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_userinfo_failed.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_userinfo_failed message.
         * @function verify
         * @memberof hall.response_userinfo_failed
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_userinfo_failed.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isString(message.reason))
                return "reason: string expected";
            return null;
        };

        /**
         * Creates a response_userinfo_failed message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_userinfo_failed
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_userinfo_failed} response_userinfo_failed
         */
        response_userinfo_failed.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_userinfo_failed)
                return object;
            var message = new $root.hall.response_userinfo_failed();
            if (object.reason != null)
                message.reason = String(object.reason);
            return message;
        };

        /**
         * Creates a plain object from a response_userinfo_failed message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_userinfo_failed
         * @static
         * @param {hall.response_userinfo_failed} message response_userinfo_failed
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_userinfo_failed.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.reason = "";
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            return object;
        };

        /**
         * Converts this response_userinfo_failed to JSON.
         * @function toJSON
         * @memberof hall.response_userinfo_failed
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_userinfo_failed.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_userinfo_failed;
    })();

    hall.notify_update_userscore = (function() {

        /**
         * Properties of a notify_update_userscore.
         * @memberof hall
         * @interface Inotify_update_userscore
         * @property {number|Long} score notify_update_userscore score
         * @property {number|Long} bank_score notify_update_userscore bank_score
         */

        /**
         * Constructs a new notify_update_userscore.
         * @memberof hall
         * @classdesc Represents a notify_update_userscore.
         * @implements Inotify_update_userscore
         * @constructor
         * @param {hall.Inotify_update_userscore=} [properties] Properties to set
         */
        function notify_update_userscore(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * notify_update_userscore score.
         * @member {number|Long} score
         * @memberof hall.notify_update_userscore
         * @instance
         */
        notify_update_userscore.prototype.score = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * notify_update_userscore bank_score.
         * @member {number|Long} bank_score
         * @memberof hall.notify_update_userscore
         * @instance
         */
        notify_update_userscore.prototype.bank_score = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new notify_update_userscore instance using the specified properties.
         * @function create
         * @memberof hall.notify_update_userscore
         * @static
         * @param {hall.Inotify_update_userscore=} [properties] Properties to set
         * @returns {hall.notify_update_userscore} notify_update_userscore instance
         */
        notify_update_userscore.create = function create(properties) {
            return new notify_update_userscore(properties);
        };

        /**
         * Encodes the specified notify_update_userscore message. Does not implicitly {@link hall.notify_update_userscore.verify|verify} messages.
         * @function encode
         * @memberof hall.notify_update_userscore
         * @static
         * @param {hall.Inotify_update_userscore} message notify_update_userscore message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_update_userscore.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).sint64(message.score);
            writer.uint32(/* id 2, wireType 0 =*/16).sint64(message.bank_score);
            return writer;
        };

        /**
         * Encodes the specified notify_update_userscore message, length delimited. Does not implicitly {@link hall.notify_update_userscore.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.notify_update_userscore
         * @static
         * @param {hall.Inotify_update_userscore} message notify_update_userscore message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_update_userscore.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a notify_update_userscore message from the specified reader or buffer.
         * @function decode
         * @memberof hall.notify_update_userscore
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.notify_update_userscore} notify_update_userscore
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_update_userscore.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.notify_update_userscore();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.score = reader.sint64();
                    break;
                case 2:
                    message.bank_score = reader.sint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("score"))
                throw $util.ProtocolError("missing required 'score'", { instance: message });
            if (!message.hasOwnProperty("bank_score"))
                throw $util.ProtocolError("missing required 'bank_score'", { instance: message });
            return message;
        };

        /**
         * Decodes a notify_update_userscore message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.notify_update_userscore
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.notify_update_userscore} notify_update_userscore
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_update_userscore.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a notify_update_userscore message.
         * @function verify
         * @memberof hall.notify_update_userscore
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        notify_update_userscore.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.score) && !(message.score && $util.isInteger(message.score.low) && $util.isInteger(message.score.high)))
                return "score: integer|Long expected";
            if (!$util.isInteger(message.bank_score) && !(message.bank_score && $util.isInteger(message.bank_score.low) && $util.isInteger(message.bank_score.high)))
                return "bank_score: integer|Long expected";
            return null;
        };

        /**
         * Creates a notify_update_userscore message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.notify_update_userscore
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.notify_update_userscore} notify_update_userscore
         */
        notify_update_userscore.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.notify_update_userscore)
                return object;
            var message = new $root.hall.notify_update_userscore();
            if (object.score != null)
                if ($util.Long)
                    (message.score = $util.Long.fromValue(object.score)).unsigned = false;
                else if (typeof object.score === "string")
                    message.score = parseInt(object.score, 10);
                else if (typeof object.score === "number")
                    message.score = object.score;
                else if (typeof object.score === "object")
                    message.score = new $util.LongBits(object.score.low >>> 0, object.score.high >>> 0).toNumber();
            if (object.bank_score != null)
                if ($util.Long)
                    (message.bank_score = $util.Long.fromValue(object.bank_score)).unsigned = false;
                else if (typeof object.bank_score === "string")
                    message.bank_score = parseInt(object.bank_score, 10);
                else if (typeof object.bank_score === "number")
                    message.bank_score = object.bank_score;
                else if (typeof object.bank_score === "object")
                    message.bank_score = new $util.LongBits(object.bank_score.low >>> 0, object.bank_score.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a notify_update_userscore message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.notify_update_userscore
         * @static
         * @param {hall.notify_update_userscore} message notify_update_userscore
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        notify_update_userscore.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.score = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.bank_score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.bank_score = options.longs === String ? "0" : 0;
            }
            if (message.score != null && message.hasOwnProperty("score"))
                if (typeof message.score === "number")
                    object.score = options.longs === String ? String(message.score) : message.score;
                else
                    object.score = options.longs === String ? $util.Long.prototype.toString.call(message.score) : options.longs === Number ? new $util.LongBits(message.score.low >>> 0, message.score.high >>> 0).toNumber() : message.score;
            if (message.bank_score != null && message.hasOwnProperty("bank_score"))
                if (typeof message.bank_score === "number")
                    object.bank_score = options.longs === String ? String(message.bank_score) : message.bank_score;
                else
                    object.bank_score = options.longs === String ? $util.Long.prototype.toString.call(message.bank_score) : options.longs === Number ? new $util.LongBits(message.bank_score.low >>> 0, message.bank_score.high >>> 0).toNumber() : message.bank_score;
            return object;
        };

        /**
         * Converts this notify_update_userscore to JSON.
         * @function toJSON
         * @memberof hall.notify_update_userscore
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        notify_update_userscore.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return notify_update_userscore;
    })();

    hall.request_game_list = (function() {

        /**
         * Properties of a request_game_list.
         * @memberof hall
         * @interface Irequest_game_list
         */

        /**
         * Constructs a new request_game_list.
         * @memberof hall
         * @classdesc Represents a request_game_list.
         * @implements Irequest_game_list
         * @constructor
         * @param {hall.Irequest_game_list=} [properties] Properties to set
         */
        function request_game_list(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new request_game_list instance using the specified properties.
         * @function create
         * @memberof hall.request_game_list
         * @static
         * @param {hall.Irequest_game_list=} [properties] Properties to set
         * @returns {hall.request_game_list} request_game_list instance
         */
        request_game_list.create = function create(properties) {
            return new request_game_list(properties);
        };

        /**
         * Encodes the specified request_game_list message. Does not implicitly {@link hall.request_game_list.verify|verify} messages.
         * @function encode
         * @memberof hall.request_game_list
         * @static
         * @param {hall.Irequest_game_list} message request_game_list message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_game_list.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified request_game_list message, length delimited. Does not implicitly {@link hall.request_game_list.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_game_list
         * @static
         * @param {hall.Irequest_game_list} message request_game_list message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_game_list.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_game_list message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_game_list
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_game_list} request_game_list
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_game_list.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_game_list();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a request_game_list message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_game_list
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_game_list} request_game_list
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_game_list.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_game_list message.
         * @function verify
         * @memberof hall.request_game_list
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_game_list.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a request_game_list message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_game_list
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_game_list} request_game_list
         */
        request_game_list.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_game_list)
                return object;
            return new $root.hall.request_game_list();
        };

        /**
         * Creates a plain object from a request_game_list message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_game_list
         * @static
         * @param {hall.request_game_list} message request_game_list
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_game_list.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this request_game_list to JSON.
         * @function toJSON
         * @memberof hall.request_game_list
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_game_list.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_game_list;
    })();

    hall.game_type = (function() {

        /**
         * Properties of a game_type.
         * @memberof hall
         * @interface Igame_type
         * @property {number} sortid game_type sortid
         * @property {number} typeid game_type typeid
         * @property {string} type_name game_type type_name
         */

        /**
         * Constructs a new game_type.
         * @memberof hall
         * @classdesc Represents a game_type.
         * @implements Igame_type
         * @constructor
         * @param {hall.Igame_type=} [properties] Properties to set
         */
        function game_type(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * game_type sortid.
         * @member {number} sortid
         * @memberof hall.game_type
         * @instance
         */
        game_type.prototype.sortid = 0;

        /**
         * game_type typeid.
         * @member {number} typeid
         * @memberof hall.game_type
         * @instance
         */
        game_type.prototype.typeid = 0;

        /**
         * game_type type_name.
         * @member {string} type_name
         * @memberof hall.game_type
         * @instance
         */
        game_type.prototype.type_name = "";

        /**
         * Creates a new game_type instance using the specified properties.
         * @function create
         * @memberof hall.game_type
         * @static
         * @param {hall.Igame_type=} [properties] Properties to set
         * @returns {hall.game_type} game_type instance
         */
        game_type.create = function create(properties) {
            return new game_type(properties);
        };

        /**
         * Encodes the specified game_type message. Does not implicitly {@link hall.game_type.verify|verify} messages.
         * @function encode
         * @memberof hall.game_type
         * @static
         * @param {hall.Igame_type} message game_type message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        game_type.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.sortid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.typeid);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.type_name);
            return writer;
        };

        /**
         * Encodes the specified game_type message, length delimited. Does not implicitly {@link hall.game_type.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.game_type
         * @static
         * @param {hall.Igame_type} message game_type message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        game_type.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a game_type message from the specified reader or buffer.
         * @function decode
         * @memberof hall.game_type
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.game_type} game_type
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        game_type.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.game_type();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.sortid = reader.uint32();
                    break;
                case 2:
                    message.typeid = reader.uint32();
                    break;
                case 3:
                    message.type_name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("sortid"))
                throw $util.ProtocolError("missing required 'sortid'", { instance: message });
            if (!message.hasOwnProperty("typeid"))
                throw $util.ProtocolError("missing required 'typeid'", { instance: message });
            if (!message.hasOwnProperty("type_name"))
                throw $util.ProtocolError("missing required 'type_name'", { instance: message });
            return message;
        };

        /**
         * Decodes a game_type message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.game_type
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.game_type} game_type
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        game_type.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a game_type message.
         * @function verify
         * @memberof hall.game_type
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        game_type.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.sortid))
                return "sortid: integer expected";
            if (!$util.isInteger(message.typeid))
                return "typeid: integer expected";
            if (!$util.isString(message.type_name))
                return "type_name: string expected";
            return null;
        };

        /**
         * Creates a game_type message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.game_type
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.game_type} game_type
         */
        game_type.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.game_type)
                return object;
            var message = new $root.hall.game_type();
            if (object.sortid != null)
                message.sortid = object.sortid >>> 0;
            if (object.typeid != null)
                message.typeid = object.typeid >>> 0;
            if (object.type_name != null)
                message.type_name = String(object.type_name);
            return message;
        };

        /**
         * Creates a plain object from a game_type message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.game_type
         * @static
         * @param {hall.game_type} message game_type
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        game_type.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.sortid = 0;
                object.typeid = 0;
                object.type_name = "";
            }
            if (message.sortid != null && message.hasOwnProperty("sortid"))
                object.sortid = message.sortid;
            if (message.typeid != null && message.hasOwnProperty("typeid"))
                object.typeid = message.typeid;
            if (message.type_name != null && message.hasOwnProperty("type_name"))
                object.type_name = message.type_name;
            return object;
        };

        /**
         * Converts this game_type to JSON.
         * @function toJSON
         * @memberof hall.game_type
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        game_type.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return game_type;
    })();

    hall.response_game_type_list = (function() {

        /**
         * Properties of a response_game_type_list.
         * @memberof hall
         * @interface Iresponse_game_type_list
         * @property {Array.<hall.Igame_type>|null} [game_type_list] response_game_type_list game_type_list
         */

        /**
         * Constructs a new response_game_type_list.
         * @memberof hall
         * @classdesc Represents a response_game_type_list.
         * @implements Iresponse_game_type_list
         * @constructor
         * @param {hall.Iresponse_game_type_list=} [properties] Properties to set
         */
        function response_game_type_list(properties) {
            this.game_type_list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_game_type_list game_type_list.
         * @member {Array.<hall.Igame_type>} game_type_list
         * @memberof hall.response_game_type_list
         * @instance
         */
        response_game_type_list.prototype.game_type_list = $util.emptyArray;

        /**
         * Creates a new response_game_type_list instance using the specified properties.
         * @function create
         * @memberof hall.response_game_type_list
         * @static
         * @param {hall.Iresponse_game_type_list=} [properties] Properties to set
         * @returns {hall.response_game_type_list} response_game_type_list instance
         */
        response_game_type_list.create = function create(properties) {
            return new response_game_type_list(properties);
        };

        /**
         * Encodes the specified response_game_type_list message. Does not implicitly {@link hall.response_game_type_list.verify|verify} messages.
         * @function encode
         * @memberof hall.response_game_type_list
         * @static
         * @param {hall.Iresponse_game_type_list} message response_game_type_list message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_game_type_list.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.game_type_list != null && message.game_type_list.length)
                for (var i = 0; i < message.game_type_list.length; ++i)
                    $root.hall.game_type.encode(message.game_type_list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified response_game_type_list message, length delimited. Does not implicitly {@link hall.response_game_type_list.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_game_type_list
         * @static
         * @param {hall.Iresponse_game_type_list} message response_game_type_list message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_game_type_list.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_game_type_list message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_game_type_list
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_game_type_list} response_game_type_list
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_game_type_list.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_game_type_list();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.game_type_list && message.game_type_list.length))
                        message.game_type_list = [];
                    message.game_type_list.push($root.hall.game_type.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a response_game_type_list message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_game_type_list
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_game_type_list} response_game_type_list
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_game_type_list.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_game_type_list message.
         * @function verify
         * @memberof hall.response_game_type_list
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_game_type_list.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.game_type_list != null && message.hasOwnProperty("game_type_list")) {
                if (!Array.isArray(message.game_type_list))
                    return "game_type_list: array expected";
                for (var i = 0; i < message.game_type_list.length; ++i) {
                    var error = $root.hall.game_type.verify(message.game_type_list[i]);
                    if (error)
                        return "game_type_list." + error;
                }
            }
            return null;
        };

        /**
         * Creates a response_game_type_list message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_game_type_list
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_game_type_list} response_game_type_list
         */
        response_game_type_list.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_game_type_list)
                return object;
            var message = new $root.hall.response_game_type_list();
            if (object.game_type_list) {
                if (!Array.isArray(object.game_type_list))
                    throw TypeError(".hall.response_game_type_list.game_type_list: array expected");
                message.game_type_list = [];
                for (var i = 0; i < object.game_type_list.length; ++i) {
                    if (typeof object.game_type_list[i] !== "object")
                        throw TypeError(".hall.response_game_type_list.game_type_list: object expected");
                    message.game_type_list[i] = $root.hall.game_type.fromObject(object.game_type_list[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a response_game_type_list message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_game_type_list
         * @static
         * @param {hall.response_game_type_list} message response_game_type_list
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_game_type_list.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.game_type_list = [];
            if (message.game_type_list && message.game_type_list.length) {
                object.game_type_list = [];
                for (var j = 0; j < message.game_type_list.length; ++j)
                    object.game_type_list[j] = $root.hall.game_type.toObject(message.game_type_list[j], options);
            }
            return object;
        };

        /**
         * Converts this response_game_type_list to JSON.
         * @function toJSON
         * @memberof hall.response_game_type_list
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_game_type_list.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_game_type_list;
    })();

    hall.game_kind = (function() {

        /**
         * Properties of a game_kind.
         * @memberof hall
         * @interface Igame_kind
         * @property {number} typeid game_kind typeid
         * @property {number} sortid game_kind sortid
         * @property {number} kindid game_kind kindid
         * @property {string} kind_name game_kind kind_name
         */

        /**
         * Constructs a new game_kind.
         * @memberof hall
         * @classdesc Represents a game_kind.
         * @implements Igame_kind
         * @constructor
         * @param {hall.Igame_kind=} [properties] Properties to set
         */
        function game_kind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * game_kind typeid.
         * @member {number} typeid
         * @memberof hall.game_kind
         * @instance
         */
        game_kind.prototype.typeid = 0;

        /**
         * game_kind sortid.
         * @member {number} sortid
         * @memberof hall.game_kind
         * @instance
         */
        game_kind.prototype.sortid = 0;

        /**
         * game_kind kindid.
         * @member {number} kindid
         * @memberof hall.game_kind
         * @instance
         */
        game_kind.prototype.kindid = 0;

        /**
         * game_kind kind_name.
         * @member {string} kind_name
         * @memberof hall.game_kind
         * @instance
         */
        game_kind.prototype.kind_name = "";

        /**
         * Creates a new game_kind instance using the specified properties.
         * @function create
         * @memberof hall.game_kind
         * @static
         * @param {hall.Igame_kind=} [properties] Properties to set
         * @returns {hall.game_kind} game_kind instance
         */
        game_kind.create = function create(properties) {
            return new game_kind(properties);
        };

        /**
         * Encodes the specified game_kind message. Does not implicitly {@link hall.game_kind.verify|verify} messages.
         * @function encode
         * @memberof hall.game_kind
         * @static
         * @param {hall.Igame_kind} message game_kind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        game_kind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.typeid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.sortid);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.kindid);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.kind_name);
            return writer;
        };

        /**
         * Encodes the specified game_kind message, length delimited. Does not implicitly {@link hall.game_kind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.game_kind
         * @static
         * @param {hall.Igame_kind} message game_kind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        game_kind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a game_kind message from the specified reader or buffer.
         * @function decode
         * @memberof hall.game_kind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.game_kind} game_kind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        game_kind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.game_kind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.typeid = reader.uint32();
                    break;
                case 2:
                    message.sortid = reader.uint32();
                    break;
                case 3:
                    message.kindid = reader.uint32();
                    break;
                case 4:
                    message.kind_name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("typeid"))
                throw $util.ProtocolError("missing required 'typeid'", { instance: message });
            if (!message.hasOwnProperty("sortid"))
                throw $util.ProtocolError("missing required 'sortid'", { instance: message });
            if (!message.hasOwnProperty("kindid"))
                throw $util.ProtocolError("missing required 'kindid'", { instance: message });
            if (!message.hasOwnProperty("kind_name"))
                throw $util.ProtocolError("missing required 'kind_name'", { instance: message });
            return message;
        };

        /**
         * Decodes a game_kind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.game_kind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.game_kind} game_kind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        game_kind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a game_kind message.
         * @function verify
         * @memberof hall.game_kind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        game_kind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.typeid))
                return "typeid: integer expected";
            if (!$util.isInteger(message.sortid))
                return "sortid: integer expected";
            if (!$util.isInteger(message.kindid))
                return "kindid: integer expected";
            if (!$util.isString(message.kind_name))
                return "kind_name: string expected";
            return null;
        };

        /**
         * Creates a game_kind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.game_kind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.game_kind} game_kind
         */
        game_kind.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.game_kind)
                return object;
            var message = new $root.hall.game_kind();
            if (object.typeid != null)
                message.typeid = object.typeid >>> 0;
            if (object.sortid != null)
                message.sortid = object.sortid >>> 0;
            if (object.kindid != null)
                message.kindid = object.kindid >>> 0;
            if (object.kind_name != null)
                message.kind_name = String(object.kind_name);
            return message;
        };

        /**
         * Creates a plain object from a game_kind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.game_kind
         * @static
         * @param {hall.game_kind} message game_kind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        game_kind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.typeid = 0;
                object.sortid = 0;
                object.kindid = 0;
                object.kind_name = "";
            }
            if (message.typeid != null && message.hasOwnProperty("typeid"))
                object.typeid = message.typeid;
            if (message.sortid != null && message.hasOwnProperty("sortid"))
                object.sortid = message.sortid;
            if (message.kindid != null && message.hasOwnProperty("kindid"))
                object.kindid = message.kindid;
            if (message.kind_name != null && message.hasOwnProperty("kind_name"))
                object.kind_name = message.kind_name;
            return object;
        };

        /**
         * Converts this game_kind to JSON.
         * @function toJSON
         * @memberof hall.game_kind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        game_kind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return game_kind;
    })();

    hall.response_game_kind_list = (function() {

        /**
         * Properties of a response_game_kind_list.
         * @memberof hall
         * @interface Iresponse_game_kind_list
         * @property {Array.<hall.Igame_kind>|null} [game_kind_list] response_game_kind_list game_kind_list
         */

        /**
         * Constructs a new response_game_kind_list.
         * @memberof hall
         * @classdesc Represents a response_game_kind_list.
         * @implements Iresponse_game_kind_list
         * @constructor
         * @param {hall.Iresponse_game_kind_list=} [properties] Properties to set
         */
        function response_game_kind_list(properties) {
            this.game_kind_list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_game_kind_list game_kind_list.
         * @member {Array.<hall.Igame_kind>} game_kind_list
         * @memberof hall.response_game_kind_list
         * @instance
         */
        response_game_kind_list.prototype.game_kind_list = $util.emptyArray;

        /**
         * Creates a new response_game_kind_list instance using the specified properties.
         * @function create
         * @memberof hall.response_game_kind_list
         * @static
         * @param {hall.Iresponse_game_kind_list=} [properties] Properties to set
         * @returns {hall.response_game_kind_list} response_game_kind_list instance
         */
        response_game_kind_list.create = function create(properties) {
            return new response_game_kind_list(properties);
        };

        /**
         * Encodes the specified response_game_kind_list message. Does not implicitly {@link hall.response_game_kind_list.verify|verify} messages.
         * @function encode
         * @memberof hall.response_game_kind_list
         * @static
         * @param {hall.Iresponse_game_kind_list} message response_game_kind_list message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_game_kind_list.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.game_kind_list != null && message.game_kind_list.length)
                for (var i = 0; i < message.game_kind_list.length; ++i)
                    $root.hall.game_kind.encode(message.game_kind_list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified response_game_kind_list message, length delimited. Does not implicitly {@link hall.response_game_kind_list.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_game_kind_list
         * @static
         * @param {hall.Iresponse_game_kind_list} message response_game_kind_list message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_game_kind_list.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_game_kind_list message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_game_kind_list
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_game_kind_list} response_game_kind_list
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_game_kind_list.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_game_kind_list();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.game_kind_list && message.game_kind_list.length))
                        message.game_kind_list = [];
                    message.game_kind_list.push($root.hall.game_kind.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a response_game_kind_list message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_game_kind_list
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_game_kind_list} response_game_kind_list
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_game_kind_list.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_game_kind_list message.
         * @function verify
         * @memberof hall.response_game_kind_list
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_game_kind_list.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.game_kind_list != null && message.hasOwnProperty("game_kind_list")) {
                if (!Array.isArray(message.game_kind_list))
                    return "game_kind_list: array expected";
                for (var i = 0; i < message.game_kind_list.length; ++i) {
                    var error = $root.hall.game_kind.verify(message.game_kind_list[i]);
                    if (error)
                        return "game_kind_list." + error;
                }
            }
            return null;
        };

        /**
         * Creates a response_game_kind_list message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_game_kind_list
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_game_kind_list} response_game_kind_list
         */
        response_game_kind_list.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_game_kind_list)
                return object;
            var message = new $root.hall.response_game_kind_list();
            if (object.game_kind_list) {
                if (!Array.isArray(object.game_kind_list))
                    throw TypeError(".hall.response_game_kind_list.game_kind_list: array expected");
                message.game_kind_list = [];
                for (var i = 0; i < object.game_kind_list.length; ++i) {
                    if (typeof object.game_kind_list[i] !== "object")
                        throw TypeError(".hall.response_game_kind_list.game_kind_list: object expected");
                    message.game_kind_list[i] = $root.hall.game_kind.fromObject(object.game_kind_list[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a response_game_kind_list message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_game_kind_list
         * @static
         * @param {hall.response_game_kind_list} message response_game_kind_list
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_game_kind_list.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.game_kind_list = [];
            if (message.game_kind_list && message.game_kind_list.length) {
                object.game_kind_list = [];
                for (var j = 0; j < message.game_kind_list.length; ++j)
                    object.game_kind_list[j] = $root.hall.game_kind.toObject(message.game_kind_list[j], options);
            }
            return object;
        };

        /**
         * Converts this response_game_kind_list to JSON.
         * @function toJSON
         * @memberof hall.response_game_kind_list
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_game_kind_list.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_game_kind_list;
    })();

    hall.game_room = (function() {

        /**
         * Properties of a game_room.
         * @memberof hall
         * @interface Igame_room
         * @property {number} sessionid game_room sessionid
         * @property {number} kindid game_room kindid
         * @property {number} sortid game_room sortid
         * @property {number|Long} min_enter_score game_room min_enter_score
         * @property {string} room_name game_room room_name
         */

        /**
         * Constructs a new game_room.
         * @memberof hall
         * @classdesc Represents a game_room.
         * @implements Igame_room
         * @constructor
         * @param {hall.Igame_room=} [properties] Properties to set
         */
        function game_room(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * game_room sessionid.
         * @member {number} sessionid
         * @memberof hall.game_room
         * @instance
         */
        game_room.prototype.sessionid = 0;

        /**
         * game_room kindid.
         * @member {number} kindid
         * @memberof hall.game_room
         * @instance
         */
        game_room.prototype.kindid = 0;

        /**
         * game_room sortid.
         * @member {number} sortid
         * @memberof hall.game_room
         * @instance
         */
        game_room.prototype.sortid = 0;

        /**
         * game_room min_enter_score.
         * @member {number|Long} min_enter_score
         * @memberof hall.game_room
         * @instance
         */
        game_room.prototype.min_enter_score = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * game_room room_name.
         * @member {string} room_name
         * @memberof hall.game_room
         * @instance
         */
        game_room.prototype.room_name = "";

        /**
         * Creates a new game_room instance using the specified properties.
         * @function create
         * @memberof hall.game_room
         * @static
         * @param {hall.Igame_room=} [properties] Properties to set
         * @returns {hall.game_room} game_room instance
         */
        game_room.create = function create(properties) {
            return new game_room(properties);
        };

        /**
         * Encodes the specified game_room message. Does not implicitly {@link hall.game_room.verify|verify} messages.
         * @function encode
         * @memberof hall.game_room
         * @static
         * @param {hall.Igame_room} message game_room message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        game_room.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.sessionid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.kindid);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.sortid);
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.room_name);
            writer.uint32(/* id 46, wireType 0 =*/368).uint64(message.min_enter_score);
            return writer;
        };

        /**
         * Encodes the specified game_room message, length delimited. Does not implicitly {@link hall.game_room.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.game_room
         * @static
         * @param {hall.Igame_room} message game_room message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        game_room.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a game_room message from the specified reader or buffer.
         * @function decode
         * @memberof hall.game_room
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.game_room} game_room
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        game_room.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.game_room();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.sessionid = reader.uint32();
                    break;
                case 2:
                    message.kindid = reader.uint32();
                    break;
                case 3:
                    message.sortid = reader.uint32();
                    break;
                case 46:
                    message.min_enter_score = reader.uint64();
                    break;
                case 5:
                    message.room_name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("sessionid"))
                throw $util.ProtocolError("missing required 'sessionid'", { instance: message });
            if (!message.hasOwnProperty("kindid"))
                throw $util.ProtocolError("missing required 'kindid'", { instance: message });
            if (!message.hasOwnProperty("sortid"))
                throw $util.ProtocolError("missing required 'sortid'", { instance: message });
            if (!message.hasOwnProperty("min_enter_score"))
                throw $util.ProtocolError("missing required 'min_enter_score'", { instance: message });
            if (!message.hasOwnProperty("room_name"))
                throw $util.ProtocolError("missing required 'room_name'", { instance: message });
            return message;
        };

        /**
         * Decodes a game_room message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.game_room
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.game_room} game_room
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        game_room.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a game_room message.
         * @function verify
         * @memberof hall.game_room
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        game_room.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.sessionid))
                return "sessionid: integer expected";
            if (!$util.isInteger(message.kindid))
                return "kindid: integer expected";
            if (!$util.isInteger(message.sortid))
                return "sortid: integer expected";
            if (!$util.isInteger(message.min_enter_score) && !(message.min_enter_score && $util.isInteger(message.min_enter_score.low) && $util.isInteger(message.min_enter_score.high)))
                return "min_enter_score: integer|Long expected";
            if (!$util.isString(message.room_name))
                return "room_name: string expected";
            return null;
        };

        /**
         * Creates a game_room message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.game_room
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.game_room} game_room
         */
        game_room.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.game_room)
                return object;
            var message = new $root.hall.game_room();
            if (object.sessionid != null)
                message.sessionid = object.sessionid >>> 0;
            if (object.kindid != null)
                message.kindid = object.kindid >>> 0;
            if (object.sortid != null)
                message.sortid = object.sortid >>> 0;
            if (object.min_enter_score != null)
                if ($util.Long)
                    (message.min_enter_score = $util.Long.fromValue(object.min_enter_score)).unsigned = true;
                else if (typeof object.min_enter_score === "string")
                    message.min_enter_score = parseInt(object.min_enter_score, 10);
                else if (typeof object.min_enter_score === "number")
                    message.min_enter_score = object.min_enter_score;
                else if (typeof object.min_enter_score === "object")
                    message.min_enter_score = new $util.LongBits(object.min_enter_score.low >>> 0, object.min_enter_score.high >>> 0).toNumber(true);
            if (object.room_name != null)
                message.room_name = String(object.room_name);
            return message;
        };

        /**
         * Creates a plain object from a game_room message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.game_room
         * @static
         * @param {hall.game_room} message game_room
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        game_room.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.sessionid = 0;
                object.kindid = 0;
                object.sortid = 0;
                object.room_name = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.min_enter_score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.min_enter_score = options.longs === String ? "0" : 0;
            }
            if (message.sessionid != null && message.hasOwnProperty("sessionid"))
                object.sessionid = message.sessionid;
            if (message.kindid != null && message.hasOwnProperty("kindid"))
                object.kindid = message.kindid;
            if (message.sortid != null && message.hasOwnProperty("sortid"))
                object.sortid = message.sortid;
            if (message.room_name != null && message.hasOwnProperty("room_name"))
                object.room_name = message.room_name;
            if (message.min_enter_score != null && message.hasOwnProperty("min_enter_score"))
                if (typeof message.min_enter_score === "number")
                    object.min_enter_score = options.longs === String ? String(message.min_enter_score) : message.min_enter_score;
                else
                    object.min_enter_score = options.longs === String ? $util.Long.prototype.toString.call(message.min_enter_score) : options.longs === Number ? new $util.LongBits(message.min_enter_score.low >>> 0, message.min_enter_score.high >>> 0).toNumber(true) : message.min_enter_score;
            return object;
        };

        /**
         * Converts this game_room to JSON.
         * @function toJSON
         * @memberof hall.game_room
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        game_room.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return game_room;
    })();

    hall.response_game_room_list = (function() {

        /**
         * Properties of a response_game_room_list.
         * @memberof hall
         * @interface Iresponse_game_room_list
         * @property {Array.<hall.Igame_room>|null} [game_room_list] response_game_room_list game_room_list
         */

        /**
         * Constructs a new response_game_room_list.
         * @memberof hall
         * @classdesc Represents a response_game_room_list.
         * @implements Iresponse_game_room_list
         * @constructor
         * @param {hall.Iresponse_game_room_list=} [properties] Properties to set
         */
        function response_game_room_list(properties) {
            this.game_room_list = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_game_room_list game_room_list.
         * @member {Array.<hall.Igame_room>} game_room_list
         * @memberof hall.response_game_room_list
         * @instance
         */
        response_game_room_list.prototype.game_room_list = $util.emptyArray;

        /**
         * Creates a new response_game_room_list instance using the specified properties.
         * @function create
         * @memberof hall.response_game_room_list
         * @static
         * @param {hall.Iresponse_game_room_list=} [properties] Properties to set
         * @returns {hall.response_game_room_list} response_game_room_list instance
         */
        response_game_room_list.create = function create(properties) {
            return new response_game_room_list(properties);
        };

        /**
         * Encodes the specified response_game_room_list message. Does not implicitly {@link hall.response_game_room_list.verify|verify} messages.
         * @function encode
         * @memberof hall.response_game_room_list
         * @static
         * @param {hall.Iresponse_game_room_list} message response_game_room_list message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_game_room_list.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.game_room_list != null && message.game_room_list.length)
                for (var i = 0; i < message.game_room_list.length; ++i)
                    $root.hall.game_room.encode(message.game_room_list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified response_game_room_list message, length delimited. Does not implicitly {@link hall.response_game_room_list.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_game_room_list
         * @static
         * @param {hall.Iresponse_game_room_list} message response_game_room_list message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_game_room_list.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_game_room_list message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_game_room_list
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_game_room_list} response_game_room_list
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_game_room_list.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_game_room_list();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.game_room_list && message.game_room_list.length))
                        message.game_room_list = [];
                    message.game_room_list.push($root.hall.game_room.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a response_game_room_list message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_game_room_list
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_game_room_list} response_game_room_list
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_game_room_list.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_game_room_list message.
         * @function verify
         * @memberof hall.response_game_room_list
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_game_room_list.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.game_room_list != null && message.hasOwnProperty("game_room_list")) {
                if (!Array.isArray(message.game_room_list))
                    return "game_room_list: array expected";
                for (var i = 0; i < message.game_room_list.length; ++i) {
                    var error = $root.hall.game_room.verify(message.game_room_list[i]);
                    if (error)
                        return "game_room_list." + error;
                }
            }
            return null;
        };

        /**
         * Creates a response_game_room_list message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_game_room_list
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_game_room_list} response_game_room_list
         */
        response_game_room_list.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_game_room_list)
                return object;
            var message = new $root.hall.response_game_room_list();
            if (object.game_room_list) {
                if (!Array.isArray(object.game_room_list))
                    throw TypeError(".hall.response_game_room_list.game_room_list: array expected");
                message.game_room_list = [];
                for (var i = 0; i < object.game_room_list.length; ++i) {
                    if (typeof object.game_room_list[i] !== "object")
                        throw TypeError(".hall.response_game_room_list.game_room_list: object expected");
                    message.game_room_list[i] = $root.hall.game_room.fromObject(object.game_room_list[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a response_game_room_list message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_game_room_list
         * @static
         * @param {hall.response_game_room_list} message response_game_room_list
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_game_room_list.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.game_room_list = [];
            if (message.game_room_list && message.game_room_list.length) {
                object.game_room_list = [];
                for (var j = 0; j < message.game_room_list.length; ++j)
                    object.game_room_list[j] = $root.hall.game_room.toObject(message.game_room_list[j], options);
            }
            return object;
        };

        /**
         * Converts this response_game_room_list to JSON.
         * @function toJSON
         * @memberof hall.response_game_room_list
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_game_room_list.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_game_room_list;
    })();

    hall.request_bank_save_score = (function() {

        /**
         * Properties of a request_bank_save_score.
         * @memberof hall
         * @interface Irequest_bank_save_score
         * @property {number} userid request_bank_save_score userid
         * @property {string} password request_bank_save_score password
         * @property {number|Long} save_score request_bank_save_score save_score
         */

        /**
         * Constructs a new request_bank_save_score.
         * @memberof hall
         * @classdesc Represents a request_bank_save_score.
         * @implements Irequest_bank_save_score
         * @constructor
         * @param {hall.Irequest_bank_save_score=} [properties] Properties to set
         */
        function request_bank_save_score(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_bank_save_score userid.
         * @member {number} userid
         * @memberof hall.request_bank_save_score
         * @instance
         */
        request_bank_save_score.prototype.userid = 0;

        /**
         * request_bank_save_score password.
         * @member {string} password
         * @memberof hall.request_bank_save_score
         * @instance
         */
        request_bank_save_score.prototype.password = "";

        /**
         * request_bank_save_score save_score.
         * @member {number|Long} save_score
         * @memberof hall.request_bank_save_score
         * @instance
         */
        request_bank_save_score.prototype.save_score = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new request_bank_save_score instance using the specified properties.
         * @function create
         * @memberof hall.request_bank_save_score
         * @static
         * @param {hall.Irequest_bank_save_score=} [properties] Properties to set
         * @returns {hall.request_bank_save_score} request_bank_save_score instance
         */
        request_bank_save_score.create = function create(properties) {
            return new request_bank_save_score(properties);
        };

        /**
         * Encodes the specified request_bank_save_score message. Does not implicitly {@link hall.request_bank_save_score.verify|verify} messages.
         * @function encode
         * @memberof hall.request_bank_save_score
         * @static
         * @param {hall.Irequest_bank_save_score} message request_bank_save_score message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_bank_save_score.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.save_score);
            return writer;
        };

        /**
         * Encodes the specified request_bank_save_score message, length delimited. Does not implicitly {@link hall.request_bank_save_score.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_bank_save_score
         * @static
         * @param {hall.Irequest_bank_save_score} message request_bank_save_score message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_bank_save_score.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_bank_save_score message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_bank_save_score
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_bank_save_score} request_bank_save_score
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_bank_save_score.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_bank_save_score();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.save_score = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("save_score"))
                throw $util.ProtocolError("missing required 'save_score'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_bank_save_score message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_bank_save_score
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_bank_save_score} request_bank_save_score
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_bank_save_score.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_bank_save_score message.
         * @function verify
         * @memberof hall.request_bank_save_score
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_bank_save_score.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isInteger(message.save_score) && !(message.save_score && $util.isInteger(message.save_score.low) && $util.isInteger(message.save_score.high)))
                return "save_score: integer|Long expected";
            return null;
        };

        /**
         * Creates a request_bank_save_score message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_bank_save_score
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_bank_save_score} request_bank_save_score
         */
        request_bank_save_score.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_bank_save_score)
                return object;
            var message = new $root.hall.request_bank_save_score();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.save_score != null)
                if ($util.Long)
                    (message.save_score = $util.Long.fromValue(object.save_score)).unsigned = true;
                else if (typeof object.save_score === "string")
                    message.save_score = parseInt(object.save_score, 10);
                else if (typeof object.save_score === "number")
                    message.save_score = object.save_score;
                else if (typeof object.save_score === "object")
                    message.save_score = new $util.LongBits(object.save_score.low >>> 0, object.save_score.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a request_bank_save_score message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_bank_save_score
         * @static
         * @param {hall.request_bank_save_score} message request_bank_save_score
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_bank_save_score.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.save_score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.save_score = options.longs === String ? "0" : 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.save_score != null && message.hasOwnProperty("save_score"))
                if (typeof message.save_score === "number")
                    object.save_score = options.longs === String ? String(message.save_score) : message.save_score;
                else
                    object.save_score = options.longs === String ? $util.Long.prototype.toString.call(message.save_score) : options.longs === Number ? new $util.LongBits(message.save_score.low >>> 0, message.save_score.high >>> 0).toNumber(true) : message.save_score;
            return object;
        };

        /**
         * Converts this request_bank_save_score to JSON.
         * @function toJSON
         * @memberof hall.request_bank_save_score
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_bank_save_score.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_bank_save_score;
    })();

    hall.request_bank_get_score = (function() {

        /**
         * Properties of a request_bank_get_score.
         * @memberof hall
         * @interface Irequest_bank_get_score
         * @property {number} userid request_bank_get_score userid
         * @property {string} password request_bank_get_score password
         * @property {number|Long} get_score request_bank_get_score get_score
         */

        /**
         * Constructs a new request_bank_get_score.
         * @memberof hall
         * @classdesc Represents a request_bank_get_score.
         * @implements Irequest_bank_get_score
         * @constructor
         * @param {hall.Irequest_bank_get_score=} [properties] Properties to set
         */
        function request_bank_get_score(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_bank_get_score userid.
         * @member {number} userid
         * @memberof hall.request_bank_get_score
         * @instance
         */
        request_bank_get_score.prototype.userid = 0;

        /**
         * request_bank_get_score password.
         * @member {string} password
         * @memberof hall.request_bank_get_score
         * @instance
         */
        request_bank_get_score.prototype.password = "";

        /**
         * request_bank_get_score get_score.
         * @member {number|Long} get_score
         * @memberof hall.request_bank_get_score
         * @instance
         */
        request_bank_get_score.prototype.get_score = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new request_bank_get_score instance using the specified properties.
         * @function create
         * @memberof hall.request_bank_get_score
         * @static
         * @param {hall.Irequest_bank_get_score=} [properties] Properties to set
         * @returns {hall.request_bank_get_score} request_bank_get_score instance
         */
        request_bank_get_score.create = function create(properties) {
            return new request_bank_get_score(properties);
        };

        /**
         * Encodes the specified request_bank_get_score message. Does not implicitly {@link hall.request_bank_get_score.verify|verify} messages.
         * @function encode
         * @memberof hall.request_bank_get_score
         * @static
         * @param {hall.Irequest_bank_get_score} message request_bank_get_score message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_bank_get_score.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.get_score);
            return writer;
        };

        /**
         * Encodes the specified request_bank_get_score message, length delimited. Does not implicitly {@link hall.request_bank_get_score.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_bank_get_score
         * @static
         * @param {hall.Irequest_bank_get_score} message request_bank_get_score message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_bank_get_score.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_bank_get_score message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_bank_get_score
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_bank_get_score} request_bank_get_score
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_bank_get_score.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_bank_get_score();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.get_score = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("get_score"))
                throw $util.ProtocolError("missing required 'get_score'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_bank_get_score message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_bank_get_score
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_bank_get_score} request_bank_get_score
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_bank_get_score.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_bank_get_score message.
         * @function verify
         * @memberof hall.request_bank_get_score
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_bank_get_score.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isInteger(message.get_score) && !(message.get_score && $util.isInteger(message.get_score.low) && $util.isInteger(message.get_score.high)))
                return "get_score: integer|Long expected";
            return null;
        };

        /**
         * Creates a request_bank_get_score message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_bank_get_score
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_bank_get_score} request_bank_get_score
         */
        request_bank_get_score.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_bank_get_score)
                return object;
            var message = new $root.hall.request_bank_get_score();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.get_score != null)
                if ($util.Long)
                    (message.get_score = $util.Long.fromValue(object.get_score)).unsigned = true;
                else if (typeof object.get_score === "string")
                    message.get_score = parseInt(object.get_score, 10);
                else if (typeof object.get_score === "number")
                    message.get_score = object.get_score;
                else if (typeof object.get_score === "object")
                    message.get_score = new $util.LongBits(object.get_score.low >>> 0, object.get_score.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a request_bank_get_score message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_bank_get_score
         * @static
         * @param {hall.request_bank_get_score} message request_bank_get_score
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_bank_get_score.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.get_score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.get_score = options.longs === String ? "0" : 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.get_score != null && message.hasOwnProperty("get_score"))
                if (typeof message.get_score === "number")
                    object.get_score = options.longs === String ? String(message.get_score) : message.get_score;
                else
                    object.get_score = options.longs === String ? $util.Long.prototype.toString.call(message.get_score) : options.longs === Number ? new $util.LongBits(message.get_score.low >>> 0, message.get_score.high >>> 0).toNumber(true) : message.get_score;
            return object;
        };

        /**
         * Converts this request_bank_get_score to JSON.
         * @function toJSON
         * @memberof hall.request_bank_get_score
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_bank_get_score.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_bank_get_score;
    })();

    hall.reponse_bank_result = (function() {

        /**
         * Properties of a reponse_bank_result.
         * @memberof hall
         * @interface Ireponse_bank_result
         * @property {number} result_code reponse_bank_result result_code
         * @property {number|Long} user_score reponse_bank_result user_score
         * @property {number|Long} bank_score reponse_bank_result bank_score
         * @property {string|null} [reason] reponse_bank_result reason
         */

        /**
         * Constructs a new reponse_bank_result.
         * @memberof hall
         * @classdesc Represents a reponse_bank_result.
         * @implements Ireponse_bank_result
         * @constructor
         * @param {hall.Ireponse_bank_result=} [properties] Properties to set
         */
        function reponse_bank_result(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * reponse_bank_result result_code.
         * @member {number} result_code
         * @memberof hall.reponse_bank_result
         * @instance
         */
        reponse_bank_result.prototype.result_code = 0;

        /**
         * reponse_bank_result user_score.
         * @member {number|Long} user_score
         * @memberof hall.reponse_bank_result
         * @instance
         */
        reponse_bank_result.prototype.user_score = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * reponse_bank_result bank_score.
         * @member {number|Long} bank_score
         * @memberof hall.reponse_bank_result
         * @instance
         */
        reponse_bank_result.prototype.bank_score = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * reponse_bank_result reason.
         * @member {string} reason
         * @memberof hall.reponse_bank_result
         * @instance
         */
        reponse_bank_result.prototype.reason = "";

        /**
         * Creates a new reponse_bank_result instance using the specified properties.
         * @function create
         * @memberof hall.reponse_bank_result
         * @static
         * @param {hall.Ireponse_bank_result=} [properties] Properties to set
         * @returns {hall.reponse_bank_result} reponse_bank_result instance
         */
        reponse_bank_result.create = function create(properties) {
            return new reponse_bank_result(properties);
        };

        /**
         * Encodes the specified reponse_bank_result message. Does not implicitly {@link hall.reponse_bank_result.verify|verify} messages.
         * @function encode
         * @memberof hall.reponse_bank_result
         * @static
         * @param {hall.Ireponse_bank_result} message reponse_bank_result message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        reponse_bank_result.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.result_code);
            writer.uint32(/* id 2, wireType 0 =*/16).sint64(message.user_score);
            writer.uint32(/* id 3, wireType 0 =*/24).sint64(message.bank_score);
            if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.reason);
            return writer;
        };

        /**
         * Encodes the specified reponse_bank_result message, length delimited. Does not implicitly {@link hall.reponse_bank_result.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.reponse_bank_result
         * @static
         * @param {hall.Ireponse_bank_result} message reponse_bank_result message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        reponse_bank_result.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a reponse_bank_result message from the specified reader or buffer.
         * @function decode
         * @memberof hall.reponse_bank_result
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.reponse_bank_result} reponse_bank_result
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        reponse_bank_result.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.reponse_bank_result();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.result_code = reader.uint32();
                    break;
                case 2:
                    message.user_score = reader.sint64();
                    break;
                case 3:
                    message.bank_score = reader.sint64();
                    break;
                case 4:
                    message.reason = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("result_code"))
                throw $util.ProtocolError("missing required 'result_code'", { instance: message });
            if (!message.hasOwnProperty("user_score"))
                throw $util.ProtocolError("missing required 'user_score'", { instance: message });
            if (!message.hasOwnProperty("bank_score"))
                throw $util.ProtocolError("missing required 'bank_score'", { instance: message });
            return message;
        };

        /**
         * Decodes a reponse_bank_result message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.reponse_bank_result
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.reponse_bank_result} reponse_bank_result
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        reponse_bank_result.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a reponse_bank_result message.
         * @function verify
         * @memberof hall.reponse_bank_result
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        reponse_bank_result.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.result_code))
                return "result_code: integer expected";
            if (!$util.isInteger(message.user_score) && !(message.user_score && $util.isInteger(message.user_score.low) && $util.isInteger(message.user_score.high)))
                return "user_score: integer|Long expected";
            if (!$util.isInteger(message.bank_score) && !(message.bank_score && $util.isInteger(message.bank_score.low) && $util.isInteger(message.bank_score.high)))
                return "bank_score: integer|Long expected";
            if (message.reason != null && message.hasOwnProperty("reason"))
                if (!$util.isString(message.reason))
                    return "reason: string expected";
            return null;
        };

        /**
         * Creates a reponse_bank_result message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.reponse_bank_result
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.reponse_bank_result} reponse_bank_result
         */
        reponse_bank_result.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.reponse_bank_result)
                return object;
            var message = new $root.hall.reponse_bank_result();
            if (object.result_code != null)
                message.result_code = object.result_code >>> 0;
            if (object.user_score != null)
                if ($util.Long)
                    (message.user_score = $util.Long.fromValue(object.user_score)).unsigned = false;
                else if (typeof object.user_score === "string")
                    message.user_score = parseInt(object.user_score, 10);
                else if (typeof object.user_score === "number")
                    message.user_score = object.user_score;
                else if (typeof object.user_score === "object")
                    message.user_score = new $util.LongBits(object.user_score.low >>> 0, object.user_score.high >>> 0).toNumber();
            if (object.bank_score != null)
                if ($util.Long)
                    (message.bank_score = $util.Long.fromValue(object.bank_score)).unsigned = false;
                else if (typeof object.bank_score === "string")
                    message.bank_score = parseInt(object.bank_score, 10);
                else if (typeof object.bank_score === "number")
                    message.bank_score = object.bank_score;
                else if (typeof object.bank_score === "object")
                    message.bank_score = new $util.LongBits(object.bank_score.low >>> 0, object.bank_score.high >>> 0).toNumber();
            if (object.reason != null)
                message.reason = String(object.reason);
            return message;
        };

        /**
         * Creates a plain object from a reponse_bank_result message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.reponse_bank_result
         * @static
         * @param {hall.reponse_bank_result} message reponse_bank_result
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        reponse_bank_result.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result_code = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.user_score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.user_score = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.bank_score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.bank_score = options.longs === String ? "0" : 0;
                object.reason = "";
            }
            if (message.result_code != null && message.hasOwnProperty("result_code"))
                object.result_code = message.result_code;
            if (message.user_score != null && message.hasOwnProperty("user_score"))
                if (typeof message.user_score === "number")
                    object.user_score = options.longs === String ? String(message.user_score) : message.user_score;
                else
                    object.user_score = options.longs === String ? $util.Long.prototype.toString.call(message.user_score) : options.longs === Number ? new $util.LongBits(message.user_score.low >>> 0, message.user_score.high >>> 0).toNumber() : message.user_score;
            if (message.bank_score != null && message.hasOwnProperty("bank_score"))
                if (typeof message.bank_score === "number")
                    object.bank_score = options.longs === String ? String(message.bank_score) : message.bank_score;
                else
                    object.bank_score = options.longs === String ? $util.Long.prototype.toString.call(message.bank_score) : options.longs === Number ? new $util.LongBits(message.bank_score.low >>> 0, message.bank_score.high >>> 0).toNumber() : message.bank_score;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            return object;
        };

        /**
         * Converts this reponse_bank_result to JSON.
         * @function toJSON
         * @memberof hall.reponse_bank_result
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        reponse_bank_result.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return reponse_bank_result;
    })();

    hall.request_log_change_score = (function() {

        /**
         * Properties of a request_log_change_score.
         * @memberof hall
         * @interface Irequest_log_change_score
         * @property {number} userid request_log_change_score userid
         * @property {string} password request_log_change_score password
         * @property {number} day request_log_change_score day
         */

        /**
         * Constructs a new request_log_change_score.
         * @memberof hall
         * @classdesc Represents a request_log_change_score.
         * @implements Irequest_log_change_score
         * @constructor
         * @param {hall.Irequest_log_change_score=} [properties] Properties to set
         */
        function request_log_change_score(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_log_change_score userid.
         * @member {number} userid
         * @memberof hall.request_log_change_score
         * @instance
         */
        request_log_change_score.prototype.userid = 0;

        /**
         * request_log_change_score password.
         * @member {string} password
         * @memberof hall.request_log_change_score
         * @instance
         */
        request_log_change_score.prototype.password = "";

        /**
         * request_log_change_score day.
         * @member {number} day
         * @memberof hall.request_log_change_score
         * @instance
         */
        request_log_change_score.prototype.day = 0;

        /**
         * Creates a new request_log_change_score instance using the specified properties.
         * @function create
         * @memberof hall.request_log_change_score
         * @static
         * @param {hall.Irequest_log_change_score=} [properties] Properties to set
         * @returns {hall.request_log_change_score} request_log_change_score instance
         */
        request_log_change_score.create = function create(properties) {
            return new request_log_change_score(properties);
        };

        /**
         * Encodes the specified request_log_change_score message. Does not implicitly {@link hall.request_log_change_score.verify|verify} messages.
         * @function encode
         * @memberof hall.request_log_change_score
         * @static
         * @param {hall.Irequest_log_change_score} message request_log_change_score message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_log_change_score.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.day);
            return writer;
        };

        /**
         * Encodes the specified request_log_change_score message, length delimited. Does not implicitly {@link hall.request_log_change_score.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_log_change_score
         * @static
         * @param {hall.Irequest_log_change_score} message request_log_change_score message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_log_change_score.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_log_change_score message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_log_change_score
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_log_change_score} request_log_change_score
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_log_change_score.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_log_change_score();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.day = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("day"))
                throw $util.ProtocolError("missing required 'day'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_log_change_score message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_log_change_score
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_log_change_score} request_log_change_score
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_log_change_score.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_log_change_score message.
         * @function verify
         * @memberof hall.request_log_change_score
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_log_change_score.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isInteger(message.day))
                return "day: integer expected";
            return null;
        };

        /**
         * Creates a request_log_change_score message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_log_change_score
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_log_change_score} request_log_change_score
         */
        request_log_change_score.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_log_change_score)
                return object;
            var message = new $root.hall.request_log_change_score();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.day != null)
                message.day = object.day >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a request_log_change_score message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_log_change_score
         * @static
         * @param {hall.request_log_change_score} message request_log_change_score
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_log_change_score.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.day = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.day != null && message.hasOwnProperty("day"))
                object.day = message.day;
            return object;
        };

        /**
         * Converts this request_log_change_score to JSON.
         * @function toJSON
         * @memberof hall.request_log_change_score
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_log_change_score.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_log_change_score;
    })();

    hall.log_change_score_item = (function() {

        /**
         * Properties of a log_change_score_item.
         * @memberof hall
         * @interface Ilog_change_score_item
         * @property {number|Long} source_score log_change_score_item source_score
         * @property {number|Long} change_score log_change_score_item change_score
         * @property {number} id log_change_score_item id
         * @property {number} change_type log_change_score_item change_type
         * @property {string} change_reason log_change_score_item change_reason
         * @property {string} change_origin log_change_score_item change_origin
         * @property {string} change_date log_change_score_item change_date
         */

        /**
         * Constructs a new log_change_score_item.
         * @memberof hall
         * @classdesc Represents a log_change_score_item.
         * @implements Ilog_change_score_item
         * @constructor
         * @param {hall.Ilog_change_score_item=} [properties] Properties to set
         */
        function log_change_score_item(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * log_change_score_item source_score.
         * @member {number|Long} source_score
         * @memberof hall.log_change_score_item
         * @instance
         */
        log_change_score_item.prototype.source_score = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * log_change_score_item change_score.
         * @member {number|Long} change_score
         * @memberof hall.log_change_score_item
         * @instance
         */
        log_change_score_item.prototype.change_score = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * log_change_score_item id.
         * @member {number} id
         * @memberof hall.log_change_score_item
         * @instance
         */
        log_change_score_item.prototype.id = 0;

        /**
         * log_change_score_item change_type.
         * @member {number} change_type
         * @memberof hall.log_change_score_item
         * @instance
         */
        log_change_score_item.prototype.change_type = 0;

        /**
         * log_change_score_item change_reason.
         * @member {string} change_reason
         * @memberof hall.log_change_score_item
         * @instance
         */
        log_change_score_item.prototype.change_reason = "";

        /**
         * log_change_score_item change_origin.
         * @member {string} change_origin
         * @memberof hall.log_change_score_item
         * @instance
         */
        log_change_score_item.prototype.change_origin = "";

        /**
         * log_change_score_item change_date.
         * @member {string} change_date
         * @memberof hall.log_change_score_item
         * @instance
         */
        log_change_score_item.prototype.change_date = "";

        /**
         * Creates a new log_change_score_item instance using the specified properties.
         * @function create
         * @memberof hall.log_change_score_item
         * @static
         * @param {hall.Ilog_change_score_item=} [properties] Properties to set
         * @returns {hall.log_change_score_item} log_change_score_item instance
         */
        log_change_score_item.create = function create(properties) {
            return new log_change_score_item(properties);
        };

        /**
         * Encodes the specified log_change_score_item message. Does not implicitly {@link hall.log_change_score_item.verify|verify} messages.
         * @function encode
         * @memberof hall.log_change_score_item
         * @static
         * @param {hall.Ilog_change_score_item} message log_change_score_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        log_change_score_item.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).sint64(message.source_score);
            writer.uint32(/* id 2, wireType 0 =*/16).sint64(message.change_score);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.id);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.change_type);
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.change_reason);
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.change_origin);
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.change_date);
            return writer;
        };

        /**
         * Encodes the specified log_change_score_item message, length delimited. Does not implicitly {@link hall.log_change_score_item.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.log_change_score_item
         * @static
         * @param {hall.Ilog_change_score_item} message log_change_score_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        log_change_score_item.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a log_change_score_item message from the specified reader or buffer.
         * @function decode
         * @memberof hall.log_change_score_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.log_change_score_item} log_change_score_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        log_change_score_item.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.log_change_score_item();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.source_score = reader.sint64();
                    break;
                case 2:
                    message.change_score = reader.sint64();
                    break;
                case 3:
                    message.id = reader.uint32();
                    break;
                case 4:
                    message.change_type = reader.uint32();
                    break;
                case 5:
                    message.change_reason = reader.string();
                    break;
                case 6:
                    message.change_origin = reader.string();
                    break;
                case 7:
                    message.change_date = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("source_score"))
                throw $util.ProtocolError("missing required 'source_score'", { instance: message });
            if (!message.hasOwnProperty("change_score"))
                throw $util.ProtocolError("missing required 'change_score'", { instance: message });
            if (!message.hasOwnProperty("id"))
                throw $util.ProtocolError("missing required 'id'", { instance: message });
            if (!message.hasOwnProperty("change_type"))
                throw $util.ProtocolError("missing required 'change_type'", { instance: message });
            if (!message.hasOwnProperty("change_reason"))
                throw $util.ProtocolError("missing required 'change_reason'", { instance: message });
            if (!message.hasOwnProperty("change_origin"))
                throw $util.ProtocolError("missing required 'change_origin'", { instance: message });
            if (!message.hasOwnProperty("change_date"))
                throw $util.ProtocolError("missing required 'change_date'", { instance: message });
            return message;
        };

        /**
         * Decodes a log_change_score_item message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.log_change_score_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.log_change_score_item} log_change_score_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        log_change_score_item.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a log_change_score_item message.
         * @function verify
         * @memberof hall.log_change_score_item
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        log_change_score_item.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.source_score) && !(message.source_score && $util.isInteger(message.source_score.low) && $util.isInteger(message.source_score.high)))
                return "source_score: integer|Long expected";
            if (!$util.isInteger(message.change_score) && !(message.change_score && $util.isInteger(message.change_score.low) && $util.isInteger(message.change_score.high)))
                return "change_score: integer|Long expected";
            if (!$util.isInteger(message.id))
                return "id: integer expected";
            if (!$util.isInteger(message.change_type))
                return "change_type: integer expected";
            if (!$util.isString(message.change_reason))
                return "change_reason: string expected";
            if (!$util.isString(message.change_origin))
                return "change_origin: string expected";
            if (!$util.isString(message.change_date))
                return "change_date: string expected";
            return null;
        };

        /**
         * Creates a log_change_score_item message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.log_change_score_item
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.log_change_score_item} log_change_score_item
         */
        log_change_score_item.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.log_change_score_item)
                return object;
            var message = new $root.hall.log_change_score_item();
            if (object.source_score != null)
                if ($util.Long)
                    (message.source_score = $util.Long.fromValue(object.source_score)).unsigned = false;
                else if (typeof object.source_score === "string")
                    message.source_score = parseInt(object.source_score, 10);
                else if (typeof object.source_score === "number")
                    message.source_score = object.source_score;
                else if (typeof object.source_score === "object")
                    message.source_score = new $util.LongBits(object.source_score.low >>> 0, object.source_score.high >>> 0).toNumber();
            if (object.change_score != null)
                if ($util.Long)
                    (message.change_score = $util.Long.fromValue(object.change_score)).unsigned = false;
                else if (typeof object.change_score === "string")
                    message.change_score = parseInt(object.change_score, 10);
                else if (typeof object.change_score === "number")
                    message.change_score = object.change_score;
                else if (typeof object.change_score === "object")
                    message.change_score = new $util.LongBits(object.change_score.low >>> 0, object.change_score.high >>> 0).toNumber();
            if (object.id != null)
                message.id = object.id >>> 0;
            if (object.change_type != null)
                message.change_type = object.change_type >>> 0;
            if (object.change_reason != null)
                message.change_reason = String(object.change_reason);
            if (object.change_origin != null)
                message.change_origin = String(object.change_origin);
            if (object.change_date != null)
                message.change_date = String(object.change_date);
            return message;
        };

        /**
         * Creates a plain object from a log_change_score_item message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.log_change_score_item
         * @static
         * @param {hall.log_change_score_item} message log_change_score_item
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        log_change_score_item.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.source_score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.source_score = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.change_score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.change_score = options.longs === String ? "0" : 0;
                object.id = 0;
                object.change_type = 0;
                object.change_reason = "";
                object.change_origin = "";
                object.change_date = "";
            }
            if (message.source_score != null && message.hasOwnProperty("source_score"))
                if (typeof message.source_score === "number")
                    object.source_score = options.longs === String ? String(message.source_score) : message.source_score;
                else
                    object.source_score = options.longs === String ? $util.Long.prototype.toString.call(message.source_score) : options.longs === Number ? new $util.LongBits(message.source_score.low >>> 0, message.source_score.high >>> 0).toNumber() : message.source_score;
            if (message.change_score != null && message.hasOwnProperty("change_score"))
                if (typeof message.change_score === "number")
                    object.change_score = options.longs === String ? String(message.change_score) : message.change_score;
                else
                    object.change_score = options.longs === String ? $util.Long.prototype.toString.call(message.change_score) : options.longs === Number ? new $util.LongBits(message.change_score.low >>> 0, message.change_score.high >>> 0).toNumber() : message.change_score;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.change_type != null && message.hasOwnProperty("change_type"))
                object.change_type = message.change_type;
            if (message.change_reason != null && message.hasOwnProperty("change_reason"))
                object.change_reason = message.change_reason;
            if (message.change_origin != null && message.hasOwnProperty("change_origin"))
                object.change_origin = message.change_origin;
            if (message.change_date != null && message.hasOwnProperty("change_date"))
                object.change_date = message.change_date;
            return object;
        };

        /**
         * Converts this log_change_score_item to JSON.
         * @function toJSON
         * @memberof hall.log_change_score_item
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        log_change_score_item.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return log_change_score_item;
    })();

    hall.reponse_log_change_score = (function() {

        /**
         * Properties of a reponse_log_change_score.
         * @memberof hall
         * @interface Ireponse_log_change_score
         * @property {Array.<hall.Ilog_change_score_item>|null} [items] reponse_log_change_score items
         */

        /**
         * Constructs a new reponse_log_change_score.
         * @memberof hall
         * @classdesc Represents a reponse_log_change_score.
         * @implements Ireponse_log_change_score
         * @constructor
         * @param {hall.Ireponse_log_change_score=} [properties] Properties to set
         */
        function reponse_log_change_score(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * reponse_log_change_score items.
         * @member {Array.<hall.Ilog_change_score_item>} items
         * @memberof hall.reponse_log_change_score
         * @instance
         */
        reponse_log_change_score.prototype.items = $util.emptyArray;

        /**
         * Creates a new reponse_log_change_score instance using the specified properties.
         * @function create
         * @memberof hall.reponse_log_change_score
         * @static
         * @param {hall.Ireponse_log_change_score=} [properties] Properties to set
         * @returns {hall.reponse_log_change_score} reponse_log_change_score instance
         */
        reponse_log_change_score.create = function create(properties) {
            return new reponse_log_change_score(properties);
        };

        /**
         * Encodes the specified reponse_log_change_score message. Does not implicitly {@link hall.reponse_log_change_score.verify|verify} messages.
         * @function encode
         * @memberof hall.reponse_log_change_score
         * @static
         * @param {hall.Ireponse_log_change_score} message reponse_log_change_score message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        reponse_log_change_score.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.hall.log_change_score_item.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified reponse_log_change_score message, length delimited. Does not implicitly {@link hall.reponse_log_change_score.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.reponse_log_change_score
         * @static
         * @param {hall.Ireponse_log_change_score} message reponse_log_change_score message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        reponse_log_change_score.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a reponse_log_change_score message from the specified reader or buffer.
         * @function decode
         * @memberof hall.reponse_log_change_score
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.reponse_log_change_score} reponse_log_change_score
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        reponse_log_change_score.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.reponse_log_change_score();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.items && message.items.length))
                        message.items = [];
                    message.items.push($root.hall.log_change_score_item.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a reponse_log_change_score message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.reponse_log_change_score
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.reponse_log_change_score} reponse_log_change_score
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        reponse_log_change_score.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a reponse_log_change_score message.
         * @function verify
         * @memberof hall.reponse_log_change_score
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        reponse_log_change_score.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.hall.log_change_score_item.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a reponse_log_change_score message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.reponse_log_change_score
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.reponse_log_change_score} reponse_log_change_score
         */
        reponse_log_change_score.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.reponse_log_change_score)
                return object;
            var message = new $root.hall.reponse_log_change_score();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".hall.reponse_log_change_score.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".hall.reponse_log_change_score.items: object expected");
                    message.items[i] = $root.hall.log_change_score_item.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a reponse_log_change_score message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.reponse_log_change_score
         * @static
         * @param {hall.reponse_log_change_score} message reponse_log_change_score
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        reponse_log_change_score.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.hall.log_change_score_item.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this reponse_log_change_score to JSON.
         * @function toJSON
         * @memberof hall.reponse_log_change_score
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        reponse_log_change_score.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return reponse_log_change_score;
    })();

    hall.request_config_shop_exchange = (function() {

        /**
         * Properties of a request_config_shop_exchange.
         * @memberof hall
         * @interface Irequest_config_shop_exchange
         * @property {number} type request_config_shop_exchange type
         */

        /**
         * Constructs a new request_config_shop_exchange.
         * @memberof hall
         * @classdesc Represents a request_config_shop_exchange.
         * @implements Irequest_config_shop_exchange
         * @constructor
         * @param {hall.Irequest_config_shop_exchange=} [properties] Properties to set
         */
        function request_config_shop_exchange(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_config_shop_exchange type.
         * @member {number} type
         * @memberof hall.request_config_shop_exchange
         * @instance
         */
        request_config_shop_exchange.prototype.type = 0;

        /**
         * Creates a new request_config_shop_exchange instance using the specified properties.
         * @function create
         * @memberof hall.request_config_shop_exchange
         * @static
         * @param {hall.Irequest_config_shop_exchange=} [properties] Properties to set
         * @returns {hall.request_config_shop_exchange} request_config_shop_exchange instance
         */
        request_config_shop_exchange.create = function create(properties) {
            return new request_config_shop_exchange(properties);
        };

        /**
         * Encodes the specified request_config_shop_exchange message. Does not implicitly {@link hall.request_config_shop_exchange.verify|verify} messages.
         * @function encode
         * @memberof hall.request_config_shop_exchange
         * @static
         * @param {hall.Irequest_config_shop_exchange} message request_config_shop_exchange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_config_shop_exchange.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.type);
            return writer;
        };

        /**
         * Encodes the specified request_config_shop_exchange message, length delimited. Does not implicitly {@link hall.request_config_shop_exchange.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_config_shop_exchange
         * @static
         * @param {hall.Irequest_config_shop_exchange} message request_config_shop_exchange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_config_shop_exchange.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_config_shop_exchange message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_config_shop_exchange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_config_shop_exchange} request_config_shop_exchange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_config_shop_exchange.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_config_shop_exchange();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.type = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("type"))
                throw $util.ProtocolError("missing required 'type'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_config_shop_exchange message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_config_shop_exchange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_config_shop_exchange} request_config_shop_exchange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_config_shop_exchange.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_config_shop_exchange message.
         * @function verify
         * @memberof hall.request_config_shop_exchange
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_config_shop_exchange.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.type))
                return "type: integer expected";
            return null;
        };

        /**
         * Creates a request_config_shop_exchange message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_config_shop_exchange
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_config_shop_exchange} request_config_shop_exchange
         */
        request_config_shop_exchange.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_config_shop_exchange)
                return object;
            var message = new $root.hall.request_config_shop_exchange();
            if (object.type != null)
                message.type = object.type >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a request_config_shop_exchange message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_config_shop_exchange
         * @static
         * @param {hall.request_config_shop_exchange} message request_config_shop_exchange
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_config_shop_exchange.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.type = 0;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            return object;
        };

        /**
         * Converts this request_config_shop_exchange to JSON.
         * @function toJSON
         * @memberof hall.request_config_shop_exchange
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_config_shop_exchange.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_config_shop_exchange;
    })();

    hall.response_config_shop_exchange = (function() {

        /**
         * Properties of a response_config_shop_exchange.
         * @memberof hall
         * @interface Iresponse_config_shop_exchange
         * @property {string} content response_config_shop_exchange content
         * @property {string|null} [ext] response_config_shop_exchange ext
         */

        /**
         * Constructs a new response_config_shop_exchange.
         * @memberof hall
         * @classdesc Represents a response_config_shop_exchange.
         * @implements Iresponse_config_shop_exchange
         * @constructor
         * @param {hall.Iresponse_config_shop_exchange=} [properties] Properties to set
         */
        function response_config_shop_exchange(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_config_shop_exchange content.
         * @member {string} content
         * @memberof hall.response_config_shop_exchange
         * @instance
         */
        response_config_shop_exchange.prototype.content = "";

        /**
         * response_config_shop_exchange ext.
         * @member {string} ext
         * @memberof hall.response_config_shop_exchange
         * @instance
         */
        response_config_shop_exchange.prototype.ext = "";

        /**
         * Creates a new response_config_shop_exchange instance using the specified properties.
         * @function create
         * @memberof hall.response_config_shop_exchange
         * @static
         * @param {hall.Iresponse_config_shop_exchange=} [properties] Properties to set
         * @returns {hall.response_config_shop_exchange} response_config_shop_exchange instance
         */
        response_config_shop_exchange.create = function create(properties) {
            return new response_config_shop_exchange(properties);
        };

        /**
         * Encodes the specified response_config_shop_exchange message. Does not implicitly {@link hall.response_config_shop_exchange.verify|verify} messages.
         * @function encode
         * @memberof hall.response_config_shop_exchange
         * @static
         * @param {hall.Iresponse_config_shop_exchange} message response_config_shop_exchange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_config_shop_exchange.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.content);
            if (message.ext != null && Object.hasOwnProperty.call(message, "ext"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.ext);
            return writer;
        };

        /**
         * Encodes the specified response_config_shop_exchange message, length delimited. Does not implicitly {@link hall.response_config_shop_exchange.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_config_shop_exchange
         * @static
         * @param {hall.Iresponse_config_shop_exchange} message response_config_shop_exchange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_config_shop_exchange.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_config_shop_exchange message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_config_shop_exchange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_config_shop_exchange} response_config_shop_exchange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_config_shop_exchange.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_config_shop_exchange();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.content = reader.string();
                    break;
                case 2:
                    message.ext = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("content"))
                throw $util.ProtocolError("missing required 'content'", { instance: message });
            return message;
        };

        /**
         * Decodes a response_config_shop_exchange message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_config_shop_exchange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_config_shop_exchange} response_config_shop_exchange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_config_shop_exchange.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_config_shop_exchange message.
         * @function verify
         * @memberof hall.response_config_shop_exchange
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_config_shop_exchange.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isString(message.content))
                return "content: string expected";
            if (message.ext != null && message.hasOwnProperty("ext"))
                if (!$util.isString(message.ext))
                    return "ext: string expected";
            return null;
        };

        /**
         * Creates a response_config_shop_exchange message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_config_shop_exchange
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_config_shop_exchange} response_config_shop_exchange
         */
        response_config_shop_exchange.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_config_shop_exchange)
                return object;
            var message = new $root.hall.response_config_shop_exchange();
            if (object.content != null)
                message.content = String(object.content);
            if (object.ext != null)
                message.ext = String(object.ext);
            return message;
        };

        /**
         * Creates a plain object from a response_config_shop_exchange message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_config_shop_exchange
         * @static
         * @param {hall.response_config_shop_exchange} message response_config_shop_exchange
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_config_shop_exchange.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.content = "";
                object.ext = "";
            }
            if (message.content != null && message.hasOwnProperty("content"))
                object.content = message.content;
            if (message.ext != null && message.hasOwnProperty("ext"))
                object.ext = message.ext;
            return object;
        };

        /**
         * Converts this response_config_shop_exchange to JSON.
         * @function toJSON
         * @memberof hall.response_config_shop_exchange
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_config_shop_exchange.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_config_shop_exchange;
    })();

    hall.response_operate_result = (function() {

        /**
         * Properties of a response_operate_result.
         * @memberof hall
         * @interface Iresponse_operate_result
         * @property {number} result_code response_operate_result result_code
         * @property {string|null} [reason] response_operate_result reason
         */

        /**
         * Constructs a new response_operate_result.
         * @memberof hall
         * @classdesc Represents a response_operate_result.
         * @implements Iresponse_operate_result
         * @constructor
         * @param {hall.Iresponse_operate_result=} [properties] Properties to set
         */
        function response_operate_result(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_operate_result result_code.
         * @member {number} result_code
         * @memberof hall.response_operate_result
         * @instance
         */
        response_operate_result.prototype.result_code = 0;

        /**
         * response_operate_result reason.
         * @member {string} reason
         * @memberof hall.response_operate_result
         * @instance
         */
        response_operate_result.prototype.reason = "";

        /**
         * Creates a new response_operate_result instance using the specified properties.
         * @function create
         * @memberof hall.response_operate_result
         * @static
         * @param {hall.Iresponse_operate_result=} [properties] Properties to set
         * @returns {hall.response_operate_result} response_operate_result instance
         */
        response_operate_result.create = function create(properties) {
            return new response_operate_result(properties);
        };

        /**
         * Encodes the specified response_operate_result message. Does not implicitly {@link hall.response_operate_result.verify|verify} messages.
         * @function encode
         * @memberof hall.response_operate_result
         * @static
         * @param {hall.Iresponse_operate_result} message response_operate_result message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_operate_result.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.result_code);
            if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.reason);
            return writer;
        };

        /**
         * Encodes the specified response_operate_result message, length delimited. Does not implicitly {@link hall.response_operate_result.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_operate_result
         * @static
         * @param {hall.Iresponse_operate_result} message response_operate_result message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_operate_result.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_operate_result message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_operate_result
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_operate_result} response_operate_result
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_operate_result.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_operate_result();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.result_code = reader.uint32();
                    break;
                case 2:
                    message.reason = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("result_code"))
                throw $util.ProtocolError("missing required 'result_code'", { instance: message });
            return message;
        };

        /**
         * Decodes a response_operate_result message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_operate_result
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_operate_result} response_operate_result
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_operate_result.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_operate_result message.
         * @function verify
         * @memberof hall.response_operate_result
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_operate_result.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.result_code))
                return "result_code: integer expected";
            if (message.reason != null && message.hasOwnProperty("reason"))
                if (!$util.isString(message.reason))
                    return "reason: string expected";
            return null;
        };

        /**
         * Creates a response_operate_result message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_operate_result
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_operate_result} response_operate_result
         */
        response_operate_result.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_operate_result)
                return object;
            var message = new $root.hall.response_operate_result();
            if (object.result_code != null)
                message.result_code = object.result_code >>> 0;
            if (object.reason != null)
                message.reason = String(object.reason);
            return message;
        };

        /**
         * Creates a plain object from a response_operate_result message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_operate_result
         * @static
         * @param {hall.response_operate_result} message response_operate_result
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_operate_result.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result_code = 0;
                object.reason = "";
            }
            if (message.result_code != null && message.hasOwnProperty("result_code"))
                object.result_code = message.result_code;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            return object;
        };

        /**
         * Converts this response_operate_result to JSON.
         * @function toJSON
         * @memberof hall.response_operate_result
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_operate_result.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_operate_result;
    })();

    hall.request_accountup = (function() {

        /**
         * Properties of a request_accountup.
         * @memberof hall
         * @interface Irequest_accountup
         * @property {number} userid request_accountup userid
         * @property {string} password request_accountup password
         * @property {string} phone_number request_accountup phone_number
         * @property {string} code request_accountup code
         * @property {string} new_password request_accountup new_password
         */

        /**
         * Constructs a new request_accountup.
         * @memberof hall
         * @classdesc Represents a request_accountup.
         * @implements Irequest_accountup
         * @constructor
         * @param {hall.Irequest_accountup=} [properties] Properties to set
         */
        function request_accountup(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_accountup userid.
         * @member {number} userid
         * @memberof hall.request_accountup
         * @instance
         */
        request_accountup.prototype.userid = 0;

        /**
         * request_accountup password.
         * @member {string} password
         * @memberof hall.request_accountup
         * @instance
         */
        request_accountup.prototype.password = "";

        /**
         * request_accountup phone_number.
         * @member {string} phone_number
         * @memberof hall.request_accountup
         * @instance
         */
        request_accountup.prototype.phone_number = "";

        /**
         * request_accountup code.
         * @member {string} code
         * @memberof hall.request_accountup
         * @instance
         */
        request_accountup.prototype.code = "";

        /**
         * request_accountup new_password.
         * @member {string} new_password
         * @memberof hall.request_accountup
         * @instance
         */
        request_accountup.prototype.new_password = "";

        /**
         * Creates a new request_accountup instance using the specified properties.
         * @function create
         * @memberof hall.request_accountup
         * @static
         * @param {hall.Irequest_accountup=} [properties] Properties to set
         * @returns {hall.request_accountup} request_accountup instance
         */
        request_accountup.create = function create(properties) {
            return new request_accountup(properties);
        };

        /**
         * Encodes the specified request_accountup message. Does not implicitly {@link hall.request_accountup.verify|verify} messages.
         * @function encode
         * @memberof hall.request_accountup
         * @static
         * @param {hall.Irequest_accountup} message request_accountup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_accountup.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.phone_number);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.code);
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.new_password);
            return writer;
        };

        /**
         * Encodes the specified request_accountup message, length delimited. Does not implicitly {@link hall.request_accountup.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_accountup
         * @static
         * @param {hall.Irequest_accountup} message request_accountup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_accountup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_accountup message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_accountup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_accountup} request_accountup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_accountup.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_accountup();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.phone_number = reader.string();
                    break;
                case 4:
                    message.code = reader.string();
                    break;
                case 5:
                    message.new_password = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("phone_number"))
                throw $util.ProtocolError("missing required 'phone_number'", { instance: message });
            if (!message.hasOwnProperty("code"))
                throw $util.ProtocolError("missing required 'code'", { instance: message });
            if (!message.hasOwnProperty("new_password"))
                throw $util.ProtocolError("missing required 'new_password'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_accountup message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_accountup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_accountup} request_accountup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_accountup.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_accountup message.
         * @function verify
         * @memberof hall.request_accountup
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_accountup.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isString(message.phone_number))
                return "phone_number: string expected";
            if (!$util.isString(message.code))
                return "code: string expected";
            if (!$util.isString(message.new_password))
                return "new_password: string expected";
            return null;
        };

        /**
         * Creates a request_accountup message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_accountup
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_accountup} request_accountup
         */
        request_accountup.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_accountup)
                return object;
            var message = new $root.hall.request_accountup();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.phone_number != null)
                message.phone_number = String(object.phone_number);
            if (object.code != null)
                message.code = String(object.code);
            if (object.new_password != null)
                message.new_password = String(object.new_password);
            return message;
        };

        /**
         * Creates a plain object from a request_accountup message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_accountup
         * @static
         * @param {hall.request_accountup} message request_accountup
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_accountup.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.phone_number = "";
                object.code = "";
                object.new_password = "";
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.phone_number != null && message.hasOwnProperty("phone_number"))
                object.phone_number = message.phone_number;
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            if (message.new_password != null && message.hasOwnProperty("new_password"))
                object.new_password = message.new_password;
            return object;
        };

        /**
         * Converts this request_accountup to JSON.
         * @function toJSON
         * @memberof hall.request_accountup
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_accountup.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_accountup;
    })();

    hall.request_modify_password = (function() {

        /**
         * Properties of a request_modify_password.
         * @memberof hall
         * @interface Irequest_modify_password
         * @property {number} userid request_modify_password userid
         * @property {string} password request_modify_password password
         * @property {string} new_password request_modify_password new_password
         * @property {string} phone_number request_modify_password phone_number
         * @property {string} code request_modify_password code
         */

        /**
         * Constructs a new request_modify_password.
         * @memberof hall
         * @classdesc Represents a request_modify_password.
         * @implements Irequest_modify_password
         * @constructor
         * @param {hall.Irequest_modify_password=} [properties] Properties to set
         */
        function request_modify_password(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_modify_password userid.
         * @member {number} userid
         * @memberof hall.request_modify_password
         * @instance
         */
        request_modify_password.prototype.userid = 0;

        /**
         * request_modify_password password.
         * @member {string} password
         * @memberof hall.request_modify_password
         * @instance
         */
        request_modify_password.prototype.password = "";

        /**
         * request_modify_password new_password.
         * @member {string} new_password
         * @memberof hall.request_modify_password
         * @instance
         */
        request_modify_password.prototype.new_password = "";

        /**
         * request_modify_password phone_number.
         * @member {string} phone_number
         * @memberof hall.request_modify_password
         * @instance
         */
        request_modify_password.prototype.phone_number = "";

        /**
         * request_modify_password code.
         * @member {string} code
         * @memberof hall.request_modify_password
         * @instance
         */
        request_modify_password.prototype.code = "";

        /**
         * Creates a new request_modify_password instance using the specified properties.
         * @function create
         * @memberof hall.request_modify_password
         * @static
         * @param {hall.Irequest_modify_password=} [properties] Properties to set
         * @returns {hall.request_modify_password} request_modify_password instance
         */
        request_modify_password.create = function create(properties) {
            return new request_modify_password(properties);
        };

        /**
         * Encodes the specified request_modify_password message. Does not implicitly {@link hall.request_modify_password.verify|verify} messages.
         * @function encode
         * @memberof hall.request_modify_password
         * @static
         * @param {hall.Irequest_modify_password} message request_modify_password message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_modify_password.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.new_password);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.phone_number);
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.code);
            return writer;
        };

        /**
         * Encodes the specified request_modify_password message, length delimited. Does not implicitly {@link hall.request_modify_password.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_modify_password
         * @static
         * @param {hall.Irequest_modify_password} message request_modify_password message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_modify_password.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_modify_password message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_modify_password
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_modify_password} request_modify_password
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_modify_password.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_modify_password();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.new_password = reader.string();
                    break;
                case 4:
                    message.phone_number = reader.string();
                    break;
                case 5:
                    message.code = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("new_password"))
                throw $util.ProtocolError("missing required 'new_password'", { instance: message });
            if (!message.hasOwnProperty("phone_number"))
                throw $util.ProtocolError("missing required 'phone_number'", { instance: message });
            if (!message.hasOwnProperty("code"))
                throw $util.ProtocolError("missing required 'code'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_modify_password message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_modify_password
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_modify_password} request_modify_password
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_modify_password.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_modify_password message.
         * @function verify
         * @memberof hall.request_modify_password
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_modify_password.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isString(message.new_password))
                return "new_password: string expected";
            if (!$util.isString(message.phone_number))
                return "phone_number: string expected";
            if (!$util.isString(message.code))
                return "code: string expected";
            return null;
        };

        /**
         * Creates a request_modify_password message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_modify_password
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_modify_password} request_modify_password
         */
        request_modify_password.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_modify_password)
                return object;
            var message = new $root.hall.request_modify_password();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.new_password != null)
                message.new_password = String(object.new_password);
            if (object.phone_number != null)
                message.phone_number = String(object.phone_number);
            if (object.code != null)
                message.code = String(object.code);
            return message;
        };

        /**
         * Creates a plain object from a request_modify_password message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_modify_password
         * @static
         * @param {hall.request_modify_password} message request_modify_password
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_modify_password.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.new_password = "";
                object.phone_number = "";
                object.code = "";
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.new_password != null && message.hasOwnProperty("new_password"))
                object.new_password = message.new_password;
            if (message.phone_number != null && message.hasOwnProperty("phone_number"))
                object.phone_number = message.phone_number;
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            return object;
        };

        /**
         * Converts this request_modify_password to JSON.
         * @function toJSON
         * @memberof hall.request_modify_password
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_modify_password.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_modify_password;
    })();

    hall.request_bind_phone = (function() {

        /**
         * Properties of a request_bind_phone.
         * @memberof hall
         * @interface Irequest_bind_phone
         * @property {number} userid request_bind_phone userid
         * @property {string} password request_bind_phone password
         * @property {string} phone_number request_bind_phone phone_number
         * @property {string} code request_bind_phone code
         */

        /**
         * Constructs a new request_bind_phone.
         * @memberof hall
         * @classdesc Represents a request_bind_phone.
         * @implements Irequest_bind_phone
         * @constructor
         * @param {hall.Irequest_bind_phone=} [properties] Properties to set
         */
        function request_bind_phone(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_bind_phone userid.
         * @member {number} userid
         * @memberof hall.request_bind_phone
         * @instance
         */
        request_bind_phone.prototype.userid = 0;

        /**
         * request_bind_phone password.
         * @member {string} password
         * @memberof hall.request_bind_phone
         * @instance
         */
        request_bind_phone.prototype.password = "";

        /**
         * request_bind_phone phone_number.
         * @member {string} phone_number
         * @memberof hall.request_bind_phone
         * @instance
         */
        request_bind_phone.prototype.phone_number = "";

        /**
         * request_bind_phone code.
         * @member {string} code
         * @memberof hall.request_bind_phone
         * @instance
         */
        request_bind_phone.prototype.code = "";

        /**
         * Creates a new request_bind_phone instance using the specified properties.
         * @function create
         * @memberof hall.request_bind_phone
         * @static
         * @param {hall.Irequest_bind_phone=} [properties] Properties to set
         * @returns {hall.request_bind_phone} request_bind_phone instance
         */
        request_bind_phone.create = function create(properties) {
            return new request_bind_phone(properties);
        };

        /**
         * Encodes the specified request_bind_phone message. Does not implicitly {@link hall.request_bind_phone.verify|verify} messages.
         * @function encode
         * @memberof hall.request_bind_phone
         * @static
         * @param {hall.Irequest_bind_phone} message request_bind_phone message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_bind_phone.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.phone_number);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.code);
            return writer;
        };

        /**
         * Encodes the specified request_bind_phone message, length delimited. Does not implicitly {@link hall.request_bind_phone.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_bind_phone
         * @static
         * @param {hall.Irequest_bind_phone} message request_bind_phone message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_bind_phone.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_bind_phone message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_bind_phone
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_bind_phone} request_bind_phone
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_bind_phone.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_bind_phone();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.phone_number = reader.string();
                    break;
                case 4:
                    message.code = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("phone_number"))
                throw $util.ProtocolError("missing required 'phone_number'", { instance: message });
            if (!message.hasOwnProperty("code"))
                throw $util.ProtocolError("missing required 'code'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_bind_phone message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_bind_phone
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_bind_phone} request_bind_phone
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_bind_phone.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_bind_phone message.
         * @function verify
         * @memberof hall.request_bind_phone
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_bind_phone.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isString(message.phone_number))
                return "phone_number: string expected";
            if (!$util.isString(message.code))
                return "code: string expected";
            return null;
        };

        /**
         * Creates a request_bind_phone message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_bind_phone
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_bind_phone} request_bind_phone
         */
        request_bind_phone.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_bind_phone)
                return object;
            var message = new $root.hall.request_bind_phone();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.phone_number != null)
                message.phone_number = String(object.phone_number);
            if (object.code != null)
                message.code = String(object.code);
            return message;
        };

        /**
         * Creates a plain object from a request_bind_phone message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_bind_phone
         * @static
         * @param {hall.request_bind_phone} message request_bind_phone
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_bind_phone.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.phone_number = "";
                object.code = "";
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.phone_number != null && message.hasOwnProperty("phone_number"))
                object.phone_number = message.phone_number;
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            return object;
        };

        /**
         * Converts this request_bind_phone to JSON.
         * @function toJSON
         * @memberof hall.request_bind_phone
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_bind_phone.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_bind_phone;
    })();

    hall.request_bind_alipay = (function() {

        /**
         * Properties of a request_bind_alipay.
         * @memberof hall
         * @interface Irequest_bind_alipay
         * @property {number} userid request_bind_alipay userid
         * @property {string} password request_bind_alipay password
         * @property {string} alipay_account request_bind_alipay alipay_account
         * @property {string} alipay_name request_bind_alipay alipay_name
         */

        /**
         * Constructs a new request_bind_alipay.
         * @memberof hall
         * @classdesc Represents a request_bind_alipay.
         * @implements Irequest_bind_alipay
         * @constructor
         * @param {hall.Irequest_bind_alipay=} [properties] Properties to set
         */
        function request_bind_alipay(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_bind_alipay userid.
         * @member {number} userid
         * @memberof hall.request_bind_alipay
         * @instance
         */
        request_bind_alipay.prototype.userid = 0;

        /**
         * request_bind_alipay password.
         * @member {string} password
         * @memberof hall.request_bind_alipay
         * @instance
         */
        request_bind_alipay.prototype.password = "";

        /**
         * request_bind_alipay alipay_account.
         * @member {string} alipay_account
         * @memberof hall.request_bind_alipay
         * @instance
         */
        request_bind_alipay.prototype.alipay_account = "";

        /**
         * request_bind_alipay alipay_name.
         * @member {string} alipay_name
         * @memberof hall.request_bind_alipay
         * @instance
         */
        request_bind_alipay.prototype.alipay_name = "";

        /**
         * Creates a new request_bind_alipay instance using the specified properties.
         * @function create
         * @memberof hall.request_bind_alipay
         * @static
         * @param {hall.Irequest_bind_alipay=} [properties] Properties to set
         * @returns {hall.request_bind_alipay} request_bind_alipay instance
         */
        request_bind_alipay.create = function create(properties) {
            return new request_bind_alipay(properties);
        };

        /**
         * Encodes the specified request_bind_alipay message. Does not implicitly {@link hall.request_bind_alipay.verify|verify} messages.
         * @function encode
         * @memberof hall.request_bind_alipay
         * @static
         * @param {hall.Irequest_bind_alipay} message request_bind_alipay message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_bind_alipay.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.alipay_account);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.alipay_name);
            return writer;
        };

        /**
         * Encodes the specified request_bind_alipay message, length delimited. Does not implicitly {@link hall.request_bind_alipay.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_bind_alipay
         * @static
         * @param {hall.Irequest_bind_alipay} message request_bind_alipay message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_bind_alipay.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_bind_alipay message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_bind_alipay
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_bind_alipay} request_bind_alipay
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_bind_alipay.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_bind_alipay();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.alipay_account = reader.string();
                    break;
                case 4:
                    message.alipay_name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("alipay_account"))
                throw $util.ProtocolError("missing required 'alipay_account'", { instance: message });
            if (!message.hasOwnProperty("alipay_name"))
                throw $util.ProtocolError("missing required 'alipay_name'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_bind_alipay message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_bind_alipay
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_bind_alipay} request_bind_alipay
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_bind_alipay.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_bind_alipay message.
         * @function verify
         * @memberof hall.request_bind_alipay
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_bind_alipay.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isString(message.alipay_account))
                return "alipay_account: string expected";
            if (!$util.isString(message.alipay_name))
                return "alipay_name: string expected";
            return null;
        };

        /**
         * Creates a request_bind_alipay message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_bind_alipay
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_bind_alipay} request_bind_alipay
         */
        request_bind_alipay.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_bind_alipay)
                return object;
            var message = new $root.hall.request_bind_alipay();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.alipay_account != null)
                message.alipay_account = String(object.alipay_account);
            if (object.alipay_name != null)
                message.alipay_name = String(object.alipay_name);
            return message;
        };

        /**
         * Creates a plain object from a request_bind_alipay message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_bind_alipay
         * @static
         * @param {hall.request_bind_alipay} message request_bind_alipay
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_bind_alipay.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.alipay_account = "";
                object.alipay_name = "";
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.alipay_account != null && message.hasOwnProperty("alipay_account"))
                object.alipay_account = message.alipay_account;
            if (message.alipay_name != null && message.hasOwnProperty("alipay_name"))
                object.alipay_name = message.alipay_name;
            return object;
        };

        /**
         * Converts this request_bind_alipay to JSON.
         * @function toJSON
         * @memberof hall.request_bind_alipay
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_bind_alipay.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_bind_alipay;
    })();

    hall.request_bind_bankcard = (function() {

        /**
         * Properties of a request_bind_bankcard.
         * @memberof hall
         * @interface Irequest_bind_bankcard
         * @property {number} userid request_bind_bankcard userid
         * @property {string} password request_bind_bankcard password
         * @property {string} bankcard_id request_bind_bankcard bankcard_id
         * @property {string} bankcard_name request_bind_bankcard bankcard_name
         * @property {string} bankcard_addr request_bind_bankcard bankcard_addr
         */

        /**
         * Constructs a new request_bind_bankcard.
         * @memberof hall
         * @classdesc Represents a request_bind_bankcard.
         * @implements Irequest_bind_bankcard
         * @constructor
         * @param {hall.Irequest_bind_bankcard=} [properties] Properties to set
         */
        function request_bind_bankcard(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_bind_bankcard userid.
         * @member {number} userid
         * @memberof hall.request_bind_bankcard
         * @instance
         */
        request_bind_bankcard.prototype.userid = 0;

        /**
         * request_bind_bankcard password.
         * @member {string} password
         * @memberof hall.request_bind_bankcard
         * @instance
         */
        request_bind_bankcard.prototype.password = "";

        /**
         * request_bind_bankcard bankcard_id.
         * @member {string} bankcard_id
         * @memberof hall.request_bind_bankcard
         * @instance
         */
        request_bind_bankcard.prototype.bankcard_id = "";

        /**
         * request_bind_bankcard bankcard_name.
         * @member {string} bankcard_name
         * @memberof hall.request_bind_bankcard
         * @instance
         */
        request_bind_bankcard.prototype.bankcard_name = "";

        /**
         * request_bind_bankcard bankcard_addr.
         * @member {string} bankcard_addr
         * @memberof hall.request_bind_bankcard
         * @instance
         */
        request_bind_bankcard.prototype.bankcard_addr = "";

        /**
         * Creates a new request_bind_bankcard instance using the specified properties.
         * @function create
         * @memberof hall.request_bind_bankcard
         * @static
         * @param {hall.Irequest_bind_bankcard=} [properties] Properties to set
         * @returns {hall.request_bind_bankcard} request_bind_bankcard instance
         */
        request_bind_bankcard.create = function create(properties) {
            return new request_bind_bankcard(properties);
        };

        /**
         * Encodes the specified request_bind_bankcard message. Does not implicitly {@link hall.request_bind_bankcard.verify|verify} messages.
         * @function encode
         * @memberof hall.request_bind_bankcard
         * @static
         * @param {hall.Irequest_bind_bankcard} message request_bind_bankcard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_bind_bankcard.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.bankcard_id);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.bankcard_name);
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.bankcard_addr);
            return writer;
        };

        /**
         * Encodes the specified request_bind_bankcard message, length delimited. Does not implicitly {@link hall.request_bind_bankcard.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_bind_bankcard
         * @static
         * @param {hall.Irequest_bind_bankcard} message request_bind_bankcard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_bind_bankcard.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_bind_bankcard message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_bind_bankcard
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_bind_bankcard} request_bind_bankcard
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_bind_bankcard.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_bind_bankcard();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.bankcard_id = reader.string();
                    break;
                case 4:
                    message.bankcard_name = reader.string();
                    break;
                case 5:
                    message.bankcard_addr = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("bankcard_id"))
                throw $util.ProtocolError("missing required 'bankcard_id'", { instance: message });
            if (!message.hasOwnProperty("bankcard_name"))
                throw $util.ProtocolError("missing required 'bankcard_name'", { instance: message });
            if (!message.hasOwnProperty("bankcard_addr"))
                throw $util.ProtocolError("missing required 'bankcard_addr'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_bind_bankcard message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_bind_bankcard
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_bind_bankcard} request_bind_bankcard
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_bind_bankcard.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_bind_bankcard message.
         * @function verify
         * @memberof hall.request_bind_bankcard
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_bind_bankcard.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isString(message.bankcard_id))
                return "bankcard_id: string expected";
            if (!$util.isString(message.bankcard_name))
                return "bankcard_name: string expected";
            if (!$util.isString(message.bankcard_addr))
                return "bankcard_addr: string expected";
            return null;
        };

        /**
         * Creates a request_bind_bankcard message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_bind_bankcard
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_bind_bankcard} request_bind_bankcard
         */
        request_bind_bankcard.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_bind_bankcard)
                return object;
            var message = new $root.hall.request_bind_bankcard();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.bankcard_id != null)
                message.bankcard_id = String(object.bankcard_id);
            if (object.bankcard_name != null)
                message.bankcard_name = String(object.bankcard_name);
            if (object.bankcard_addr != null)
                message.bankcard_addr = String(object.bankcard_addr);
            return message;
        };

        /**
         * Creates a plain object from a request_bind_bankcard message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_bind_bankcard
         * @static
         * @param {hall.request_bind_bankcard} message request_bind_bankcard
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_bind_bankcard.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.bankcard_id = "";
                object.bankcard_name = "";
                object.bankcard_addr = "";
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.bankcard_id != null && message.hasOwnProperty("bankcard_id"))
                object.bankcard_id = message.bankcard_id;
            if (message.bankcard_name != null && message.hasOwnProperty("bankcard_name"))
                object.bankcard_name = message.bankcard_name;
            if (message.bankcard_addr != null && message.hasOwnProperty("bankcard_addr"))
                object.bankcard_addr = message.bankcard_addr;
            return object;
        };

        /**
         * Converts this request_bind_bankcard to JSON.
         * @function toJSON
         * @memberof hall.request_bind_bankcard
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_bind_bankcard.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_bind_bankcard;
    })();

    hall.request_exchange = (function() {

        /**
         * Properties of a request_exchange.
         * @memberof hall
         * @interface Irequest_exchange
         * @property {number} userid request_exchange userid
         * @property {string} password request_exchange password
         * @property {number} type request_exchange type
         * @property {number|Long} score request_exchange score
         */

        /**
         * Constructs a new request_exchange.
         * @memberof hall
         * @classdesc Represents a request_exchange.
         * @implements Irequest_exchange
         * @constructor
         * @param {hall.Irequest_exchange=} [properties] Properties to set
         */
        function request_exchange(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_exchange userid.
         * @member {number} userid
         * @memberof hall.request_exchange
         * @instance
         */
        request_exchange.prototype.userid = 0;

        /**
         * request_exchange password.
         * @member {string} password
         * @memberof hall.request_exchange
         * @instance
         */
        request_exchange.prototype.password = "";

        /**
         * request_exchange type.
         * @member {number} type
         * @memberof hall.request_exchange
         * @instance
         */
        request_exchange.prototype.type = 0;

        /**
         * request_exchange score.
         * @member {number|Long} score
         * @memberof hall.request_exchange
         * @instance
         */
        request_exchange.prototype.score = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new request_exchange instance using the specified properties.
         * @function create
         * @memberof hall.request_exchange
         * @static
         * @param {hall.Irequest_exchange=} [properties] Properties to set
         * @returns {hall.request_exchange} request_exchange instance
         */
        request_exchange.create = function create(properties) {
            return new request_exchange(properties);
        };

        /**
         * Encodes the specified request_exchange message. Does not implicitly {@link hall.request_exchange.verify|verify} messages.
         * @function encode
         * @memberof hall.request_exchange
         * @static
         * @param {hall.Irequest_exchange} message request_exchange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_exchange.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.type);
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.score);
            return writer;
        };

        /**
         * Encodes the specified request_exchange message, length delimited. Does not implicitly {@link hall.request_exchange.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_exchange
         * @static
         * @param {hall.Irequest_exchange} message request_exchange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_exchange.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_exchange message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_exchange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_exchange} request_exchange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_exchange.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_exchange();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.type = reader.uint32();
                    break;
                case 4:
                    message.score = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("type"))
                throw $util.ProtocolError("missing required 'type'", { instance: message });
            if (!message.hasOwnProperty("score"))
                throw $util.ProtocolError("missing required 'score'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_exchange message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_exchange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_exchange} request_exchange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_exchange.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_exchange message.
         * @function verify
         * @memberof hall.request_exchange
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_exchange.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isInteger(message.type))
                return "type: integer expected";
            if (!$util.isInteger(message.score) && !(message.score && $util.isInteger(message.score.low) && $util.isInteger(message.score.high)))
                return "score: integer|Long expected";
            return null;
        };

        /**
         * Creates a request_exchange message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_exchange
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_exchange} request_exchange
         */
        request_exchange.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_exchange)
                return object;
            var message = new $root.hall.request_exchange();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.type != null)
                message.type = object.type >>> 0;
            if (object.score != null)
                if ($util.Long)
                    (message.score = $util.Long.fromValue(object.score)).unsigned = true;
                else if (typeof object.score === "string")
                    message.score = parseInt(object.score, 10);
                else if (typeof object.score === "number")
                    message.score = object.score;
                else if (typeof object.score === "object")
                    message.score = new $util.LongBits(object.score.low >>> 0, object.score.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a request_exchange message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_exchange
         * @static
         * @param {hall.request_exchange} message request_exchange
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_exchange.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.type = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.score = options.longs === String ? "0" : 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            if (message.score != null && message.hasOwnProperty("score"))
                if (typeof message.score === "number")
                    object.score = options.longs === String ? String(message.score) : message.score;
                else
                    object.score = options.longs === String ? $util.Long.prototype.toString.call(message.score) : options.longs === Number ? new $util.LongBits(message.score.low >>> 0, message.score.high >>> 0).toNumber(true) : message.score;
            return object;
        };

        /**
         * Converts this request_exchange to JSON.
         * @function toJSON
         * @memberof hall.request_exchange
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_exchange.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_exchange;
    })();

    hall.reponse_exchange_result = (function() {

        /**
         * Properties of a reponse_exchange_result.
         * @memberof hall
         * @interface Ireponse_exchange_result
         * @property {number} result_code reponse_exchange_result result_code
         * @property {number|Long} bank_score reponse_exchange_result bank_score
         * @property {string|null} [reason] reponse_exchange_result reason
         */

        /**
         * Constructs a new reponse_exchange_result.
         * @memberof hall
         * @classdesc Represents a reponse_exchange_result.
         * @implements Ireponse_exchange_result
         * @constructor
         * @param {hall.Ireponse_exchange_result=} [properties] Properties to set
         */
        function reponse_exchange_result(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * reponse_exchange_result result_code.
         * @member {number} result_code
         * @memberof hall.reponse_exchange_result
         * @instance
         */
        reponse_exchange_result.prototype.result_code = 0;

        /**
         * reponse_exchange_result bank_score.
         * @member {number|Long} bank_score
         * @memberof hall.reponse_exchange_result
         * @instance
         */
        reponse_exchange_result.prototype.bank_score = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * reponse_exchange_result reason.
         * @member {string} reason
         * @memberof hall.reponse_exchange_result
         * @instance
         */
        reponse_exchange_result.prototype.reason = "";

        /**
         * Creates a new reponse_exchange_result instance using the specified properties.
         * @function create
         * @memberof hall.reponse_exchange_result
         * @static
         * @param {hall.Ireponse_exchange_result=} [properties] Properties to set
         * @returns {hall.reponse_exchange_result} reponse_exchange_result instance
         */
        reponse_exchange_result.create = function create(properties) {
            return new reponse_exchange_result(properties);
        };

        /**
         * Encodes the specified reponse_exchange_result message. Does not implicitly {@link hall.reponse_exchange_result.verify|verify} messages.
         * @function encode
         * @memberof hall.reponse_exchange_result
         * @static
         * @param {hall.Ireponse_exchange_result} message reponse_exchange_result message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        reponse_exchange_result.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.result_code);
            writer.uint32(/* id 2, wireType 0 =*/16).sint64(message.bank_score);
            if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.reason);
            return writer;
        };

        /**
         * Encodes the specified reponse_exchange_result message, length delimited. Does not implicitly {@link hall.reponse_exchange_result.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.reponse_exchange_result
         * @static
         * @param {hall.Ireponse_exchange_result} message reponse_exchange_result message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        reponse_exchange_result.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a reponse_exchange_result message from the specified reader or buffer.
         * @function decode
         * @memberof hall.reponse_exchange_result
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.reponse_exchange_result} reponse_exchange_result
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        reponse_exchange_result.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.reponse_exchange_result();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.result_code = reader.uint32();
                    break;
                case 2:
                    message.bank_score = reader.sint64();
                    break;
                case 3:
                    message.reason = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("result_code"))
                throw $util.ProtocolError("missing required 'result_code'", { instance: message });
            if (!message.hasOwnProperty("bank_score"))
                throw $util.ProtocolError("missing required 'bank_score'", { instance: message });
            return message;
        };

        /**
         * Decodes a reponse_exchange_result message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.reponse_exchange_result
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.reponse_exchange_result} reponse_exchange_result
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        reponse_exchange_result.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a reponse_exchange_result message.
         * @function verify
         * @memberof hall.reponse_exchange_result
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        reponse_exchange_result.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.result_code))
                return "result_code: integer expected";
            if (!$util.isInteger(message.bank_score) && !(message.bank_score && $util.isInteger(message.bank_score.low) && $util.isInteger(message.bank_score.high)))
                return "bank_score: integer|Long expected";
            if (message.reason != null && message.hasOwnProperty("reason"))
                if (!$util.isString(message.reason))
                    return "reason: string expected";
            return null;
        };

        /**
         * Creates a reponse_exchange_result message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.reponse_exchange_result
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.reponse_exchange_result} reponse_exchange_result
         */
        reponse_exchange_result.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.reponse_exchange_result)
                return object;
            var message = new $root.hall.reponse_exchange_result();
            if (object.result_code != null)
                message.result_code = object.result_code >>> 0;
            if (object.bank_score != null)
                if ($util.Long)
                    (message.bank_score = $util.Long.fromValue(object.bank_score)).unsigned = false;
                else if (typeof object.bank_score === "string")
                    message.bank_score = parseInt(object.bank_score, 10);
                else if (typeof object.bank_score === "number")
                    message.bank_score = object.bank_score;
                else if (typeof object.bank_score === "object")
                    message.bank_score = new $util.LongBits(object.bank_score.low >>> 0, object.bank_score.high >>> 0).toNumber();
            if (object.reason != null)
                message.reason = String(object.reason);
            return message;
        };

        /**
         * Creates a plain object from a reponse_exchange_result message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.reponse_exchange_result
         * @static
         * @param {hall.reponse_exchange_result} message reponse_exchange_result
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        reponse_exchange_result.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result_code = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.bank_score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.bank_score = options.longs === String ? "0" : 0;
                object.reason = "";
            }
            if (message.result_code != null && message.hasOwnProperty("result_code"))
                object.result_code = message.result_code;
            if (message.bank_score != null && message.hasOwnProperty("bank_score"))
                if (typeof message.bank_score === "number")
                    object.bank_score = options.longs === String ? String(message.bank_score) : message.bank_score;
                else
                    object.bank_score = options.longs === String ? $util.Long.prototype.toString.call(message.bank_score) : options.longs === Number ? new $util.LongBits(message.bank_score.low >>> 0, message.bank_score.high >>> 0).toNumber() : message.bank_score;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            return object;
        };

        /**
         * Converts this reponse_exchange_result to JSON.
         * @function toJSON
         * @memberof hall.reponse_exchange_result
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        reponse_exchange_result.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return reponse_exchange_result;
    })();

    hall.request_exchange_record = (function() {

        /**
         * Properties of a request_exchange_record.
         * @memberof hall
         * @interface Irequest_exchange_record
         * @property {number} userid request_exchange_record userid
         * @property {string} password request_exchange_record password
         * @property {string} start_date request_exchange_record start_date
         * @property {string} end_date request_exchange_record end_date
         */

        /**
         * Constructs a new request_exchange_record.
         * @memberof hall
         * @classdesc Represents a request_exchange_record.
         * @implements Irequest_exchange_record
         * @constructor
         * @param {hall.Irequest_exchange_record=} [properties] Properties to set
         */
        function request_exchange_record(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_exchange_record userid.
         * @member {number} userid
         * @memberof hall.request_exchange_record
         * @instance
         */
        request_exchange_record.prototype.userid = 0;

        /**
         * request_exchange_record password.
         * @member {string} password
         * @memberof hall.request_exchange_record
         * @instance
         */
        request_exchange_record.prototype.password = "";

        /**
         * request_exchange_record start_date.
         * @member {string} start_date
         * @memberof hall.request_exchange_record
         * @instance
         */
        request_exchange_record.prototype.start_date = "";

        /**
         * request_exchange_record end_date.
         * @member {string} end_date
         * @memberof hall.request_exchange_record
         * @instance
         */
        request_exchange_record.prototype.end_date = "";

        /**
         * Creates a new request_exchange_record instance using the specified properties.
         * @function create
         * @memberof hall.request_exchange_record
         * @static
         * @param {hall.Irequest_exchange_record=} [properties] Properties to set
         * @returns {hall.request_exchange_record} request_exchange_record instance
         */
        request_exchange_record.create = function create(properties) {
            return new request_exchange_record(properties);
        };

        /**
         * Encodes the specified request_exchange_record message. Does not implicitly {@link hall.request_exchange_record.verify|verify} messages.
         * @function encode
         * @memberof hall.request_exchange_record
         * @static
         * @param {hall.Irequest_exchange_record} message request_exchange_record message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_exchange_record.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.start_date);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.end_date);
            return writer;
        };

        /**
         * Encodes the specified request_exchange_record message, length delimited. Does not implicitly {@link hall.request_exchange_record.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_exchange_record
         * @static
         * @param {hall.Irequest_exchange_record} message request_exchange_record message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_exchange_record.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_exchange_record message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_exchange_record
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_exchange_record} request_exchange_record
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_exchange_record.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_exchange_record();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.start_date = reader.string();
                    break;
                case 4:
                    message.end_date = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("start_date"))
                throw $util.ProtocolError("missing required 'start_date'", { instance: message });
            if (!message.hasOwnProperty("end_date"))
                throw $util.ProtocolError("missing required 'end_date'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_exchange_record message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_exchange_record
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_exchange_record} request_exchange_record
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_exchange_record.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_exchange_record message.
         * @function verify
         * @memberof hall.request_exchange_record
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_exchange_record.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isString(message.start_date))
                return "start_date: string expected";
            if (!$util.isString(message.end_date))
                return "end_date: string expected";
            return null;
        };

        /**
         * Creates a request_exchange_record message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_exchange_record
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_exchange_record} request_exchange_record
         */
        request_exchange_record.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_exchange_record)
                return object;
            var message = new $root.hall.request_exchange_record();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.start_date != null)
                message.start_date = String(object.start_date);
            if (object.end_date != null)
                message.end_date = String(object.end_date);
            return message;
        };

        /**
         * Creates a plain object from a request_exchange_record message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_exchange_record
         * @static
         * @param {hall.request_exchange_record} message request_exchange_record
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_exchange_record.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.start_date = "";
                object.end_date = "";
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.start_date != null && message.hasOwnProperty("start_date"))
                object.start_date = message.start_date;
            if (message.end_date != null && message.hasOwnProperty("end_date"))
                object.end_date = message.end_date;
            return object;
        };

        /**
         * Converts this request_exchange_record to JSON.
         * @function toJSON
         * @memberof hall.request_exchange_record
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_exchange_record.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_exchange_record;
    })();

    hall.exchange_record_item = (function() {

        /**
         * Properties of an exchange_record_item.
         * @memberof hall
         * @interface Iexchange_record_item
         * @property {number} id exchange_record_item id
         * @property {number|Long} score exchange_record_item score
         * @property {number|Long} revenue exchange_record_item revenue
         * @property {string} account exchange_record_item account
         * @property {number} state exchange_record_item state
         * @property {string} reason exchange_record_item reason
         * @property {string} insert_date exchange_record_item insert_date
         */

        /**
         * Constructs a new exchange_record_item.
         * @memberof hall
         * @classdesc Represents an exchange_record_item.
         * @implements Iexchange_record_item
         * @constructor
         * @param {hall.Iexchange_record_item=} [properties] Properties to set
         */
        function exchange_record_item(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * exchange_record_item id.
         * @member {number} id
         * @memberof hall.exchange_record_item
         * @instance
         */
        exchange_record_item.prototype.id = 0;

        /**
         * exchange_record_item score.
         * @member {number|Long} score
         * @memberof hall.exchange_record_item
         * @instance
         */
        exchange_record_item.prototype.score = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * exchange_record_item revenue.
         * @member {number|Long} revenue
         * @memberof hall.exchange_record_item
         * @instance
         */
        exchange_record_item.prototype.revenue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * exchange_record_item account.
         * @member {string} account
         * @memberof hall.exchange_record_item
         * @instance
         */
        exchange_record_item.prototype.account = "";

        /**
         * exchange_record_item state.
         * @member {number} state
         * @memberof hall.exchange_record_item
         * @instance
         */
        exchange_record_item.prototype.state = 0;

        /**
         * exchange_record_item reason.
         * @member {string} reason
         * @memberof hall.exchange_record_item
         * @instance
         */
        exchange_record_item.prototype.reason = "";

        /**
         * exchange_record_item insert_date.
         * @member {string} insert_date
         * @memberof hall.exchange_record_item
         * @instance
         */
        exchange_record_item.prototype.insert_date = "";

        /**
         * Creates a new exchange_record_item instance using the specified properties.
         * @function create
         * @memberof hall.exchange_record_item
         * @static
         * @param {hall.Iexchange_record_item=} [properties] Properties to set
         * @returns {hall.exchange_record_item} exchange_record_item instance
         */
        exchange_record_item.create = function create(properties) {
            return new exchange_record_item(properties);
        };

        /**
         * Encodes the specified exchange_record_item message. Does not implicitly {@link hall.exchange_record_item.verify|verify} messages.
         * @function encode
         * @memberof hall.exchange_record_item
         * @static
         * @param {hall.Iexchange_record_item} message exchange_record_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        exchange_record_item.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.score);
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.revenue);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.account);
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.state);
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.reason);
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.insert_date);
            return writer;
        };

        /**
         * Encodes the specified exchange_record_item message, length delimited. Does not implicitly {@link hall.exchange_record_item.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.exchange_record_item
         * @static
         * @param {hall.Iexchange_record_item} message exchange_record_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        exchange_record_item.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an exchange_record_item message from the specified reader or buffer.
         * @function decode
         * @memberof hall.exchange_record_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.exchange_record_item} exchange_record_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        exchange_record_item.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.exchange_record_item();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.score = reader.uint64();
                    break;
                case 3:
                    message.revenue = reader.uint64();
                    break;
                case 4:
                    message.account = reader.string();
                    break;
                case 5:
                    message.state = reader.uint32();
                    break;
                case 6:
                    message.reason = reader.string();
                    break;
                case 7:
                    message.insert_date = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("id"))
                throw $util.ProtocolError("missing required 'id'", { instance: message });
            if (!message.hasOwnProperty("score"))
                throw $util.ProtocolError("missing required 'score'", { instance: message });
            if (!message.hasOwnProperty("revenue"))
                throw $util.ProtocolError("missing required 'revenue'", { instance: message });
            if (!message.hasOwnProperty("account"))
                throw $util.ProtocolError("missing required 'account'", { instance: message });
            if (!message.hasOwnProperty("state"))
                throw $util.ProtocolError("missing required 'state'", { instance: message });
            if (!message.hasOwnProperty("reason"))
                throw $util.ProtocolError("missing required 'reason'", { instance: message });
            if (!message.hasOwnProperty("insert_date"))
                throw $util.ProtocolError("missing required 'insert_date'", { instance: message });
            return message;
        };

        /**
         * Decodes an exchange_record_item message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.exchange_record_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.exchange_record_item} exchange_record_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        exchange_record_item.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an exchange_record_item message.
         * @function verify
         * @memberof hall.exchange_record_item
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        exchange_record_item.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.id))
                return "id: integer expected";
            if (!$util.isInteger(message.score) && !(message.score && $util.isInteger(message.score.low) && $util.isInteger(message.score.high)))
                return "score: integer|Long expected";
            if (!$util.isInteger(message.revenue) && !(message.revenue && $util.isInteger(message.revenue.low) && $util.isInteger(message.revenue.high)))
                return "revenue: integer|Long expected";
            if (!$util.isString(message.account))
                return "account: string expected";
            if (!$util.isInteger(message.state))
                return "state: integer expected";
            if (!$util.isString(message.reason))
                return "reason: string expected";
            if (!$util.isString(message.insert_date))
                return "insert_date: string expected";
            return null;
        };

        /**
         * Creates an exchange_record_item message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.exchange_record_item
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.exchange_record_item} exchange_record_item
         */
        exchange_record_item.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.exchange_record_item)
                return object;
            var message = new $root.hall.exchange_record_item();
            if (object.id != null)
                message.id = object.id >>> 0;
            if (object.score != null)
                if ($util.Long)
                    (message.score = $util.Long.fromValue(object.score)).unsigned = true;
                else if (typeof object.score === "string")
                    message.score = parseInt(object.score, 10);
                else if (typeof object.score === "number")
                    message.score = object.score;
                else if (typeof object.score === "object")
                    message.score = new $util.LongBits(object.score.low >>> 0, object.score.high >>> 0).toNumber(true);
            if (object.revenue != null)
                if ($util.Long)
                    (message.revenue = $util.Long.fromValue(object.revenue)).unsigned = true;
                else if (typeof object.revenue === "string")
                    message.revenue = parseInt(object.revenue, 10);
                else if (typeof object.revenue === "number")
                    message.revenue = object.revenue;
                else if (typeof object.revenue === "object")
                    message.revenue = new $util.LongBits(object.revenue.low >>> 0, object.revenue.high >>> 0).toNumber(true);
            if (object.account != null)
                message.account = String(object.account);
            if (object.state != null)
                message.state = object.state >>> 0;
            if (object.reason != null)
                message.reason = String(object.reason);
            if (object.insert_date != null)
                message.insert_date = String(object.insert_date);
            return message;
        };

        /**
         * Creates a plain object from an exchange_record_item message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.exchange_record_item
         * @static
         * @param {hall.exchange_record_item} message exchange_record_item
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        exchange_record_item.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.score = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.revenue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.revenue = options.longs === String ? "0" : 0;
                object.account = "";
                object.state = 0;
                object.reason = "";
                object.insert_date = "";
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.score != null && message.hasOwnProperty("score"))
                if (typeof message.score === "number")
                    object.score = options.longs === String ? String(message.score) : message.score;
                else
                    object.score = options.longs === String ? $util.Long.prototype.toString.call(message.score) : options.longs === Number ? new $util.LongBits(message.score.low >>> 0, message.score.high >>> 0).toNumber(true) : message.score;
            if (message.revenue != null && message.hasOwnProperty("revenue"))
                if (typeof message.revenue === "number")
                    object.revenue = options.longs === String ? String(message.revenue) : message.revenue;
                else
                    object.revenue = options.longs === String ? $util.Long.prototype.toString.call(message.revenue) : options.longs === Number ? new $util.LongBits(message.revenue.low >>> 0, message.revenue.high >>> 0).toNumber(true) : message.revenue;
            if (message.account != null && message.hasOwnProperty("account"))
                object.account = message.account;
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = message.state;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            if (message.insert_date != null && message.hasOwnProperty("insert_date"))
                object.insert_date = message.insert_date;
            return object;
        };

        /**
         * Converts this exchange_record_item to JSON.
         * @function toJSON
         * @memberof hall.exchange_record_item
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        exchange_record_item.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return exchange_record_item;
    })();

    hall.reponse_exchange_record_result = (function() {

        /**
         * Properties of a reponse_exchange_record_result.
         * @memberof hall
         * @interface Ireponse_exchange_record_result
         * @property {Array.<hall.Iexchange_record_item>|null} [items] reponse_exchange_record_result items
         */

        /**
         * Constructs a new reponse_exchange_record_result.
         * @memberof hall
         * @classdesc Represents a reponse_exchange_record_result.
         * @implements Ireponse_exchange_record_result
         * @constructor
         * @param {hall.Ireponse_exchange_record_result=} [properties] Properties to set
         */
        function reponse_exchange_record_result(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * reponse_exchange_record_result items.
         * @member {Array.<hall.Iexchange_record_item>} items
         * @memberof hall.reponse_exchange_record_result
         * @instance
         */
        reponse_exchange_record_result.prototype.items = $util.emptyArray;

        /**
         * Creates a new reponse_exchange_record_result instance using the specified properties.
         * @function create
         * @memberof hall.reponse_exchange_record_result
         * @static
         * @param {hall.Ireponse_exchange_record_result=} [properties] Properties to set
         * @returns {hall.reponse_exchange_record_result} reponse_exchange_record_result instance
         */
        reponse_exchange_record_result.create = function create(properties) {
            return new reponse_exchange_record_result(properties);
        };

        /**
         * Encodes the specified reponse_exchange_record_result message. Does not implicitly {@link hall.reponse_exchange_record_result.verify|verify} messages.
         * @function encode
         * @memberof hall.reponse_exchange_record_result
         * @static
         * @param {hall.Ireponse_exchange_record_result} message reponse_exchange_record_result message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        reponse_exchange_record_result.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.hall.exchange_record_item.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified reponse_exchange_record_result message, length delimited. Does not implicitly {@link hall.reponse_exchange_record_result.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.reponse_exchange_record_result
         * @static
         * @param {hall.Ireponse_exchange_record_result} message reponse_exchange_record_result message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        reponse_exchange_record_result.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a reponse_exchange_record_result message from the specified reader or buffer.
         * @function decode
         * @memberof hall.reponse_exchange_record_result
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.reponse_exchange_record_result} reponse_exchange_record_result
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        reponse_exchange_record_result.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.reponse_exchange_record_result();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.items && message.items.length))
                        message.items = [];
                    message.items.push($root.hall.exchange_record_item.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a reponse_exchange_record_result message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.reponse_exchange_record_result
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.reponse_exchange_record_result} reponse_exchange_record_result
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        reponse_exchange_record_result.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a reponse_exchange_record_result message.
         * @function verify
         * @memberof hall.reponse_exchange_record_result
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        reponse_exchange_record_result.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.hall.exchange_record_item.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a reponse_exchange_record_result message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.reponse_exchange_record_result
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.reponse_exchange_record_result} reponse_exchange_record_result
         */
        reponse_exchange_record_result.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.reponse_exchange_record_result)
                return object;
            var message = new $root.hall.reponse_exchange_record_result();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".hall.reponse_exchange_record_result.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".hall.reponse_exchange_record_result.items: object expected");
                    message.items[i] = $root.hall.exchange_record_item.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a reponse_exchange_record_result message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.reponse_exchange_record_result
         * @static
         * @param {hall.reponse_exchange_record_result} message reponse_exchange_record_result
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        reponse_exchange_record_result.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.hall.exchange_record_item.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this reponse_exchange_record_result to JSON.
         * @function toJSON
         * @memberof hall.reponse_exchange_record_result
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        reponse_exchange_record_result.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return reponse_exchange_record_result;
    })();

    hall.request_recharge_record = (function() {

        /**
         * Properties of a request_recharge_record.
         * @memberof hall
         * @interface Irequest_recharge_record
         * @property {number} userid request_recharge_record userid
         * @property {string} password request_recharge_record password
         * @property {string} start_date request_recharge_record start_date
         * @property {string} end_date request_recharge_record end_date
         */

        /**
         * Constructs a new request_recharge_record.
         * @memberof hall
         * @classdesc Represents a request_recharge_record.
         * @implements Irequest_recharge_record
         * @constructor
         * @param {hall.Irequest_recharge_record=} [properties] Properties to set
         */
        function request_recharge_record(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_recharge_record userid.
         * @member {number} userid
         * @memberof hall.request_recharge_record
         * @instance
         */
        request_recharge_record.prototype.userid = 0;

        /**
         * request_recharge_record password.
         * @member {string} password
         * @memberof hall.request_recharge_record
         * @instance
         */
        request_recharge_record.prototype.password = "";

        /**
         * request_recharge_record start_date.
         * @member {string} start_date
         * @memberof hall.request_recharge_record
         * @instance
         */
        request_recharge_record.prototype.start_date = "";

        /**
         * request_recharge_record end_date.
         * @member {string} end_date
         * @memberof hall.request_recharge_record
         * @instance
         */
        request_recharge_record.prototype.end_date = "";

        /**
         * Creates a new request_recharge_record instance using the specified properties.
         * @function create
         * @memberof hall.request_recharge_record
         * @static
         * @param {hall.Irequest_recharge_record=} [properties] Properties to set
         * @returns {hall.request_recharge_record} request_recharge_record instance
         */
        request_recharge_record.create = function create(properties) {
            return new request_recharge_record(properties);
        };

        /**
         * Encodes the specified request_recharge_record message. Does not implicitly {@link hall.request_recharge_record.verify|verify} messages.
         * @function encode
         * @memberof hall.request_recharge_record
         * @static
         * @param {hall.Irequest_recharge_record} message request_recharge_record message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_recharge_record.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.start_date);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.end_date);
            return writer;
        };

        /**
         * Encodes the specified request_recharge_record message, length delimited. Does not implicitly {@link hall.request_recharge_record.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_recharge_record
         * @static
         * @param {hall.Irequest_recharge_record} message request_recharge_record message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_recharge_record.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_recharge_record message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_recharge_record
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_recharge_record} request_recharge_record
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_recharge_record.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_recharge_record();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.start_date = reader.string();
                    break;
                case 4:
                    message.end_date = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("start_date"))
                throw $util.ProtocolError("missing required 'start_date'", { instance: message });
            if (!message.hasOwnProperty("end_date"))
                throw $util.ProtocolError("missing required 'end_date'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_recharge_record message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_recharge_record
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_recharge_record} request_recharge_record
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_recharge_record.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_recharge_record message.
         * @function verify
         * @memberof hall.request_recharge_record
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_recharge_record.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isString(message.start_date))
                return "start_date: string expected";
            if (!$util.isString(message.end_date))
                return "end_date: string expected";
            return null;
        };

        /**
         * Creates a request_recharge_record message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_recharge_record
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_recharge_record} request_recharge_record
         */
        request_recharge_record.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_recharge_record)
                return object;
            var message = new $root.hall.request_recharge_record();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.start_date != null)
                message.start_date = String(object.start_date);
            if (object.end_date != null)
                message.end_date = String(object.end_date);
            return message;
        };

        /**
         * Creates a plain object from a request_recharge_record message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_recharge_record
         * @static
         * @param {hall.request_recharge_record} message request_recharge_record
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_recharge_record.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.start_date = "";
                object.end_date = "";
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.start_date != null && message.hasOwnProperty("start_date"))
                object.start_date = message.start_date;
            if (message.end_date != null && message.hasOwnProperty("end_date"))
                object.end_date = message.end_date;
            return object;
        };

        /**
         * Converts this request_recharge_record to JSON.
         * @function toJSON
         * @memberof hall.request_recharge_record
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_recharge_record.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_recharge_record;
    })();

    hall.recharge_record_item = (function() {

        /**
         * Properties of a recharge_record_item.
         * @memberof hall
         * @interface Irecharge_record_item
         * @property {string} insert_date recharge_record_item insert_date
         * @property {string} order_no recharge_record_item order_no
         * @property {string} channel recharge_record_item channel
         * @property {number|Long} pay_amount recharge_record_item pay_amount
         * @property {number|Long} real_amount recharge_record_item real_amount
         * @property {number} state recharge_record_item state
         */

        /**
         * Constructs a new recharge_record_item.
         * @memberof hall
         * @classdesc Represents a recharge_record_item.
         * @implements Irecharge_record_item
         * @constructor
         * @param {hall.Irecharge_record_item=} [properties] Properties to set
         */
        function recharge_record_item(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * recharge_record_item insert_date.
         * @member {string} insert_date
         * @memberof hall.recharge_record_item
         * @instance
         */
        recharge_record_item.prototype.insert_date = "";

        /**
         * recharge_record_item order_no.
         * @member {string} order_no
         * @memberof hall.recharge_record_item
         * @instance
         */
        recharge_record_item.prototype.order_no = "";

        /**
         * recharge_record_item channel.
         * @member {string} channel
         * @memberof hall.recharge_record_item
         * @instance
         */
        recharge_record_item.prototype.channel = "";

        /**
         * recharge_record_item pay_amount.
         * @member {number|Long} pay_amount
         * @memberof hall.recharge_record_item
         * @instance
         */
        recharge_record_item.prototype.pay_amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * recharge_record_item real_amount.
         * @member {number|Long} real_amount
         * @memberof hall.recharge_record_item
         * @instance
         */
        recharge_record_item.prototype.real_amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * recharge_record_item state.
         * @member {number} state
         * @memberof hall.recharge_record_item
         * @instance
         */
        recharge_record_item.prototype.state = 0;

        /**
         * Creates a new recharge_record_item instance using the specified properties.
         * @function create
         * @memberof hall.recharge_record_item
         * @static
         * @param {hall.Irecharge_record_item=} [properties] Properties to set
         * @returns {hall.recharge_record_item} recharge_record_item instance
         */
        recharge_record_item.create = function create(properties) {
            return new recharge_record_item(properties);
        };

        /**
         * Encodes the specified recharge_record_item message. Does not implicitly {@link hall.recharge_record_item.verify|verify} messages.
         * @function encode
         * @memberof hall.recharge_record_item
         * @static
         * @param {hall.Irecharge_record_item} message recharge_record_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        recharge_record_item.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.insert_date);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.order_no);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.channel);
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.pay_amount);
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.real_amount);
            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.state);
            return writer;
        };

        /**
         * Encodes the specified recharge_record_item message, length delimited. Does not implicitly {@link hall.recharge_record_item.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.recharge_record_item
         * @static
         * @param {hall.Irecharge_record_item} message recharge_record_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        recharge_record_item.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a recharge_record_item message from the specified reader or buffer.
         * @function decode
         * @memberof hall.recharge_record_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.recharge_record_item} recharge_record_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        recharge_record_item.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.recharge_record_item();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.insert_date = reader.string();
                    break;
                case 2:
                    message.order_no = reader.string();
                    break;
                case 3:
                    message.channel = reader.string();
                    break;
                case 4:
                    message.pay_amount = reader.uint64();
                    break;
                case 5:
                    message.real_amount = reader.uint64();
                    break;
                case 6:
                    message.state = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("insert_date"))
                throw $util.ProtocolError("missing required 'insert_date'", { instance: message });
            if (!message.hasOwnProperty("order_no"))
                throw $util.ProtocolError("missing required 'order_no'", { instance: message });
            if (!message.hasOwnProperty("channel"))
                throw $util.ProtocolError("missing required 'channel'", { instance: message });
            if (!message.hasOwnProperty("pay_amount"))
                throw $util.ProtocolError("missing required 'pay_amount'", { instance: message });
            if (!message.hasOwnProperty("real_amount"))
                throw $util.ProtocolError("missing required 'real_amount'", { instance: message });
            if (!message.hasOwnProperty("state"))
                throw $util.ProtocolError("missing required 'state'", { instance: message });
            return message;
        };

        /**
         * Decodes a recharge_record_item message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.recharge_record_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.recharge_record_item} recharge_record_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        recharge_record_item.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a recharge_record_item message.
         * @function verify
         * @memberof hall.recharge_record_item
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        recharge_record_item.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isString(message.insert_date))
                return "insert_date: string expected";
            if (!$util.isString(message.order_no))
                return "order_no: string expected";
            if (!$util.isString(message.channel))
                return "channel: string expected";
            if (!$util.isInteger(message.pay_amount) && !(message.pay_amount && $util.isInteger(message.pay_amount.low) && $util.isInteger(message.pay_amount.high)))
                return "pay_amount: integer|Long expected";
            if (!$util.isInteger(message.real_amount) && !(message.real_amount && $util.isInteger(message.real_amount.low) && $util.isInteger(message.real_amount.high)))
                return "real_amount: integer|Long expected";
            if (!$util.isInteger(message.state))
                return "state: integer expected";
            return null;
        };

        /**
         * Creates a recharge_record_item message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.recharge_record_item
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.recharge_record_item} recharge_record_item
         */
        recharge_record_item.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.recharge_record_item)
                return object;
            var message = new $root.hall.recharge_record_item();
            if (object.insert_date != null)
                message.insert_date = String(object.insert_date);
            if (object.order_no != null)
                message.order_no = String(object.order_no);
            if (object.channel != null)
                message.channel = String(object.channel);
            if (object.pay_amount != null)
                if ($util.Long)
                    (message.pay_amount = $util.Long.fromValue(object.pay_amount)).unsigned = true;
                else if (typeof object.pay_amount === "string")
                    message.pay_amount = parseInt(object.pay_amount, 10);
                else if (typeof object.pay_amount === "number")
                    message.pay_amount = object.pay_amount;
                else if (typeof object.pay_amount === "object")
                    message.pay_amount = new $util.LongBits(object.pay_amount.low >>> 0, object.pay_amount.high >>> 0).toNumber(true);
            if (object.real_amount != null)
                if ($util.Long)
                    (message.real_amount = $util.Long.fromValue(object.real_amount)).unsigned = true;
                else if (typeof object.real_amount === "string")
                    message.real_amount = parseInt(object.real_amount, 10);
                else if (typeof object.real_amount === "number")
                    message.real_amount = object.real_amount;
                else if (typeof object.real_amount === "object")
                    message.real_amount = new $util.LongBits(object.real_amount.low >>> 0, object.real_amount.high >>> 0).toNumber(true);
            if (object.state != null)
                message.state = object.state >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a recharge_record_item message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.recharge_record_item
         * @static
         * @param {hall.recharge_record_item} message recharge_record_item
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        recharge_record_item.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.insert_date = "";
                object.order_no = "";
                object.channel = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.pay_amount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.pay_amount = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.real_amount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.real_amount = options.longs === String ? "0" : 0;
                object.state = 0;
            }
            if (message.insert_date != null && message.hasOwnProperty("insert_date"))
                object.insert_date = message.insert_date;
            if (message.order_no != null && message.hasOwnProperty("order_no"))
                object.order_no = message.order_no;
            if (message.channel != null && message.hasOwnProperty("channel"))
                object.channel = message.channel;
            if (message.pay_amount != null && message.hasOwnProperty("pay_amount"))
                if (typeof message.pay_amount === "number")
                    object.pay_amount = options.longs === String ? String(message.pay_amount) : message.pay_amount;
                else
                    object.pay_amount = options.longs === String ? $util.Long.prototype.toString.call(message.pay_amount) : options.longs === Number ? new $util.LongBits(message.pay_amount.low >>> 0, message.pay_amount.high >>> 0).toNumber(true) : message.pay_amount;
            if (message.real_amount != null && message.hasOwnProperty("real_amount"))
                if (typeof message.real_amount === "number")
                    object.real_amount = options.longs === String ? String(message.real_amount) : message.real_amount;
                else
                    object.real_amount = options.longs === String ? $util.Long.prototype.toString.call(message.real_amount) : options.longs === Number ? new $util.LongBits(message.real_amount.low >>> 0, message.real_amount.high >>> 0).toNumber(true) : message.real_amount;
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = message.state;
            return object;
        };

        /**
         * Converts this recharge_record_item to JSON.
         * @function toJSON
         * @memberof hall.recharge_record_item
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        recharge_record_item.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return recharge_record_item;
    })();

    hall.reponse_recharge_record_result = (function() {

        /**
         * Properties of a reponse_recharge_record_result.
         * @memberof hall
         * @interface Ireponse_recharge_record_result
         * @property {Array.<hall.Irecharge_record_item>|null} [items] reponse_recharge_record_result items
         */

        /**
         * Constructs a new reponse_recharge_record_result.
         * @memberof hall
         * @classdesc Represents a reponse_recharge_record_result.
         * @implements Ireponse_recharge_record_result
         * @constructor
         * @param {hall.Ireponse_recharge_record_result=} [properties] Properties to set
         */
        function reponse_recharge_record_result(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * reponse_recharge_record_result items.
         * @member {Array.<hall.Irecharge_record_item>} items
         * @memberof hall.reponse_recharge_record_result
         * @instance
         */
        reponse_recharge_record_result.prototype.items = $util.emptyArray;

        /**
         * Creates a new reponse_recharge_record_result instance using the specified properties.
         * @function create
         * @memberof hall.reponse_recharge_record_result
         * @static
         * @param {hall.Ireponse_recharge_record_result=} [properties] Properties to set
         * @returns {hall.reponse_recharge_record_result} reponse_recharge_record_result instance
         */
        reponse_recharge_record_result.create = function create(properties) {
            return new reponse_recharge_record_result(properties);
        };

        /**
         * Encodes the specified reponse_recharge_record_result message. Does not implicitly {@link hall.reponse_recharge_record_result.verify|verify} messages.
         * @function encode
         * @memberof hall.reponse_recharge_record_result
         * @static
         * @param {hall.Ireponse_recharge_record_result} message reponse_recharge_record_result message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        reponse_recharge_record_result.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.hall.recharge_record_item.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified reponse_recharge_record_result message, length delimited. Does not implicitly {@link hall.reponse_recharge_record_result.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.reponse_recharge_record_result
         * @static
         * @param {hall.Ireponse_recharge_record_result} message reponse_recharge_record_result message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        reponse_recharge_record_result.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a reponse_recharge_record_result message from the specified reader or buffer.
         * @function decode
         * @memberof hall.reponse_recharge_record_result
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.reponse_recharge_record_result} reponse_recharge_record_result
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        reponse_recharge_record_result.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.reponse_recharge_record_result();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.items && message.items.length))
                        message.items = [];
                    message.items.push($root.hall.recharge_record_item.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a reponse_recharge_record_result message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.reponse_recharge_record_result
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.reponse_recharge_record_result} reponse_recharge_record_result
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        reponse_recharge_record_result.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a reponse_recharge_record_result message.
         * @function verify
         * @memberof hall.reponse_recharge_record_result
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        reponse_recharge_record_result.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.hall.recharge_record_item.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a reponse_recharge_record_result message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.reponse_recharge_record_result
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.reponse_recharge_record_result} reponse_recharge_record_result
         */
        reponse_recharge_record_result.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.reponse_recharge_record_result)
                return object;
            var message = new $root.hall.reponse_recharge_record_result();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".hall.reponse_recharge_record_result.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".hall.reponse_recharge_record_result.items: object expected");
                    message.items[i] = $root.hall.recharge_record_item.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a reponse_recharge_record_result message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.reponse_recharge_record_result
         * @static
         * @param {hall.reponse_recharge_record_result} message reponse_recharge_record_result
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        reponse_recharge_record_result.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.hall.recharge_record_item.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this reponse_recharge_record_result to JSON.
         * @function toJSON
         * @memberof hall.reponse_recharge_record_result
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        reponse_recharge_record_result.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return reponse_recharge_record_result;
    })();

    hall.request_user_message_deal = (function() {

        /**
         * Properties of a request_user_message_deal.
         * @memberof hall
         * @interface Irequest_user_message_deal
         * @property {number} userid request_user_message_deal userid
         * @property {string} password request_user_message_deal password
         * @property {number} id request_user_message_deal id
         * @property {number} deal request_user_message_deal deal
         */

        /**
         * Constructs a new request_user_message_deal.
         * @memberof hall
         * @classdesc Represents a request_user_message_deal.
         * @implements Irequest_user_message_deal
         * @constructor
         * @param {hall.Irequest_user_message_deal=} [properties] Properties to set
         */
        function request_user_message_deal(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_user_message_deal userid.
         * @member {number} userid
         * @memberof hall.request_user_message_deal
         * @instance
         */
        request_user_message_deal.prototype.userid = 0;

        /**
         * request_user_message_deal password.
         * @member {string} password
         * @memberof hall.request_user_message_deal
         * @instance
         */
        request_user_message_deal.prototype.password = "";

        /**
         * request_user_message_deal id.
         * @member {number} id
         * @memberof hall.request_user_message_deal
         * @instance
         */
        request_user_message_deal.prototype.id = 0;

        /**
         * request_user_message_deal deal.
         * @member {number} deal
         * @memberof hall.request_user_message_deal
         * @instance
         */
        request_user_message_deal.prototype.deal = 0;

        /**
         * Creates a new request_user_message_deal instance using the specified properties.
         * @function create
         * @memberof hall.request_user_message_deal
         * @static
         * @param {hall.Irequest_user_message_deal=} [properties] Properties to set
         * @returns {hall.request_user_message_deal} request_user_message_deal instance
         */
        request_user_message_deal.create = function create(properties) {
            return new request_user_message_deal(properties);
        };

        /**
         * Encodes the specified request_user_message_deal message. Does not implicitly {@link hall.request_user_message_deal.verify|verify} messages.
         * @function encode
         * @memberof hall.request_user_message_deal
         * @static
         * @param {hall.Irequest_user_message_deal} message request_user_message_deal message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_user_message_deal.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.id);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.deal);
            return writer;
        };

        /**
         * Encodes the specified request_user_message_deal message, length delimited. Does not implicitly {@link hall.request_user_message_deal.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_user_message_deal
         * @static
         * @param {hall.Irequest_user_message_deal} message request_user_message_deal message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_user_message_deal.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_user_message_deal message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_user_message_deal
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_user_message_deal} request_user_message_deal
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_user_message_deal.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_user_message_deal();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.id = reader.uint32();
                    break;
                case 4:
                    message.deal = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("id"))
                throw $util.ProtocolError("missing required 'id'", { instance: message });
            if (!message.hasOwnProperty("deal"))
                throw $util.ProtocolError("missing required 'deal'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_user_message_deal message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_user_message_deal
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_user_message_deal} request_user_message_deal
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_user_message_deal.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_user_message_deal message.
         * @function verify
         * @memberof hall.request_user_message_deal
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_user_message_deal.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isInteger(message.id))
                return "id: integer expected";
            if (!$util.isInteger(message.deal))
                return "deal: integer expected";
            return null;
        };

        /**
         * Creates a request_user_message_deal message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_user_message_deal
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_user_message_deal} request_user_message_deal
         */
        request_user_message_deal.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_user_message_deal)
                return object;
            var message = new $root.hall.request_user_message_deal();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.id != null)
                message.id = object.id >>> 0;
            if (object.deal != null)
                message.deal = object.deal >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a request_user_message_deal message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_user_message_deal
         * @static
         * @param {hall.request_user_message_deal} message request_user_message_deal
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_user_message_deal.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.id = 0;
                object.deal = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.deal != null && message.hasOwnProperty("deal"))
                object.deal = message.deal;
            return object;
        };

        /**
         * Converts this request_user_message_deal to JSON.
         * @function toJSON
         * @memberof hall.request_user_message_deal
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_user_message_deal.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_user_message_deal;
    })();

    hall.request_user_message = (function() {

        /**
         * Properties of a request_user_message.
         * @memberof hall
         * @interface Irequest_user_message
         * @property {number} userid request_user_message userid
         * @property {string} password request_user_message password
         */

        /**
         * Constructs a new request_user_message.
         * @memberof hall
         * @classdesc Represents a request_user_message.
         * @implements Irequest_user_message
         * @constructor
         * @param {hall.Irequest_user_message=} [properties] Properties to set
         */
        function request_user_message(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_user_message userid.
         * @member {number} userid
         * @memberof hall.request_user_message
         * @instance
         */
        request_user_message.prototype.userid = 0;

        /**
         * request_user_message password.
         * @member {string} password
         * @memberof hall.request_user_message
         * @instance
         */
        request_user_message.prototype.password = "";

        /**
         * Creates a new request_user_message instance using the specified properties.
         * @function create
         * @memberof hall.request_user_message
         * @static
         * @param {hall.Irequest_user_message=} [properties] Properties to set
         * @returns {hall.request_user_message} request_user_message instance
         */
        request_user_message.create = function create(properties) {
            return new request_user_message(properties);
        };

        /**
         * Encodes the specified request_user_message message. Does not implicitly {@link hall.request_user_message.verify|verify} messages.
         * @function encode
         * @memberof hall.request_user_message
         * @static
         * @param {hall.Irequest_user_message} message request_user_message message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_user_message.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            return writer;
        };

        /**
         * Encodes the specified request_user_message message, length delimited. Does not implicitly {@link hall.request_user_message.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_user_message
         * @static
         * @param {hall.Irequest_user_message} message request_user_message message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_user_message.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_user_message message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_user_message
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_user_message} request_user_message
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_user_message.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_user_message();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_user_message message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_user_message
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_user_message} request_user_message
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_user_message.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_user_message message.
         * @function verify
         * @memberof hall.request_user_message
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_user_message.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            return null;
        };

        /**
         * Creates a request_user_message message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_user_message
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_user_message} request_user_message
         */
        request_user_message.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_user_message)
                return object;
            var message = new $root.hall.request_user_message();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            return message;
        };

        /**
         * Creates a plain object from a request_user_message message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_user_message
         * @static
         * @param {hall.request_user_message} message request_user_message
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_user_message.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            return object;
        };

        /**
         * Converts this request_user_message to JSON.
         * @function toJSON
         * @memberof hall.request_user_message
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_user_message.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_user_message;
    })();

    hall.user_message_item = (function() {

        /**
         * Properties of a user_message_item.
         * @memberof hall
         * @interface Iuser_message_item
         * @property {number} id user_message_item id
         * @property {string} title user_message_item title
         * @property {string} message user_message_item message
         * @property {number} readed user_message_item readed
         * @property {string} insert_date user_message_item insert_date
         */

        /**
         * Constructs a new user_message_item.
         * @memberof hall
         * @classdesc Represents a user_message_item.
         * @implements Iuser_message_item
         * @constructor
         * @param {hall.Iuser_message_item=} [properties] Properties to set
         */
        function user_message_item(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * user_message_item id.
         * @member {number} id
         * @memberof hall.user_message_item
         * @instance
         */
        user_message_item.prototype.id = 0;

        /**
         * user_message_item title.
         * @member {string} title
         * @memberof hall.user_message_item
         * @instance
         */
        user_message_item.prototype.title = "";

        /**
         * user_message_item message.
         * @member {string} message
         * @memberof hall.user_message_item
         * @instance
         */
        user_message_item.prototype.message = "";

        /**
         * user_message_item readed.
         * @member {number} readed
         * @memberof hall.user_message_item
         * @instance
         */
        user_message_item.prototype.readed = 0;

        /**
         * user_message_item insert_date.
         * @member {string} insert_date
         * @memberof hall.user_message_item
         * @instance
         */
        user_message_item.prototype.insert_date = "";

        /**
         * Creates a new user_message_item instance using the specified properties.
         * @function create
         * @memberof hall.user_message_item
         * @static
         * @param {hall.Iuser_message_item=} [properties] Properties to set
         * @returns {hall.user_message_item} user_message_item instance
         */
        user_message_item.create = function create(properties) {
            return new user_message_item(properties);
        };

        /**
         * Encodes the specified user_message_item message. Does not implicitly {@link hall.user_message_item.verify|verify} messages.
         * @function encode
         * @memberof hall.user_message_item
         * @static
         * @param {hall.Iuser_message_item} message user_message_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        user_message_item.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.message);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.readed);
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.insert_date);
            return writer;
        };

        /**
         * Encodes the specified user_message_item message, length delimited. Does not implicitly {@link hall.user_message_item.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.user_message_item
         * @static
         * @param {hall.Iuser_message_item} message user_message_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        user_message_item.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a user_message_item message from the specified reader or buffer.
         * @function decode
         * @memberof hall.user_message_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.user_message_item} user_message_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        user_message_item.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.user_message_item();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.title = reader.string();
                    break;
                case 3:
                    message.message = reader.string();
                    break;
                case 4:
                    message.readed = reader.uint32();
                    break;
                case 5:
                    message.insert_date = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("id"))
                throw $util.ProtocolError("missing required 'id'", { instance: message });
            if (!message.hasOwnProperty("title"))
                throw $util.ProtocolError("missing required 'title'", { instance: message });
            if (!message.hasOwnProperty("message"))
                throw $util.ProtocolError("missing required 'message'", { instance: message });
            if (!message.hasOwnProperty("readed"))
                throw $util.ProtocolError("missing required 'readed'", { instance: message });
            if (!message.hasOwnProperty("insert_date"))
                throw $util.ProtocolError("missing required 'insert_date'", { instance: message });
            return message;
        };

        /**
         * Decodes a user_message_item message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.user_message_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.user_message_item} user_message_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        user_message_item.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a user_message_item message.
         * @function verify
         * @memberof hall.user_message_item
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        user_message_item.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.id))
                return "id: integer expected";
            if (!$util.isString(message.title))
                return "title: string expected";
            if (!$util.isString(message.message))
                return "message: string expected";
            if (!$util.isInteger(message.readed))
                return "readed: integer expected";
            if (!$util.isString(message.insert_date))
                return "insert_date: string expected";
            return null;
        };

        /**
         * Creates a user_message_item message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.user_message_item
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.user_message_item} user_message_item
         */
        user_message_item.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.user_message_item)
                return object;
            var message = new $root.hall.user_message_item();
            if (object.id != null)
                message.id = object.id >>> 0;
            if (object.title != null)
                message.title = String(object.title);
            if (object.message != null)
                message.message = String(object.message);
            if (object.readed != null)
                message.readed = object.readed >>> 0;
            if (object.insert_date != null)
                message.insert_date = String(object.insert_date);
            return message;
        };

        /**
         * Creates a plain object from a user_message_item message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.user_message_item
         * @static
         * @param {hall.user_message_item} message user_message_item
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        user_message_item.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.title = "";
                object.message = "";
                object.readed = 0;
                object.insert_date = "";
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.title != null && message.hasOwnProperty("title"))
                object.title = message.title;
            if (message.message != null && message.hasOwnProperty("message"))
                object.message = message.message;
            if (message.readed != null && message.hasOwnProperty("readed"))
                object.readed = message.readed;
            if (message.insert_date != null && message.hasOwnProperty("insert_date"))
                object.insert_date = message.insert_date;
            return object;
        };

        /**
         * Converts this user_message_item to JSON.
         * @function toJSON
         * @memberof hall.user_message_item
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        user_message_item.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return user_message_item;
    })();

    hall.notify_user_message = (function() {

        /**
         * Properties of a notify_user_message.
         * @memberof hall
         * @interface Inotify_user_message
         * @property {Array.<hall.Iuser_message_item>|null} [items] notify_user_message items
         */

        /**
         * Constructs a new notify_user_message.
         * @memberof hall
         * @classdesc Represents a notify_user_message.
         * @implements Inotify_user_message
         * @constructor
         * @param {hall.Inotify_user_message=} [properties] Properties to set
         */
        function notify_user_message(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * notify_user_message items.
         * @member {Array.<hall.Iuser_message_item>} items
         * @memberof hall.notify_user_message
         * @instance
         */
        notify_user_message.prototype.items = $util.emptyArray;

        /**
         * Creates a new notify_user_message instance using the specified properties.
         * @function create
         * @memberof hall.notify_user_message
         * @static
         * @param {hall.Inotify_user_message=} [properties] Properties to set
         * @returns {hall.notify_user_message} notify_user_message instance
         */
        notify_user_message.create = function create(properties) {
            return new notify_user_message(properties);
        };

        /**
         * Encodes the specified notify_user_message message. Does not implicitly {@link hall.notify_user_message.verify|verify} messages.
         * @function encode
         * @memberof hall.notify_user_message
         * @static
         * @param {hall.Inotify_user_message} message notify_user_message message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_user_message.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.hall.user_message_item.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified notify_user_message message, length delimited. Does not implicitly {@link hall.notify_user_message.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.notify_user_message
         * @static
         * @param {hall.Inotify_user_message} message notify_user_message message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_user_message.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a notify_user_message message from the specified reader or buffer.
         * @function decode
         * @memberof hall.notify_user_message
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.notify_user_message} notify_user_message
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_user_message.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.notify_user_message();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.items && message.items.length))
                        message.items = [];
                    message.items.push($root.hall.user_message_item.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a notify_user_message message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.notify_user_message
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.notify_user_message} notify_user_message
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_user_message.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a notify_user_message message.
         * @function verify
         * @memberof hall.notify_user_message
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        notify_user_message.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.hall.user_message_item.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a notify_user_message message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.notify_user_message
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.notify_user_message} notify_user_message
         */
        notify_user_message.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.notify_user_message)
                return object;
            var message = new $root.hall.notify_user_message();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".hall.notify_user_message.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".hall.notify_user_message.items: object expected");
                    message.items[i] = $root.hall.user_message_item.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a notify_user_message message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.notify_user_message
         * @static
         * @param {hall.notify_user_message} message notify_user_message
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        notify_user_message.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.hall.user_message_item.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this notify_user_message to JSON.
         * @function toJSON
         * @memberof hall.notify_user_message
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        notify_user_message.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return notify_user_message;
    })();

    hall.request_team_create_club = (function() {

        /**
         * Properties of a request_team_create_club.
         * @memberof hall
         * @interface Irequest_team_create_club
         * @property {number} userid request_team_create_club userid
         * @property {string} password request_team_create_club password
         * @property {string} clubname request_team_create_club clubname
         * @property {boolean} join_auth request_team_create_club join_auth
         */

        /**
         * Constructs a new request_team_create_club.
         * @memberof hall
         * @classdesc Represents a request_team_create_club.
         * @implements Irequest_team_create_club
         * @constructor
         * @param {hall.Irequest_team_create_club=} [properties] Properties to set
         */
        function request_team_create_club(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_team_create_club userid.
         * @member {number} userid
         * @memberof hall.request_team_create_club
         * @instance
         */
        request_team_create_club.prototype.userid = 0;

        /**
         * request_team_create_club password.
         * @member {string} password
         * @memberof hall.request_team_create_club
         * @instance
         */
        request_team_create_club.prototype.password = "";

        /**
         * request_team_create_club clubname.
         * @member {string} clubname
         * @memberof hall.request_team_create_club
         * @instance
         */
        request_team_create_club.prototype.clubname = "";

        /**
         * request_team_create_club join_auth.
         * @member {boolean} join_auth
         * @memberof hall.request_team_create_club
         * @instance
         */
        request_team_create_club.prototype.join_auth = false;

        /**
         * Creates a new request_team_create_club instance using the specified properties.
         * @function create
         * @memberof hall.request_team_create_club
         * @static
         * @param {hall.Irequest_team_create_club=} [properties] Properties to set
         * @returns {hall.request_team_create_club} request_team_create_club instance
         */
        request_team_create_club.create = function create(properties) {
            return new request_team_create_club(properties);
        };

        /**
         * Encodes the specified request_team_create_club message. Does not implicitly {@link hall.request_team_create_club.verify|verify} messages.
         * @function encode
         * @memberof hall.request_team_create_club
         * @static
         * @param {hall.Irequest_team_create_club} message request_team_create_club message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_create_club.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.clubname);
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.join_auth);
            return writer;
        };

        /**
         * Encodes the specified request_team_create_club message, length delimited. Does not implicitly {@link hall.request_team_create_club.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_team_create_club
         * @static
         * @param {hall.Irequest_team_create_club} message request_team_create_club message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_create_club.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_team_create_club message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_team_create_club
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_team_create_club} request_team_create_club
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_create_club.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_team_create_club();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.clubname = reader.string();
                    break;
                case 4:
                    message.join_auth = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("clubname"))
                throw $util.ProtocolError("missing required 'clubname'", { instance: message });
            if (!message.hasOwnProperty("join_auth"))
                throw $util.ProtocolError("missing required 'join_auth'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_team_create_club message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_team_create_club
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_team_create_club} request_team_create_club
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_create_club.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_team_create_club message.
         * @function verify
         * @memberof hall.request_team_create_club
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_team_create_club.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isString(message.clubname))
                return "clubname: string expected";
            if (typeof message.join_auth !== "boolean")
                return "join_auth: boolean expected";
            return null;
        };

        /**
         * Creates a request_team_create_club message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_team_create_club
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_team_create_club} request_team_create_club
         */
        request_team_create_club.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_team_create_club)
                return object;
            var message = new $root.hall.request_team_create_club();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.clubname != null)
                message.clubname = String(object.clubname);
            if (object.join_auth != null)
                message.join_auth = Boolean(object.join_auth);
            return message;
        };

        /**
         * Creates a plain object from a request_team_create_club message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_team_create_club
         * @static
         * @param {hall.request_team_create_club} message request_team_create_club
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_team_create_club.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.clubname = "";
                object.join_auth = false;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.clubname != null && message.hasOwnProperty("clubname"))
                object.clubname = message.clubname;
            if (message.join_auth != null && message.hasOwnProperty("join_auth"))
                object.join_auth = message.join_auth;
            return object;
        };

        /**
         * Converts this request_team_create_club to JSON.
         * @function toJSON
         * @memberof hall.request_team_create_club
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_team_create_club.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_team_create_club;
    })();

    hall.response_team_create_club = (function() {

        /**
         * Properties of a response_team_create_club.
         * @memberof hall
         * @interface Iresponse_team_create_club
         * @property {number} result_code response_team_create_club result_code
         * @property {string|null} [reason] response_team_create_club reason
         * @property {hall.Iclub_info_item|null} [club_info] response_team_create_club club_info
         */

        /**
         * Constructs a new response_team_create_club.
         * @memberof hall
         * @classdesc Represents a response_team_create_club.
         * @implements Iresponse_team_create_club
         * @constructor
         * @param {hall.Iresponse_team_create_club=} [properties] Properties to set
         */
        function response_team_create_club(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_team_create_club result_code.
         * @member {number} result_code
         * @memberof hall.response_team_create_club
         * @instance
         */
        response_team_create_club.prototype.result_code = 0;

        /**
         * response_team_create_club reason.
         * @member {string} reason
         * @memberof hall.response_team_create_club
         * @instance
         */
        response_team_create_club.prototype.reason = "";

        /**
         * response_team_create_club club_info.
         * @member {hall.Iclub_info_item|null|undefined} club_info
         * @memberof hall.response_team_create_club
         * @instance
         */
        response_team_create_club.prototype.club_info = null;

        /**
         * Creates a new response_team_create_club instance using the specified properties.
         * @function create
         * @memberof hall.response_team_create_club
         * @static
         * @param {hall.Iresponse_team_create_club=} [properties] Properties to set
         * @returns {hall.response_team_create_club} response_team_create_club instance
         */
        response_team_create_club.create = function create(properties) {
            return new response_team_create_club(properties);
        };

        /**
         * Encodes the specified response_team_create_club message. Does not implicitly {@link hall.response_team_create_club.verify|verify} messages.
         * @function encode
         * @memberof hall.response_team_create_club
         * @static
         * @param {hall.Iresponse_team_create_club} message response_team_create_club message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_create_club.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.result_code);
            if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.reason);
            if (message.club_info != null && Object.hasOwnProperty.call(message, "club_info"))
                $root.hall.club_info_item.encode(message.club_info, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified response_team_create_club message, length delimited. Does not implicitly {@link hall.response_team_create_club.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_team_create_club
         * @static
         * @param {hall.Iresponse_team_create_club} message response_team_create_club message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_create_club.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_team_create_club message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_team_create_club
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_team_create_club} response_team_create_club
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_create_club.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_team_create_club();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.result_code = reader.uint32();
                    break;
                case 2:
                    message.reason = reader.string();
                    break;
                case 3:
                    message.club_info = $root.hall.club_info_item.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("result_code"))
                throw $util.ProtocolError("missing required 'result_code'", { instance: message });
            return message;
        };

        /**
         * Decodes a response_team_create_club message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_team_create_club
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_team_create_club} response_team_create_club
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_create_club.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_team_create_club message.
         * @function verify
         * @memberof hall.response_team_create_club
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_team_create_club.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.result_code))
                return "result_code: integer expected";
            if (message.reason != null && message.hasOwnProperty("reason"))
                if (!$util.isString(message.reason))
                    return "reason: string expected";
            if (message.club_info != null && message.hasOwnProperty("club_info")) {
                var error = $root.hall.club_info_item.verify(message.club_info);
                if (error)
                    return "club_info." + error;
            }
            return null;
        };

        /**
         * Creates a response_team_create_club message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_team_create_club
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_team_create_club} response_team_create_club
         */
        response_team_create_club.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_team_create_club)
                return object;
            var message = new $root.hall.response_team_create_club();
            if (object.result_code != null)
                message.result_code = object.result_code >>> 0;
            if (object.reason != null)
                message.reason = String(object.reason);
            if (object.club_info != null) {
                if (typeof object.club_info !== "object")
                    throw TypeError(".hall.response_team_create_club.club_info: object expected");
                message.club_info = $root.hall.club_info_item.fromObject(object.club_info);
            }
            return message;
        };

        /**
         * Creates a plain object from a response_team_create_club message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_team_create_club
         * @static
         * @param {hall.response_team_create_club} message response_team_create_club
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_team_create_club.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result_code = 0;
                object.reason = "";
                object.club_info = null;
            }
            if (message.result_code != null && message.hasOwnProperty("result_code"))
                object.result_code = message.result_code;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            if (message.club_info != null && message.hasOwnProperty("club_info"))
                object.club_info = $root.hall.club_info_item.toObject(message.club_info, options);
            return object;
        };

        /**
         * Converts this response_team_create_club to JSON.
         * @function toJSON
         * @memberof hall.response_team_create_club
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_team_create_club.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_team_create_club;
    })();

    hall.request_team_search_club = (function() {

        /**
         * Properties of a request_team_search_club.
         * @memberof hall
         * @interface Irequest_team_search_club
         * @property {number} userid request_team_search_club userid
         * @property {string} password request_team_search_club password
         * @property {string} club_invite_code request_team_search_club club_invite_code
         */

        /**
         * Constructs a new request_team_search_club.
         * @memberof hall
         * @classdesc Represents a request_team_search_club.
         * @implements Irequest_team_search_club
         * @constructor
         * @param {hall.Irequest_team_search_club=} [properties] Properties to set
         */
        function request_team_search_club(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_team_search_club userid.
         * @member {number} userid
         * @memberof hall.request_team_search_club
         * @instance
         */
        request_team_search_club.prototype.userid = 0;

        /**
         * request_team_search_club password.
         * @member {string} password
         * @memberof hall.request_team_search_club
         * @instance
         */
        request_team_search_club.prototype.password = "";

        /**
         * request_team_search_club club_invite_code.
         * @member {string} club_invite_code
         * @memberof hall.request_team_search_club
         * @instance
         */
        request_team_search_club.prototype.club_invite_code = "";

        /**
         * Creates a new request_team_search_club instance using the specified properties.
         * @function create
         * @memberof hall.request_team_search_club
         * @static
         * @param {hall.Irequest_team_search_club=} [properties] Properties to set
         * @returns {hall.request_team_search_club} request_team_search_club instance
         */
        request_team_search_club.create = function create(properties) {
            return new request_team_search_club(properties);
        };

        /**
         * Encodes the specified request_team_search_club message. Does not implicitly {@link hall.request_team_search_club.verify|verify} messages.
         * @function encode
         * @memberof hall.request_team_search_club
         * @static
         * @param {hall.Irequest_team_search_club} message request_team_search_club message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_search_club.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.club_invite_code);
            return writer;
        };

        /**
         * Encodes the specified request_team_search_club message, length delimited. Does not implicitly {@link hall.request_team_search_club.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_team_search_club
         * @static
         * @param {hall.Irequest_team_search_club} message request_team_search_club message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_search_club.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_team_search_club message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_team_search_club
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_team_search_club} request_team_search_club
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_search_club.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_team_search_club();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.club_invite_code = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("club_invite_code"))
                throw $util.ProtocolError("missing required 'club_invite_code'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_team_search_club message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_team_search_club
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_team_search_club} request_team_search_club
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_search_club.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_team_search_club message.
         * @function verify
         * @memberof hall.request_team_search_club
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_team_search_club.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isString(message.club_invite_code))
                return "club_invite_code: string expected";
            return null;
        };

        /**
         * Creates a request_team_search_club message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_team_search_club
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_team_search_club} request_team_search_club
         */
        request_team_search_club.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_team_search_club)
                return object;
            var message = new $root.hall.request_team_search_club();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.club_invite_code != null)
                message.club_invite_code = String(object.club_invite_code);
            return message;
        };

        /**
         * Creates a plain object from a request_team_search_club message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_team_search_club
         * @static
         * @param {hall.request_team_search_club} message request_team_search_club
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_team_search_club.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.club_invite_code = "";
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.club_invite_code != null && message.hasOwnProperty("club_invite_code"))
                object.club_invite_code = message.club_invite_code;
            return object;
        };

        /**
         * Converts this request_team_search_club to JSON.
         * @function toJSON
         * @memberof hall.request_team_search_club
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_team_search_club.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_team_search_club;
    })();

    hall.response_team_search_club = (function() {

        /**
         * Properties of a response_team_search_club.
         * @memberof hall
         * @interface Iresponse_team_search_club
         * @property {number} result_code response_team_search_club result_code
         * @property {string|null} [reason] response_team_search_club reason
         * @property {hall.Iclub_info_item|null} [club_info] response_team_search_club club_info
         */

        /**
         * Constructs a new response_team_search_club.
         * @memberof hall
         * @classdesc Represents a response_team_search_club.
         * @implements Iresponse_team_search_club
         * @constructor
         * @param {hall.Iresponse_team_search_club=} [properties] Properties to set
         */
        function response_team_search_club(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_team_search_club result_code.
         * @member {number} result_code
         * @memberof hall.response_team_search_club
         * @instance
         */
        response_team_search_club.prototype.result_code = 0;

        /**
         * response_team_search_club reason.
         * @member {string} reason
         * @memberof hall.response_team_search_club
         * @instance
         */
        response_team_search_club.prototype.reason = "";

        /**
         * response_team_search_club club_info.
         * @member {hall.Iclub_info_item|null|undefined} club_info
         * @memberof hall.response_team_search_club
         * @instance
         */
        response_team_search_club.prototype.club_info = null;

        /**
         * Creates a new response_team_search_club instance using the specified properties.
         * @function create
         * @memberof hall.response_team_search_club
         * @static
         * @param {hall.Iresponse_team_search_club=} [properties] Properties to set
         * @returns {hall.response_team_search_club} response_team_search_club instance
         */
        response_team_search_club.create = function create(properties) {
            return new response_team_search_club(properties);
        };

        /**
         * Encodes the specified response_team_search_club message. Does not implicitly {@link hall.response_team_search_club.verify|verify} messages.
         * @function encode
         * @memberof hall.response_team_search_club
         * @static
         * @param {hall.Iresponse_team_search_club} message response_team_search_club message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_search_club.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.result_code);
            if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.reason);
            if (message.club_info != null && Object.hasOwnProperty.call(message, "club_info"))
                $root.hall.club_info_item.encode(message.club_info, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified response_team_search_club message, length delimited. Does not implicitly {@link hall.response_team_search_club.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_team_search_club
         * @static
         * @param {hall.Iresponse_team_search_club} message response_team_search_club message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_search_club.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_team_search_club message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_team_search_club
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_team_search_club} response_team_search_club
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_search_club.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_team_search_club();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.result_code = reader.uint32();
                    break;
                case 2:
                    message.reason = reader.string();
                    break;
                case 3:
                    message.club_info = $root.hall.club_info_item.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("result_code"))
                throw $util.ProtocolError("missing required 'result_code'", { instance: message });
            return message;
        };

        /**
         * Decodes a response_team_search_club message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_team_search_club
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_team_search_club} response_team_search_club
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_search_club.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_team_search_club message.
         * @function verify
         * @memberof hall.response_team_search_club
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_team_search_club.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.result_code))
                return "result_code: integer expected";
            if (message.reason != null && message.hasOwnProperty("reason"))
                if (!$util.isString(message.reason))
                    return "reason: string expected";
            if (message.club_info != null && message.hasOwnProperty("club_info")) {
                var error = $root.hall.club_info_item.verify(message.club_info);
                if (error)
                    return "club_info." + error;
            }
            return null;
        };

        /**
         * Creates a response_team_search_club message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_team_search_club
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_team_search_club} response_team_search_club
         */
        response_team_search_club.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_team_search_club)
                return object;
            var message = new $root.hall.response_team_search_club();
            if (object.result_code != null)
                message.result_code = object.result_code >>> 0;
            if (object.reason != null)
                message.reason = String(object.reason);
            if (object.club_info != null) {
                if (typeof object.club_info !== "object")
                    throw TypeError(".hall.response_team_search_club.club_info: object expected");
                message.club_info = $root.hall.club_info_item.fromObject(object.club_info);
            }
            return message;
        };

        /**
         * Creates a plain object from a response_team_search_club message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_team_search_club
         * @static
         * @param {hall.response_team_search_club} message response_team_search_club
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_team_search_club.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result_code = 0;
                object.reason = "";
                object.club_info = null;
            }
            if (message.result_code != null && message.hasOwnProperty("result_code"))
                object.result_code = message.result_code;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            if (message.club_info != null && message.hasOwnProperty("club_info"))
                object.club_info = $root.hall.club_info_item.toObject(message.club_info, options);
            return object;
        };

        /**
         * Converts this response_team_search_club to JSON.
         * @function toJSON
         * @memberof hall.response_team_search_club
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_team_search_club.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_team_search_club;
    })();

    hall.request_team_join_club = (function() {

        /**
         * Properties of a request_team_join_club.
         * @memberof hall
         * @interface Irequest_team_join_club
         * @property {number} userid request_team_join_club userid
         * @property {string} password request_team_join_club password
         * @property {string} club_invite_code request_team_join_club club_invite_code
         */

        /**
         * Constructs a new request_team_join_club.
         * @memberof hall
         * @classdesc Represents a request_team_join_club.
         * @implements Irequest_team_join_club
         * @constructor
         * @param {hall.Irequest_team_join_club=} [properties] Properties to set
         */
        function request_team_join_club(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_team_join_club userid.
         * @member {number} userid
         * @memberof hall.request_team_join_club
         * @instance
         */
        request_team_join_club.prototype.userid = 0;

        /**
         * request_team_join_club password.
         * @member {string} password
         * @memberof hall.request_team_join_club
         * @instance
         */
        request_team_join_club.prototype.password = "";

        /**
         * request_team_join_club club_invite_code.
         * @member {string} club_invite_code
         * @memberof hall.request_team_join_club
         * @instance
         */
        request_team_join_club.prototype.club_invite_code = "";

        /**
         * Creates a new request_team_join_club instance using the specified properties.
         * @function create
         * @memberof hall.request_team_join_club
         * @static
         * @param {hall.Irequest_team_join_club=} [properties] Properties to set
         * @returns {hall.request_team_join_club} request_team_join_club instance
         */
        request_team_join_club.create = function create(properties) {
            return new request_team_join_club(properties);
        };

        /**
         * Encodes the specified request_team_join_club message. Does not implicitly {@link hall.request_team_join_club.verify|verify} messages.
         * @function encode
         * @memberof hall.request_team_join_club
         * @static
         * @param {hall.Irequest_team_join_club} message request_team_join_club message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_join_club.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.club_invite_code);
            return writer;
        };

        /**
         * Encodes the specified request_team_join_club message, length delimited. Does not implicitly {@link hall.request_team_join_club.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_team_join_club
         * @static
         * @param {hall.Irequest_team_join_club} message request_team_join_club message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_join_club.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_team_join_club message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_team_join_club
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_team_join_club} request_team_join_club
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_join_club.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_team_join_club();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.club_invite_code = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("club_invite_code"))
                throw $util.ProtocolError("missing required 'club_invite_code'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_team_join_club message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_team_join_club
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_team_join_club} request_team_join_club
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_join_club.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_team_join_club message.
         * @function verify
         * @memberof hall.request_team_join_club
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_team_join_club.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isString(message.club_invite_code))
                return "club_invite_code: string expected";
            return null;
        };

        /**
         * Creates a request_team_join_club message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_team_join_club
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_team_join_club} request_team_join_club
         */
        request_team_join_club.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_team_join_club)
                return object;
            var message = new $root.hall.request_team_join_club();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.club_invite_code != null)
                message.club_invite_code = String(object.club_invite_code);
            return message;
        };

        /**
         * Creates a plain object from a request_team_join_club message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_team_join_club
         * @static
         * @param {hall.request_team_join_club} message request_team_join_club
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_team_join_club.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.club_invite_code = "";
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.club_invite_code != null && message.hasOwnProperty("club_invite_code"))
                object.club_invite_code = message.club_invite_code;
            return object;
        };

        /**
         * Converts this request_team_join_club to JSON.
         * @function toJSON
         * @memberof hall.request_team_join_club
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_team_join_club.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_team_join_club;
    })();

    hall.response_team_join_club = (function() {

        /**
         * Properties of a response_team_join_club.
         * @memberof hall
         * @interface Iresponse_team_join_club
         * @property {number} result_code response_team_join_club result_code
         * @property {string|null} [reason] response_team_join_club reason
         * @property {hall.Iclub_info_item|null} [club_info] response_team_join_club club_info
         */

        /**
         * Constructs a new response_team_join_club.
         * @memberof hall
         * @classdesc Represents a response_team_join_club.
         * @implements Iresponse_team_join_club
         * @constructor
         * @param {hall.Iresponse_team_join_club=} [properties] Properties to set
         */
        function response_team_join_club(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_team_join_club result_code.
         * @member {number} result_code
         * @memberof hall.response_team_join_club
         * @instance
         */
        response_team_join_club.prototype.result_code = 0;

        /**
         * response_team_join_club reason.
         * @member {string} reason
         * @memberof hall.response_team_join_club
         * @instance
         */
        response_team_join_club.prototype.reason = "";

        /**
         * response_team_join_club club_info.
         * @member {hall.Iclub_info_item|null|undefined} club_info
         * @memberof hall.response_team_join_club
         * @instance
         */
        response_team_join_club.prototype.club_info = null;

        /**
         * Creates a new response_team_join_club instance using the specified properties.
         * @function create
         * @memberof hall.response_team_join_club
         * @static
         * @param {hall.Iresponse_team_join_club=} [properties] Properties to set
         * @returns {hall.response_team_join_club} response_team_join_club instance
         */
        response_team_join_club.create = function create(properties) {
            return new response_team_join_club(properties);
        };

        /**
         * Encodes the specified response_team_join_club message. Does not implicitly {@link hall.response_team_join_club.verify|verify} messages.
         * @function encode
         * @memberof hall.response_team_join_club
         * @static
         * @param {hall.Iresponse_team_join_club} message response_team_join_club message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_join_club.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.result_code);
            if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.reason);
            if (message.club_info != null && Object.hasOwnProperty.call(message, "club_info"))
                $root.hall.club_info_item.encode(message.club_info, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified response_team_join_club message, length delimited. Does not implicitly {@link hall.response_team_join_club.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_team_join_club
         * @static
         * @param {hall.Iresponse_team_join_club} message response_team_join_club message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_join_club.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_team_join_club message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_team_join_club
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_team_join_club} response_team_join_club
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_join_club.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_team_join_club();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.result_code = reader.uint32();
                    break;
                case 2:
                    message.reason = reader.string();
                    break;
                case 3:
                    message.club_info = $root.hall.club_info_item.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("result_code"))
                throw $util.ProtocolError("missing required 'result_code'", { instance: message });
            return message;
        };

        /**
         * Decodes a response_team_join_club message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_team_join_club
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_team_join_club} response_team_join_club
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_join_club.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_team_join_club message.
         * @function verify
         * @memberof hall.response_team_join_club
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_team_join_club.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.result_code))
                return "result_code: integer expected";
            if (message.reason != null && message.hasOwnProperty("reason"))
                if (!$util.isString(message.reason))
                    return "reason: string expected";
            if (message.club_info != null && message.hasOwnProperty("club_info")) {
                var error = $root.hall.club_info_item.verify(message.club_info);
                if (error)
                    return "club_info." + error;
            }
            return null;
        };

        /**
         * Creates a response_team_join_club message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_team_join_club
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_team_join_club} response_team_join_club
         */
        response_team_join_club.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_team_join_club)
                return object;
            var message = new $root.hall.response_team_join_club();
            if (object.result_code != null)
                message.result_code = object.result_code >>> 0;
            if (object.reason != null)
                message.reason = String(object.reason);
            if (object.club_info != null) {
                if (typeof object.club_info !== "object")
                    throw TypeError(".hall.response_team_join_club.club_info: object expected");
                message.club_info = $root.hall.club_info_item.fromObject(object.club_info);
            }
            return message;
        };

        /**
         * Creates a plain object from a response_team_join_club message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_team_join_club
         * @static
         * @param {hall.response_team_join_club} message response_team_join_club
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_team_join_club.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result_code = 0;
                object.reason = "";
                object.club_info = null;
            }
            if (message.result_code != null && message.hasOwnProperty("result_code"))
                object.result_code = message.result_code;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            if (message.club_info != null && message.hasOwnProperty("club_info"))
                object.club_info = $root.hall.club_info_item.toObject(message.club_info, options);
            return object;
        };

        /**
         * Converts this response_team_join_club to JSON.
         * @function toJSON
         * @memberof hall.response_team_join_club
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_team_join_club.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_team_join_club;
    })();

    hall.request_team_change_club = (function() {

        /**
         * Properties of a request_team_change_club.
         * @memberof hall
         * @interface Irequest_team_change_club
         * @property {number} userid request_team_change_club userid
         * @property {string} password request_team_change_club password
         * @property {number} clubid request_team_change_club clubid
         */

        /**
         * Constructs a new request_team_change_club.
         * @memberof hall
         * @classdesc Represents a request_team_change_club.
         * @implements Irequest_team_change_club
         * @constructor
         * @param {hall.Irequest_team_change_club=} [properties] Properties to set
         */
        function request_team_change_club(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_team_change_club userid.
         * @member {number} userid
         * @memberof hall.request_team_change_club
         * @instance
         */
        request_team_change_club.prototype.userid = 0;

        /**
         * request_team_change_club password.
         * @member {string} password
         * @memberof hall.request_team_change_club
         * @instance
         */
        request_team_change_club.prototype.password = "";

        /**
         * request_team_change_club clubid.
         * @member {number} clubid
         * @memberof hall.request_team_change_club
         * @instance
         */
        request_team_change_club.prototype.clubid = 0;

        /**
         * Creates a new request_team_change_club instance using the specified properties.
         * @function create
         * @memberof hall.request_team_change_club
         * @static
         * @param {hall.Irequest_team_change_club=} [properties] Properties to set
         * @returns {hall.request_team_change_club} request_team_change_club instance
         */
        request_team_change_club.create = function create(properties) {
            return new request_team_change_club(properties);
        };

        /**
         * Encodes the specified request_team_change_club message. Does not implicitly {@link hall.request_team_change_club.verify|verify} messages.
         * @function encode
         * @memberof hall.request_team_change_club
         * @static
         * @param {hall.Irequest_team_change_club} message request_team_change_club message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_change_club.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.clubid);
            return writer;
        };

        /**
         * Encodes the specified request_team_change_club message, length delimited. Does not implicitly {@link hall.request_team_change_club.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_team_change_club
         * @static
         * @param {hall.Irequest_team_change_club} message request_team_change_club message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_change_club.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_team_change_club message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_team_change_club
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_team_change_club} request_team_change_club
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_change_club.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_team_change_club();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.clubid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("clubid"))
                throw $util.ProtocolError("missing required 'clubid'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_team_change_club message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_team_change_club
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_team_change_club} request_team_change_club
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_change_club.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_team_change_club message.
         * @function verify
         * @memberof hall.request_team_change_club
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_team_change_club.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isInteger(message.clubid))
                return "clubid: integer expected";
            return null;
        };

        /**
         * Creates a request_team_change_club message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_team_change_club
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_team_change_club} request_team_change_club
         */
        request_team_change_club.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_team_change_club)
                return object;
            var message = new $root.hall.request_team_change_club();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.clubid != null)
                message.clubid = object.clubid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a request_team_change_club message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_team_change_club
         * @static
         * @param {hall.request_team_change_club} message request_team_change_club
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_team_change_club.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.clubid = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.clubid != null && message.hasOwnProperty("clubid"))
                object.clubid = message.clubid;
            return object;
        };

        /**
         * Converts this request_team_change_club to JSON.
         * @function toJSON
         * @memberof hall.request_team_change_club
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_team_change_club.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_team_change_club;
    })();

    hall.response_team_change_club = (function() {

        /**
         * Properties of a response_team_change_club.
         * @memberof hall
         * @interface Iresponse_team_change_club
         * @property {number} result_code response_team_change_club result_code
         * @property {string|null} [reason] response_team_change_club reason
         * @property {number|null} [clubid] response_team_change_club clubid
         */

        /**
         * Constructs a new response_team_change_club.
         * @memberof hall
         * @classdesc Represents a response_team_change_club.
         * @implements Iresponse_team_change_club
         * @constructor
         * @param {hall.Iresponse_team_change_club=} [properties] Properties to set
         */
        function response_team_change_club(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_team_change_club result_code.
         * @member {number} result_code
         * @memberof hall.response_team_change_club
         * @instance
         */
        response_team_change_club.prototype.result_code = 0;

        /**
         * response_team_change_club reason.
         * @member {string} reason
         * @memberof hall.response_team_change_club
         * @instance
         */
        response_team_change_club.prototype.reason = "";

        /**
         * response_team_change_club clubid.
         * @member {number} clubid
         * @memberof hall.response_team_change_club
         * @instance
         */
        response_team_change_club.prototype.clubid = 0;

        /**
         * Creates a new response_team_change_club instance using the specified properties.
         * @function create
         * @memberof hall.response_team_change_club
         * @static
         * @param {hall.Iresponse_team_change_club=} [properties] Properties to set
         * @returns {hall.response_team_change_club} response_team_change_club instance
         */
        response_team_change_club.create = function create(properties) {
            return new response_team_change_club(properties);
        };

        /**
         * Encodes the specified response_team_change_club message. Does not implicitly {@link hall.response_team_change_club.verify|verify} messages.
         * @function encode
         * @memberof hall.response_team_change_club
         * @static
         * @param {hall.Iresponse_team_change_club} message response_team_change_club message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_change_club.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.result_code);
            if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.reason);
            if (message.clubid != null && Object.hasOwnProperty.call(message, "clubid"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.clubid);
            return writer;
        };

        /**
         * Encodes the specified response_team_change_club message, length delimited. Does not implicitly {@link hall.response_team_change_club.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_team_change_club
         * @static
         * @param {hall.Iresponse_team_change_club} message response_team_change_club message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_change_club.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_team_change_club message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_team_change_club
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_team_change_club} response_team_change_club
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_change_club.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_team_change_club();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.result_code = reader.uint32();
                    break;
                case 2:
                    message.reason = reader.string();
                    break;
                case 3:
                    message.clubid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("result_code"))
                throw $util.ProtocolError("missing required 'result_code'", { instance: message });
            return message;
        };

        /**
         * Decodes a response_team_change_club message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_team_change_club
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_team_change_club} response_team_change_club
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_change_club.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_team_change_club message.
         * @function verify
         * @memberof hall.response_team_change_club
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_team_change_club.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.result_code))
                return "result_code: integer expected";
            if (message.reason != null && message.hasOwnProperty("reason"))
                if (!$util.isString(message.reason))
                    return "reason: string expected";
            if (message.clubid != null && message.hasOwnProperty("clubid"))
                if (!$util.isInteger(message.clubid))
                    return "clubid: integer expected";
            return null;
        };

        /**
         * Creates a response_team_change_club message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_team_change_club
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_team_change_club} response_team_change_club
         */
        response_team_change_club.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_team_change_club)
                return object;
            var message = new $root.hall.response_team_change_club();
            if (object.result_code != null)
                message.result_code = object.result_code >>> 0;
            if (object.reason != null)
                message.reason = String(object.reason);
            if (object.clubid != null)
                message.clubid = object.clubid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a response_team_change_club message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_team_change_club
         * @static
         * @param {hall.response_team_change_club} message response_team_change_club
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_team_change_club.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result_code = 0;
                object.reason = "";
                object.clubid = 0;
            }
            if (message.result_code != null && message.hasOwnProperty("result_code"))
                object.result_code = message.result_code;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            if (message.clubid != null && message.hasOwnProperty("clubid"))
                object.clubid = message.clubid;
            return object;
        };

        /**
         * Converts this response_team_change_club to JSON.
         * @function toJSON
         * @memberof hall.response_team_change_club
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_team_change_club.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_team_change_club;
    })();

    hall.request_team_parent_info = (function() {

        /**
         * Properties of a request_team_parent_info.
         * @memberof hall
         * @interface Irequest_team_parent_info
         * @property {number} userid request_team_parent_info userid
         * @property {string} password request_team_parent_info password
         * @property {number} clubid request_team_parent_info clubid
         */

        /**
         * Constructs a new request_team_parent_info.
         * @memberof hall
         * @classdesc Represents a request_team_parent_info.
         * @implements Irequest_team_parent_info
         * @constructor
         * @param {hall.Irequest_team_parent_info=} [properties] Properties to set
         */
        function request_team_parent_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_team_parent_info userid.
         * @member {number} userid
         * @memberof hall.request_team_parent_info
         * @instance
         */
        request_team_parent_info.prototype.userid = 0;

        /**
         * request_team_parent_info password.
         * @member {string} password
         * @memberof hall.request_team_parent_info
         * @instance
         */
        request_team_parent_info.prototype.password = "";

        /**
         * request_team_parent_info clubid.
         * @member {number} clubid
         * @memberof hall.request_team_parent_info
         * @instance
         */
        request_team_parent_info.prototype.clubid = 0;

        /**
         * Creates a new request_team_parent_info instance using the specified properties.
         * @function create
         * @memberof hall.request_team_parent_info
         * @static
         * @param {hall.Irequest_team_parent_info=} [properties] Properties to set
         * @returns {hall.request_team_parent_info} request_team_parent_info instance
         */
        request_team_parent_info.create = function create(properties) {
            return new request_team_parent_info(properties);
        };

        /**
         * Encodes the specified request_team_parent_info message. Does not implicitly {@link hall.request_team_parent_info.verify|verify} messages.
         * @function encode
         * @memberof hall.request_team_parent_info
         * @static
         * @param {hall.Irequest_team_parent_info} message request_team_parent_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_parent_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.clubid);
            return writer;
        };

        /**
         * Encodes the specified request_team_parent_info message, length delimited. Does not implicitly {@link hall.request_team_parent_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_team_parent_info
         * @static
         * @param {hall.Irequest_team_parent_info} message request_team_parent_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_parent_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_team_parent_info message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_team_parent_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_team_parent_info} request_team_parent_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_parent_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_team_parent_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.clubid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("clubid"))
                throw $util.ProtocolError("missing required 'clubid'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_team_parent_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_team_parent_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_team_parent_info} request_team_parent_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_parent_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_team_parent_info message.
         * @function verify
         * @memberof hall.request_team_parent_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_team_parent_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isInteger(message.clubid))
                return "clubid: integer expected";
            return null;
        };

        /**
         * Creates a request_team_parent_info message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_team_parent_info
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_team_parent_info} request_team_parent_info
         */
        request_team_parent_info.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_team_parent_info)
                return object;
            var message = new $root.hall.request_team_parent_info();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.clubid != null)
                message.clubid = object.clubid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a request_team_parent_info message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_team_parent_info
         * @static
         * @param {hall.request_team_parent_info} message request_team_parent_info
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_team_parent_info.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.clubid = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.clubid != null && message.hasOwnProperty("clubid"))
                object.clubid = message.clubid;
            return object;
        };

        /**
         * Converts this request_team_parent_info to JSON.
         * @function toJSON
         * @memberof hall.request_team_parent_info
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_team_parent_info.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_team_parent_info;
    })();

    hall.response_team_parent_info = (function() {

        /**
         * Properties of a response_team_parent_info.
         * @memberof hall
         * @interface Iresponse_team_parent_info
         * @property {number|null} [gameid] response_team_parent_info gameid
         * @property {string|null} [nickname] response_team_parent_info nickname
         * @property {string|null} [head_img_url] response_team_parent_info head_img_url
         * @property {number|null} [invited_code] response_team_parent_info invited_code
         * @property {string|null} [club_name] response_team_parent_info club_name
         * @property {string|null} [notice] response_team_parent_info notice
         * @property {string|null} [wx] response_team_parent_info wx
         * @property {string|null} [qq] response_team_parent_info qq
         */

        /**
         * Constructs a new response_team_parent_info.
         * @memberof hall
         * @classdesc Represents a response_team_parent_info.
         * @implements Iresponse_team_parent_info
         * @constructor
         * @param {hall.Iresponse_team_parent_info=} [properties] Properties to set
         */
        function response_team_parent_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_team_parent_info gameid.
         * @member {number} gameid
         * @memberof hall.response_team_parent_info
         * @instance
         */
        response_team_parent_info.prototype.gameid = 0;

        /**
         * response_team_parent_info nickname.
         * @member {string} nickname
         * @memberof hall.response_team_parent_info
         * @instance
         */
        response_team_parent_info.prototype.nickname = "";

        /**
         * response_team_parent_info head_img_url.
         * @member {string} head_img_url
         * @memberof hall.response_team_parent_info
         * @instance
         */
        response_team_parent_info.prototype.head_img_url = "";

        /**
         * response_team_parent_info invited_code.
         * @member {number} invited_code
         * @memberof hall.response_team_parent_info
         * @instance
         */
        response_team_parent_info.prototype.invited_code = 0;

        /**
         * response_team_parent_info club_name.
         * @member {string} club_name
         * @memberof hall.response_team_parent_info
         * @instance
         */
        response_team_parent_info.prototype.club_name = "";

        /**
         * response_team_parent_info notice.
         * @member {string} notice
         * @memberof hall.response_team_parent_info
         * @instance
         */
        response_team_parent_info.prototype.notice = "";

        /**
         * response_team_parent_info wx.
         * @member {string} wx
         * @memberof hall.response_team_parent_info
         * @instance
         */
        response_team_parent_info.prototype.wx = "";

        /**
         * response_team_parent_info qq.
         * @member {string} qq
         * @memberof hall.response_team_parent_info
         * @instance
         */
        response_team_parent_info.prototype.qq = "";

        /**
         * Creates a new response_team_parent_info instance using the specified properties.
         * @function create
         * @memberof hall.response_team_parent_info
         * @static
         * @param {hall.Iresponse_team_parent_info=} [properties] Properties to set
         * @returns {hall.response_team_parent_info} response_team_parent_info instance
         */
        response_team_parent_info.create = function create(properties) {
            return new response_team_parent_info(properties);
        };

        /**
         * Encodes the specified response_team_parent_info message. Does not implicitly {@link hall.response_team_parent_info.verify|verify} messages.
         * @function encode
         * @memberof hall.response_team_parent_info
         * @static
         * @param {hall.Iresponse_team_parent_info} message response_team_parent_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_parent_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameid != null && Object.hasOwnProperty.call(message, "gameid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.gameid);
            if (message.nickname != null && Object.hasOwnProperty.call(message, "nickname"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nickname);
            if (message.head_img_url != null && Object.hasOwnProperty.call(message, "head_img_url"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.head_img_url);
            if (message.invited_code != null && Object.hasOwnProperty.call(message, "invited_code"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.invited_code);
            if (message.club_name != null && Object.hasOwnProperty.call(message, "club_name"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.club_name);
            if (message.notice != null && Object.hasOwnProperty.call(message, "notice"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.notice);
            if (message.wx != null && Object.hasOwnProperty.call(message, "wx"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.wx);
            if (message.qq != null && Object.hasOwnProperty.call(message, "qq"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.qq);
            return writer;
        };

        /**
         * Encodes the specified response_team_parent_info message, length delimited. Does not implicitly {@link hall.response_team_parent_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_team_parent_info
         * @static
         * @param {hall.Iresponse_team_parent_info} message response_team_parent_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_parent_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_team_parent_info message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_team_parent_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_team_parent_info} response_team_parent_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_parent_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_team_parent_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.gameid = reader.uint32();
                    break;
                case 2:
                    message.nickname = reader.string();
                    break;
                case 3:
                    message.head_img_url = reader.string();
                    break;
                case 4:
                    message.invited_code = reader.uint32();
                    break;
                case 5:
                    message.club_name = reader.string();
                    break;
                case 6:
                    message.notice = reader.string();
                    break;
                case 7:
                    message.wx = reader.string();
                    break;
                case 8:
                    message.qq = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a response_team_parent_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_team_parent_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_team_parent_info} response_team_parent_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_parent_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_team_parent_info message.
         * @function verify
         * @memberof hall.response_team_parent_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_team_parent_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameid != null && message.hasOwnProperty("gameid"))
                if (!$util.isInteger(message.gameid))
                    return "gameid: integer expected";
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                if (!$util.isString(message.nickname))
                    return "nickname: string expected";
            if (message.head_img_url != null && message.hasOwnProperty("head_img_url"))
                if (!$util.isString(message.head_img_url))
                    return "head_img_url: string expected";
            if (message.invited_code != null && message.hasOwnProperty("invited_code"))
                if (!$util.isInteger(message.invited_code))
                    return "invited_code: integer expected";
            if (message.club_name != null && message.hasOwnProperty("club_name"))
                if (!$util.isString(message.club_name))
                    return "club_name: string expected";
            if (message.notice != null && message.hasOwnProperty("notice"))
                if (!$util.isString(message.notice))
                    return "notice: string expected";
            if (message.wx != null && message.hasOwnProperty("wx"))
                if (!$util.isString(message.wx))
                    return "wx: string expected";
            if (message.qq != null && message.hasOwnProperty("qq"))
                if (!$util.isString(message.qq))
                    return "qq: string expected";
            return null;
        };

        /**
         * Creates a response_team_parent_info message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_team_parent_info
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_team_parent_info} response_team_parent_info
         */
        response_team_parent_info.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_team_parent_info)
                return object;
            var message = new $root.hall.response_team_parent_info();
            if (object.gameid != null)
                message.gameid = object.gameid >>> 0;
            if (object.nickname != null)
                message.nickname = String(object.nickname);
            if (object.head_img_url != null)
                message.head_img_url = String(object.head_img_url);
            if (object.invited_code != null)
                message.invited_code = object.invited_code >>> 0;
            if (object.club_name != null)
                message.club_name = String(object.club_name);
            if (object.notice != null)
                message.notice = String(object.notice);
            if (object.wx != null)
                message.wx = String(object.wx);
            if (object.qq != null)
                message.qq = String(object.qq);
            return message;
        };

        /**
         * Creates a plain object from a response_team_parent_info message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_team_parent_info
         * @static
         * @param {hall.response_team_parent_info} message response_team_parent_info
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_team_parent_info.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gameid = 0;
                object.nickname = "";
                object.head_img_url = "";
                object.invited_code = 0;
                object.club_name = "";
                object.notice = "";
                object.wx = "";
                object.qq = "";
            }
            if (message.gameid != null && message.hasOwnProperty("gameid"))
                object.gameid = message.gameid;
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                object.nickname = message.nickname;
            if (message.head_img_url != null && message.hasOwnProperty("head_img_url"))
                object.head_img_url = message.head_img_url;
            if (message.invited_code != null && message.hasOwnProperty("invited_code"))
                object.invited_code = message.invited_code;
            if (message.club_name != null && message.hasOwnProperty("club_name"))
                object.club_name = message.club_name;
            if (message.notice != null && message.hasOwnProperty("notice"))
                object.notice = message.notice;
            if (message.wx != null && message.hasOwnProperty("wx"))
                object.wx = message.wx;
            if (message.qq != null && message.hasOwnProperty("qq"))
                object.qq = message.qq;
            return object;
        };

        /**
         * Converts this response_team_parent_info to JSON.
         * @function toJSON
         * @memberof hall.response_team_parent_info
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_team_parent_info.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_team_parent_info;
    })();

    hall.request_team_myinfo = (function() {

        /**
         * Properties of a request_team_myinfo.
         * @memberof hall
         * @interface Irequest_team_myinfo
         * @property {number} userid request_team_myinfo userid
         * @property {string} password request_team_myinfo password
         * @property {number} clubid request_team_myinfo clubid
         */

        /**
         * Constructs a new request_team_myinfo.
         * @memberof hall
         * @classdesc Represents a request_team_myinfo.
         * @implements Irequest_team_myinfo
         * @constructor
         * @param {hall.Irequest_team_myinfo=} [properties] Properties to set
         */
        function request_team_myinfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_team_myinfo userid.
         * @member {number} userid
         * @memberof hall.request_team_myinfo
         * @instance
         */
        request_team_myinfo.prototype.userid = 0;

        /**
         * request_team_myinfo password.
         * @member {string} password
         * @memberof hall.request_team_myinfo
         * @instance
         */
        request_team_myinfo.prototype.password = "";

        /**
         * request_team_myinfo clubid.
         * @member {number} clubid
         * @memberof hall.request_team_myinfo
         * @instance
         */
        request_team_myinfo.prototype.clubid = 0;

        /**
         * Creates a new request_team_myinfo instance using the specified properties.
         * @function create
         * @memberof hall.request_team_myinfo
         * @static
         * @param {hall.Irequest_team_myinfo=} [properties] Properties to set
         * @returns {hall.request_team_myinfo} request_team_myinfo instance
         */
        request_team_myinfo.create = function create(properties) {
            return new request_team_myinfo(properties);
        };

        /**
         * Encodes the specified request_team_myinfo message. Does not implicitly {@link hall.request_team_myinfo.verify|verify} messages.
         * @function encode
         * @memberof hall.request_team_myinfo
         * @static
         * @param {hall.Irequest_team_myinfo} message request_team_myinfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_myinfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.clubid);
            return writer;
        };

        /**
         * Encodes the specified request_team_myinfo message, length delimited. Does not implicitly {@link hall.request_team_myinfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_team_myinfo
         * @static
         * @param {hall.Irequest_team_myinfo} message request_team_myinfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_myinfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_team_myinfo message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_team_myinfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_team_myinfo} request_team_myinfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_myinfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_team_myinfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.clubid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("clubid"))
                throw $util.ProtocolError("missing required 'clubid'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_team_myinfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_team_myinfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_team_myinfo} request_team_myinfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_myinfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_team_myinfo message.
         * @function verify
         * @memberof hall.request_team_myinfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_team_myinfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isInteger(message.clubid))
                return "clubid: integer expected";
            return null;
        };

        /**
         * Creates a request_team_myinfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_team_myinfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_team_myinfo} request_team_myinfo
         */
        request_team_myinfo.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_team_myinfo)
                return object;
            var message = new $root.hall.request_team_myinfo();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.clubid != null)
                message.clubid = object.clubid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a request_team_myinfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_team_myinfo
         * @static
         * @param {hall.request_team_myinfo} message request_team_myinfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_team_myinfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.clubid = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.clubid != null && message.hasOwnProperty("clubid"))
                object.clubid = message.clubid;
            return object;
        };

        /**
         * Converts this request_team_myinfo to JSON.
         * @function toJSON
         * @memberof hall.request_team_myinfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_team_myinfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_team_myinfo;
    })();

    hall.response_team_myinfo = (function() {

        /**
         * Properties of a response_team_myinfo.
         * @memberof hall
         * @interface Iresponse_team_myinfo
         * @property {number} gameid response_team_myinfo gameid
         * @property {string} nickname response_team_myinfo nickname
         * @property {string} head_img_url response_team_myinfo head_img_url
         * @property {string} invited_code response_team_myinfo invited_code
         * @property {number} share_ratio response_team_myinfo share_ratio
         * @property {string} notice response_team_myinfo notice
         * @property {string} wx response_team_myinfo wx
         * @property {string} qq response_team_myinfo qq
         * @property {string} club_name response_team_myinfo club_name
         */

        /**
         * Constructs a new response_team_myinfo.
         * @memberof hall
         * @classdesc Represents a response_team_myinfo.
         * @implements Iresponse_team_myinfo
         * @constructor
         * @param {hall.Iresponse_team_myinfo=} [properties] Properties to set
         */
        function response_team_myinfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_team_myinfo gameid.
         * @member {number} gameid
         * @memberof hall.response_team_myinfo
         * @instance
         */
        response_team_myinfo.prototype.gameid = 0;

        /**
         * response_team_myinfo nickname.
         * @member {string} nickname
         * @memberof hall.response_team_myinfo
         * @instance
         */
        response_team_myinfo.prototype.nickname = "";

        /**
         * response_team_myinfo head_img_url.
         * @member {string} head_img_url
         * @memberof hall.response_team_myinfo
         * @instance
         */
        response_team_myinfo.prototype.head_img_url = "";

        /**
         * response_team_myinfo invited_code.
         * @member {string} invited_code
         * @memberof hall.response_team_myinfo
         * @instance
         */
        response_team_myinfo.prototype.invited_code = "";

        /**
         * response_team_myinfo share_ratio.
         * @member {number} share_ratio
         * @memberof hall.response_team_myinfo
         * @instance
         */
        response_team_myinfo.prototype.share_ratio = 0;

        /**
         * response_team_myinfo notice.
         * @member {string} notice
         * @memberof hall.response_team_myinfo
         * @instance
         */
        response_team_myinfo.prototype.notice = "";

        /**
         * response_team_myinfo wx.
         * @member {string} wx
         * @memberof hall.response_team_myinfo
         * @instance
         */
        response_team_myinfo.prototype.wx = "";

        /**
         * response_team_myinfo qq.
         * @member {string} qq
         * @memberof hall.response_team_myinfo
         * @instance
         */
        response_team_myinfo.prototype.qq = "";

        /**
         * response_team_myinfo club_name.
         * @member {string} club_name
         * @memberof hall.response_team_myinfo
         * @instance
         */
        response_team_myinfo.prototype.club_name = "";

        /**
         * Creates a new response_team_myinfo instance using the specified properties.
         * @function create
         * @memberof hall.response_team_myinfo
         * @static
         * @param {hall.Iresponse_team_myinfo=} [properties] Properties to set
         * @returns {hall.response_team_myinfo} response_team_myinfo instance
         */
        response_team_myinfo.create = function create(properties) {
            return new response_team_myinfo(properties);
        };

        /**
         * Encodes the specified response_team_myinfo message. Does not implicitly {@link hall.response_team_myinfo.verify|verify} messages.
         * @function encode
         * @memberof hall.response_team_myinfo
         * @static
         * @param {hall.Iresponse_team_myinfo} message response_team_myinfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_myinfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.gameid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.nickname);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.head_img_url);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.invited_code);
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.share_ratio);
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.notice);
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.wx);
            writer.uint32(/* id 8, wireType 2 =*/66).string(message.qq);
            writer.uint32(/* id 9, wireType 2 =*/74).string(message.club_name);
            return writer;
        };

        /**
         * Encodes the specified response_team_myinfo message, length delimited. Does not implicitly {@link hall.response_team_myinfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_team_myinfo
         * @static
         * @param {hall.Iresponse_team_myinfo} message response_team_myinfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_myinfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_team_myinfo message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_team_myinfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_team_myinfo} response_team_myinfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_myinfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_team_myinfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.gameid = reader.uint32();
                    break;
                case 2:
                    message.nickname = reader.string();
                    break;
                case 3:
                    message.head_img_url = reader.string();
                    break;
                case 4:
                    message.invited_code = reader.string();
                    break;
                case 5:
                    message.share_ratio = reader.uint32();
                    break;
                case 6:
                    message.notice = reader.string();
                    break;
                case 7:
                    message.wx = reader.string();
                    break;
                case 8:
                    message.qq = reader.string();
                    break;
                case 9:
                    message.club_name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("gameid"))
                throw $util.ProtocolError("missing required 'gameid'", { instance: message });
            if (!message.hasOwnProperty("nickname"))
                throw $util.ProtocolError("missing required 'nickname'", { instance: message });
            if (!message.hasOwnProperty("head_img_url"))
                throw $util.ProtocolError("missing required 'head_img_url'", { instance: message });
            if (!message.hasOwnProperty("invited_code"))
                throw $util.ProtocolError("missing required 'invited_code'", { instance: message });
            if (!message.hasOwnProperty("share_ratio"))
                throw $util.ProtocolError("missing required 'share_ratio'", { instance: message });
            if (!message.hasOwnProperty("notice"))
                throw $util.ProtocolError("missing required 'notice'", { instance: message });
            if (!message.hasOwnProperty("wx"))
                throw $util.ProtocolError("missing required 'wx'", { instance: message });
            if (!message.hasOwnProperty("qq"))
                throw $util.ProtocolError("missing required 'qq'", { instance: message });
            if (!message.hasOwnProperty("club_name"))
                throw $util.ProtocolError("missing required 'club_name'", { instance: message });
            return message;
        };

        /**
         * Decodes a response_team_myinfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_team_myinfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_team_myinfo} response_team_myinfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_myinfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_team_myinfo message.
         * @function verify
         * @memberof hall.response_team_myinfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_team_myinfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.gameid))
                return "gameid: integer expected";
            if (!$util.isString(message.nickname))
                return "nickname: string expected";
            if (!$util.isString(message.head_img_url))
                return "head_img_url: string expected";
            if (!$util.isString(message.invited_code))
                return "invited_code: string expected";
            if (!$util.isInteger(message.share_ratio))
                return "share_ratio: integer expected";
            if (!$util.isString(message.notice))
                return "notice: string expected";
            if (!$util.isString(message.wx))
                return "wx: string expected";
            if (!$util.isString(message.qq))
                return "qq: string expected";
            if (!$util.isString(message.club_name))
                return "club_name: string expected";
            return null;
        };

        /**
         * Creates a response_team_myinfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_team_myinfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_team_myinfo} response_team_myinfo
         */
        response_team_myinfo.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_team_myinfo)
                return object;
            var message = new $root.hall.response_team_myinfo();
            if (object.gameid != null)
                message.gameid = object.gameid >>> 0;
            if (object.nickname != null)
                message.nickname = String(object.nickname);
            if (object.head_img_url != null)
                message.head_img_url = String(object.head_img_url);
            if (object.invited_code != null)
                message.invited_code = String(object.invited_code);
            if (object.share_ratio != null)
                message.share_ratio = object.share_ratio >>> 0;
            if (object.notice != null)
                message.notice = String(object.notice);
            if (object.wx != null)
                message.wx = String(object.wx);
            if (object.qq != null)
                message.qq = String(object.qq);
            if (object.club_name != null)
                message.club_name = String(object.club_name);
            return message;
        };

        /**
         * Creates a plain object from a response_team_myinfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_team_myinfo
         * @static
         * @param {hall.response_team_myinfo} message response_team_myinfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_team_myinfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gameid = 0;
                object.nickname = "";
                object.head_img_url = "";
                object.invited_code = "";
                object.share_ratio = 0;
                object.notice = "";
                object.wx = "";
                object.qq = "";
                object.club_name = "";
            }
            if (message.gameid != null && message.hasOwnProperty("gameid"))
                object.gameid = message.gameid;
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                object.nickname = message.nickname;
            if (message.head_img_url != null && message.hasOwnProperty("head_img_url"))
                object.head_img_url = message.head_img_url;
            if (message.invited_code != null && message.hasOwnProperty("invited_code"))
                object.invited_code = message.invited_code;
            if (message.share_ratio != null && message.hasOwnProperty("share_ratio"))
                object.share_ratio = message.share_ratio;
            if (message.notice != null && message.hasOwnProperty("notice"))
                object.notice = message.notice;
            if (message.wx != null && message.hasOwnProperty("wx"))
                object.wx = message.wx;
            if (message.qq != null && message.hasOwnProperty("qq"))
                object.qq = message.qq;
            if (message.club_name != null && message.hasOwnProperty("club_name"))
                object.club_name = message.club_name;
            return object;
        };

        /**
         * Converts this response_team_myinfo to JSON.
         * @function toJSON
         * @memberof hall.response_team_myinfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_team_myinfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_team_myinfo;
    })();

    hall.request_team_members_info = (function() {

        /**
         * Properties of a request_team_members_info.
         * @memberof hall
         * @interface Irequest_team_members_info
         * @property {number} userid request_team_members_info userid
         * @property {string} password request_team_members_info password
         * @property {number} clubid request_team_members_info clubid
         */

        /**
         * Constructs a new request_team_members_info.
         * @memberof hall
         * @classdesc Represents a request_team_members_info.
         * @implements Irequest_team_members_info
         * @constructor
         * @param {hall.Irequest_team_members_info=} [properties] Properties to set
         */
        function request_team_members_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_team_members_info userid.
         * @member {number} userid
         * @memberof hall.request_team_members_info
         * @instance
         */
        request_team_members_info.prototype.userid = 0;

        /**
         * request_team_members_info password.
         * @member {string} password
         * @memberof hall.request_team_members_info
         * @instance
         */
        request_team_members_info.prototype.password = "";

        /**
         * request_team_members_info clubid.
         * @member {number} clubid
         * @memberof hall.request_team_members_info
         * @instance
         */
        request_team_members_info.prototype.clubid = 0;

        /**
         * Creates a new request_team_members_info instance using the specified properties.
         * @function create
         * @memberof hall.request_team_members_info
         * @static
         * @param {hall.Irequest_team_members_info=} [properties] Properties to set
         * @returns {hall.request_team_members_info} request_team_members_info instance
         */
        request_team_members_info.create = function create(properties) {
            return new request_team_members_info(properties);
        };

        /**
         * Encodes the specified request_team_members_info message. Does not implicitly {@link hall.request_team_members_info.verify|verify} messages.
         * @function encode
         * @memberof hall.request_team_members_info
         * @static
         * @param {hall.Irequest_team_members_info} message request_team_members_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_members_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.clubid);
            return writer;
        };

        /**
         * Encodes the specified request_team_members_info message, length delimited. Does not implicitly {@link hall.request_team_members_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_team_members_info
         * @static
         * @param {hall.Irequest_team_members_info} message request_team_members_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_members_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_team_members_info message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_team_members_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_team_members_info} request_team_members_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_members_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_team_members_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.clubid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("clubid"))
                throw $util.ProtocolError("missing required 'clubid'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_team_members_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_team_members_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_team_members_info} request_team_members_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_members_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_team_members_info message.
         * @function verify
         * @memberof hall.request_team_members_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_team_members_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isInteger(message.clubid))
                return "clubid: integer expected";
            return null;
        };

        /**
         * Creates a request_team_members_info message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_team_members_info
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_team_members_info} request_team_members_info
         */
        request_team_members_info.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_team_members_info)
                return object;
            var message = new $root.hall.request_team_members_info();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.clubid != null)
                message.clubid = object.clubid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a request_team_members_info message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_team_members_info
         * @static
         * @param {hall.request_team_members_info} message request_team_members_info
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_team_members_info.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.clubid = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.clubid != null && message.hasOwnProperty("clubid"))
                object.clubid = message.clubid;
            return object;
        };

        /**
         * Converts this request_team_members_info to JSON.
         * @function toJSON
         * @memberof hall.request_team_members_info
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_team_members_info.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_team_members_info;
    })();

    hall.team_member_item = (function() {

        /**
         * Properties of a team_member_item.
         * @memberof hall
         * @interface Iteam_member_item
         * @property {number} userid team_member_item userid
         * @property {number} gameid team_member_item gameid
         * @property {string} nickname team_member_item nickname
         * @property {string} head_img_url team_member_item head_img_url
         * @property {number} parent_gameid team_member_item parent_gameid
         * @property {string} last_login_date team_member_item last_login_date
         * @property {number} share_ratio team_member_item share_ratio
         * @property {number|Long} today_total_performance team_member_item today_total_performance
         * @property {number|Long} yestoday_total_performance team_member_item yestoday_total_performance
         * @property {number} today_new_members_count team_member_item today_new_members_count
         * @property {number} yestoday_new_members_count team_member_item yestoday_new_members_count
         * @property {number} direct_members_count team_member_item direct_members_count
         * @property {string} join_date team_member_item join_date
         */

        /**
         * Constructs a new team_member_item.
         * @memberof hall
         * @classdesc Represents a team_member_item.
         * @implements Iteam_member_item
         * @constructor
         * @param {hall.Iteam_member_item=} [properties] Properties to set
         */
        function team_member_item(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * team_member_item userid.
         * @member {number} userid
         * @memberof hall.team_member_item
         * @instance
         */
        team_member_item.prototype.userid = 0;

        /**
         * team_member_item gameid.
         * @member {number} gameid
         * @memberof hall.team_member_item
         * @instance
         */
        team_member_item.prototype.gameid = 0;

        /**
         * team_member_item nickname.
         * @member {string} nickname
         * @memberof hall.team_member_item
         * @instance
         */
        team_member_item.prototype.nickname = "";

        /**
         * team_member_item head_img_url.
         * @member {string} head_img_url
         * @memberof hall.team_member_item
         * @instance
         */
        team_member_item.prototype.head_img_url = "";

        /**
         * team_member_item parent_gameid.
         * @member {number} parent_gameid
         * @memberof hall.team_member_item
         * @instance
         */
        team_member_item.prototype.parent_gameid = 0;

        /**
         * team_member_item last_login_date.
         * @member {string} last_login_date
         * @memberof hall.team_member_item
         * @instance
         */
        team_member_item.prototype.last_login_date = "";

        /**
         * team_member_item share_ratio.
         * @member {number} share_ratio
         * @memberof hall.team_member_item
         * @instance
         */
        team_member_item.prototype.share_ratio = 0;

        /**
         * team_member_item today_total_performance.
         * @member {number|Long} today_total_performance
         * @memberof hall.team_member_item
         * @instance
         */
        team_member_item.prototype.today_total_performance = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * team_member_item yestoday_total_performance.
         * @member {number|Long} yestoday_total_performance
         * @memberof hall.team_member_item
         * @instance
         */
        team_member_item.prototype.yestoday_total_performance = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * team_member_item today_new_members_count.
         * @member {number} today_new_members_count
         * @memberof hall.team_member_item
         * @instance
         */
        team_member_item.prototype.today_new_members_count = 0;

        /**
         * team_member_item yestoday_new_members_count.
         * @member {number} yestoday_new_members_count
         * @memberof hall.team_member_item
         * @instance
         */
        team_member_item.prototype.yestoday_new_members_count = 0;

        /**
         * team_member_item direct_members_count.
         * @member {number} direct_members_count
         * @memberof hall.team_member_item
         * @instance
         */
        team_member_item.prototype.direct_members_count = 0;

        /**
         * team_member_item join_date.
         * @member {string} join_date
         * @memberof hall.team_member_item
         * @instance
         */
        team_member_item.prototype.join_date = "";

        /**
         * Creates a new team_member_item instance using the specified properties.
         * @function create
         * @memberof hall.team_member_item
         * @static
         * @param {hall.Iteam_member_item=} [properties] Properties to set
         * @returns {hall.team_member_item} team_member_item instance
         */
        team_member_item.create = function create(properties) {
            return new team_member_item(properties);
        };

        /**
         * Encodes the specified team_member_item message. Does not implicitly {@link hall.team_member_item.verify|verify} messages.
         * @function encode
         * @memberof hall.team_member_item
         * @static
         * @param {hall.Iteam_member_item} message team_member_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        team_member_item.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gameid);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.nickname);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.head_img_url);
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.parent_gameid);
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.last_login_date);
            writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.share_ratio);
            writer.uint32(/* id 8, wireType 0 =*/64).sint64(message.today_total_performance);
            writer.uint32(/* id 9, wireType 0 =*/72).sint64(message.yestoday_total_performance);
            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.today_new_members_count);
            writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.yestoday_new_members_count);
            writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.direct_members_count);
            writer.uint32(/* id 13, wireType 2 =*/106).string(message.join_date);
            return writer;
        };

        /**
         * Encodes the specified team_member_item message, length delimited. Does not implicitly {@link hall.team_member_item.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.team_member_item
         * @static
         * @param {hall.Iteam_member_item} message team_member_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        team_member_item.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a team_member_item message from the specified reader or buffer.
         * @function decode
         * @memberof hall.team_member_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.team_member_item} team_member_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        team_member_item.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.team_member_item();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.gameid = reader.uint32();
                    break;
                case 3:
                    message.nickname = reader.string();
                    break;
                case 4:
                    message.head_img_url = reader.string();
                    break;
                case 5:
                    message.parent_gameid = reader.uint32();
                    break;
                case 6:
                    message.last_login_date = reader.string();
                    break;
                case 7:
                    message.share_ratio = reader.uint32();
                    break;
                case 8:
                    message.today_total_performance = reader.sint64();
                    break;
                case 9:
                    message.yestoday_total_performance = reader.sint64();
                    break;
                case 10:
                    message.today_new_members_count = reader.uint32();
                    break;
                case 11:
                    message.yestoday_new_members_count = reader.uint32();
                    break;
                case 12:
                    message.direct_members_count = reader.uint32();
                    break;
                case 13:
                    message.join_date = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("gameid"))
                throw $util.ProtocolError("missing required 'gameid'", { instance: message });
            if (!message.hasOwnProperty("nickname"))
                throw $util.ProtocolError("missing required 'nickname'", { instance: message });
            if (!message.hasOwnProperty("head_img_url"))
                throw $util.ProtocolError("missing required 'head_img_url'", { instance: message });
            if (!message.hasOwnProperty("parent_gameid"))
                throw $util.ProtocolError("missing required 'parent_gameid'", { instance: message });
            if (!message.hasOwnProperty("last_login_date"))
                throw $util.ProtocolError("missing required 'last_login_date'", { instance: message });
            if (!message.hasOwnProperty("share_ratio"))
                throw $util.ProtocolError("missing required 'share_ratio'", { instance: message });
            if (!message.hasOwnProperty("today_total_performance"))
                throw $util.ProtocolError("missing required 'today_total_performance'", { instance: message });
            if (!message.hasOwnProperty("yestoday_total_performance"))
                throw $util.ProtocolError("missing required 'yestoday_total_performance'", { instance: message });
            if (!message.hasOwnProperty("today_new_members_count"))
                throw $util.ProtocolError("missing required 'today_new_members_count'", { instance: message });
            if (!message.hasOwnProperty("yestoday_new_members_count"))
                throw $util.ProtocolError("missing required 'yestoday_new_members_count'", { instance: message });
            if (!message.hasOwnProperty("direct_members_count"))
                throw $util.ProtocolError("missing required 'direct_members_count'", { instance: message });
            if (!message.hasOwnProperty("join_date"))
                throw $util.ProtocolError("missing required 'join_date'", { instance: message });
            return message;
        };

        /**
         * Decodes a team_member_item message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.team_member_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.team_member_item} team_member_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        team_member_item.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a team_member_item message.
         * @function verify
         * @memberof hall.team_member_item
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        team_member_item.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isInteger(message.gameid))
                return "gameid: integer expected";
            if (!$util.isString(message.nickname))
                return "nickname: string expected";
            if (!$util.isString(message.head_img_url))
                return "head_img_url: string expected";
            if (!$util.isInteger(message.parent_gameid))
                return "parent_gameid: integer expected";
            if (!$util.isString(message.last_login_date))
                return "last_login_date: string expected";
            if (!$util.isInteger(message.share_ratio))
                return "share_ratio: integer expected";
            if (!$util.isInteger(message.today_total_performance) && !(message.today_total_performance && $util.isInteger(message.today_total_performance.low) && $util.isInteger(message.today_total_performance.high)))
                return "today_total_performance: integer|Long expected";
            if (!$util.isInteger(message.yestoday_total_performance) && !(message.yestoday_total_performance && $util.isInteger(message.yestoday_total_performance.low) && $util.isInteger(message.yestoday_total_performance.high)))
                return "yestoday_total_performance: integer|Long expected";
            if (!$util.isInteger(message.today_new_members_count))
                return "today_new_members_count: integer expected";
            if (!$util.isInteger(message.yestoday_new_members_count))
                return "yestoday_new_members_count: integer expected";
            if (!$util.isInteger(message.direct_members_count))
                return "direct_members_count: integer expected";
            if (!$util.isString(message.join_date))
                return "join_date: string expected";
            return null;
        };

        /**
         * Creates a team_member_item message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.team_member_item
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.team_member_item} team_member_item
         */
        team_member_item.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.team_member_item)
                return object;
            var message = new $root.hall.team_member_item();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.gameid != null)
                message.gameid = object.gameid >>> 0;
            if (object.nickname != null)
                message.nickname = String(object.nickname);
            if (object.head_img_url != null)
                message.head_img_url = String(object.head_img_url);
            if (object.parent_gameid != null)
                message.parent_gameid = object.parent_gameid >>> 0;
            if (object.last_login_date != null)
                message.last_login_date = String(object.last_login_date);
            if (object.share_ratio != null)
                message.share_ratio = object.share_ratio >>> 0;
            if (object.today_total_performance != null)
                if ($util.Long)
                    (message.today_total_performance = $util.Long.fromValue(object.today_total_performance)).unsigned = false;
                else if (typeof object.today_total_performance === "string")
                    message.today_total_performance = parseInt(object.today_total_performance, 10);
                else if (typeof object.today_total_performance === "number")
                    message.today_total_performance = object.today_total_performance;
                else if (typeof object.today_total_performance === "object")
                    message.today_total_performance = new $util.LongBits(object.today_total_performance.low >>> 0, object.today_total_performance.high >>> 0).toNumber();
            if (object.yestoday_total_performance != null)
                if ($util.Long)
                    (message.yestoday_total_performance = $util.Long.fromValue(object.yestoday_total_performance)).unsigned = false;
                else if (typeof object.yestoday_total_performance === "string")
                    message.yestoday_total_performance = parseInt(object.yestoday_total_performance, 10);
                else if (typeof object.yestoday_total_performance === "number")
                    message.yestoday_total_performance = object.yestoday_total_performance;
                else if (typeof object.yestoday_total_performance === "object")
                    message.yestoday_total_performance = new $util.LongBits(object.yestoday_total_performance.low >>> 0, object.yestoday_total_performance.high >>> 0).toNumber();
            if (object.today_new_members_count != null)
                message.today_new_members_count = object.today_new_members_count >>> 0;
            if (object.yestoday_new_members_count != null)
                message.yestoday_new_members_count = object.yestoday_new_members_count >>> 0;
            if (object.direct_members_count != null)
                message.direct_members_count = object.direct_members_count >>> 0;
            if (object.join_date != null)
                message.join_date = String(object.join_date);
            return message;
        };

        /**
         * Creates a plain object from a team_member_item message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.team_member_item
         * @static
         * @param {hall.team_member_item} message team_member_item
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        team_member_item.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.gameid = 0;
                object.nickname = "";
                object.head_img_url = "";
                object.parent_gameid = 0;
                object.last_login_date = "";
                object.share_ratio = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.today_total_performance = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.today_total_performance = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.yestoday_total_performance = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.yestoday_total_performance = options.longs === String ? "0" : 0;
                object.today_new_members_count = 0;
                object.yestoday_new_members_count = 0;
                object.direct_members_count = 0;
                object.join_date = "";
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.gameid != null && message.hasOwnProperty("gameid"))
                object.gameid = message.gameid;
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                object.nickname = message.nickname;
            if (message.head_img_url != null && message.hasOwnProperty("head_img_url"))
                object.head_img_url = message.head_img_url;
            if (message.parent_gameid != null && message.hasOwnProperty("parent_gameid"))
                object.parent_gameid = message.parent_gameid;
            if (message.last_login_date != null && message.hasOwnProperty("last_login_date"))
                object.last_login_date = message.last_login_date;
            if (message.share_ratio != null && message.hasOwnProperty("share_ratio"))
                object.share_ratio = message.share_ratio;
            if (message.today_total_performance != null && message.hasOwnProperty("today_total_performance"))
                if (typeof message.today_total_performance === "number")
                    object.today_total_performance = options.longs === String ? String(message.today_total_performance) : message.today_total_performance;
                else
                    object.today_total_performance = options.longs === String ? $util.Long.prototype.toString.call(message.today_total_performance) : options.longs === Number ? new $util.LongBits(message.today_total_performance.low >>> 0, message.today_total_performance.high >>> 0).toNumber() : message.today_total_performance;
            if (message.yestoday_total_performance != null && message.hasOwnProperty("yestoday_total_performance"))
                if (typeof message.yestoday_total_performance === "number")
                    object.yestoday_total_performance = options.longs === String ? String(message.yestoday_total_performance) : message.yestoday_total_performance;
                else
                    object.yestoday_total_performance = options.longs === String ? $util.Long.prototype.toString.call(message.yestoday_total_performance) : options.longs === Number ? new $util.LongBits(message.yestoday_total_performance.low >>> 0, message.yestoday_total_performance.high >>> 0).toNumber() : message.yestoday_total_performance;
            if (message.today_new_members_count != null && message.hasOwnProperty("today_new_members_count"))
                object.today_new_members_count = message.today_new_members_count;
            if (message.yestoday_new_members_count != null && message.hasOwnProperty("yestoday_new_members_count"))
                object.yestoday_new_members_count = message.yestoday_new_members_count;
            if (message.direct_members_count != null && message.hasOwnProperty("direct_members_count"))
                object.direct_members_count = message.direct_members_count;
            if (message.join_date != null && message.hasOwnProperty("join_date"))
                object.join_date = message.join_date;
            return object;
        };

        /**
         * Converts this team_member_item to JSON.
         * @function toJSON
         * @memberof hall.team_member_item
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        team_member_item.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return team_member_item;
    })();

    hall.response_team_members_info = (function() {

        /**
         * Properties of a response_team_members_info.
         * @memberof hall
         * @interface Iresponse_team_members_info
         * @property {number} share_ratio response_team_members_info share_ratio
         * @property {boolean} auto_be_partner response_team_members_info auto_be_partner
         * @property {number} auto_partner_share_ratio response_team_members_info auto_partner_share_ratio
         * @property {Array.<hall.Iteam_member_item>|null} [direct_partner_items] response_team_members_info direct_partner_items
         * @property {Array.<hall.Iteam_member_item>|null} [direct_member_items] response_team_members_info direct_member_items
         * @property {Array.<hall.Iteam_member_item>|null} [member_items] response_team_members_info member_items
         */

        /**
         * Constructs a new response_team_members_info.
         * @memberof hall
         * @classdesc Represents a response_team_members_info.
         * @implements Iresponse_team_members_info
         * @constructor
         * @param {hall.Iresponse_team_members_info=} [properties] Properties to set
         */
        function response_team_members_info(properties) {
            this.direct_partner_items = [];
            this.direct_member_items = [];
            this.member_items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_team_members_info share_ratio.
         * @member {number} share_ratio
         * @memberof hall.response_team_members_info
         * @instance
         */
        response_team_members_info.prototype.share_ratio = 0;

        /**
         * response_team_members_info auto_be_partner.
         * @member {boolean} auto_be_partner
         * @memberof hall.response_team_members_info
         * @instance
         */
        response_team_members_info.prototype.auto_be_partner = false;

        /**
         * response_team_members_info auto_partner_share_ratio.
         * @member {number} auto_partner_share_ratio
         * @memberof hall.response_team_members_info
         * @instance
         */
        response_team_members_info.prototype.auto_partner_share_ratio = 0;

        /**
         * response_team_members_info direct_partner_items.
         * @member {Array.<hall.Iteam_member_item>} direct_partner_items
         * @memberof hall.response_team_members_info
         * @instance
         */
        response_team_members_info.prototype.direct_partner_items = $util.emptyArray;

        /**
         * response_team_members_info direct_member_items.
         * @member {Array.<hall.Iteam_member_item>} direct_member_items
         * @memberof hall.response_team_members_info
         * @instance
         */
        response_team_members_info.prototype.direct_member_items = $util.emptyArray;

        /**
         * response_team_members_info member_items.
         * @member {Array.<hall.Iteam_member_item>} member_items
         * @memberof hall.response_team_members_info
         * @instance
         */
        response_team_members_info.prototype.member_items = $util.emptyArray;

        /**
         * Creates a new response_team_members_info instance using the specified properties.
         * @function create
         * @memberof hall.response_team_members_info
         * @static
         * @param {hall.Iresponse_team_members_info=} [properties] Properties to set
         * @returns {hall.response_team_members_info} response_team_members_info instance
         */
        response_team_members_info.create = function create(properties) {
            return new response_team_members_info(properties);
        };

        /**
         * Encodes the specified response_team_members_info message. Does not implicitly {@link hall.response_team_members_info.verify|verify} messages.
         * @function encode
         * @memberof hall.response_team_members_info
         * @static
         * @param {hall.Iresponse_team_members_info} message response_team_members_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_members_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.share_ratio);
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.auto_be_partner);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.auto_partner_share_ratio);
            if (message.direct_partner_items != null && message.direct_partner_items.length)
                for (var i = 0; i < message.direct_partner_items.length; ++i)
                    $root.hall.team_member_item.encode(message.direct_partner_items[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.direct_member_items != null && message.direct_member_items.length)
                for (var i = 0; i < message.direct_member_items.length; ++i)
                    $root.hall.team_member_item.encode(message.direct_member_items[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.member_items != null && message.member_items.length)
                for (var i = 0; i < message.member_items.length; ++i)
                    $root.hall.team_member_item.encode(message.member_items[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified response_team_members_info message, length delimited. Does not implicitly {@link hall.response_team_members_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_team_members_info
         * @static
         * @param {hall.Iresponse_team_members_info} message response_team_members_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_members_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_team_members_info message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_team_members_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_team_members_info} response_team_members_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_members_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_team_members_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.share_ratio = reader.uint32();
                    break;
                case 2:
                    message.auto_be_partner = reader.bool();
                    break;
                case 3:
                    message.auto_partner_share_ratio = reader.uint32();
                    break;
                case 4:
                    if (!(message.direct_partner_items && message.direct_partner_items.length))
                        message.direct_partner_items = [];
                    message.direct_partner_items.push($root.hall.team_member_item.decode(reader, reader.uint32()));
                    break;
                case 5:
                    if (!(message.direct_member_items && message.direct_member_items.length))
                        message.direct_member_items = [];
                    message.direct_member_items.push($root.hall.team_member_item.decode(reader, reader.uint32()));
                    break;
                case 6:
                    if (!(message.member_items && message.member_items.length))
                        message.member_items = [];
                    message.member_items.push($root.hall.team_member_item.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("share_ratio"))
                throw $util.ProtocolError("missing required 'share_ratio'", { instance: message });
            if (!message.hasOwnProperty("auto_be_partner"))
                throw $util.ProtocolError("missing required 'auto_be_partner'", { instance: message });
            if (!message.hasOwnProperty("auto_partner_share_ratio"))
                throw $util.ProtocolError("missing required 'auto_partner_share_ratio'", { instance: message });
            return message;
        };

        /**
         * Decodes a response_team_members_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_team_members_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_team_members_info} response_team_members_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_members_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_team_members_info message.
         * @function verify
         * @memberof hall.response_team_members_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_team_members_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.share_ratio))
                return "share_ratio: integer expected";
            if (typeof message.auto_be_partner !== "boolean")
                return "auto_be_partner: boolean expected";
            if (!$util.isInteger(message.auto_partner_share_ratio))
                return "auto_partner_share_ratio: integer expected";
            if (message.direct_partner_items != null && message.hasOwnProperty("direct_partner_items")) {
                if (!Array.isArray(message.direct_partner_items))
                    return "direct_partner_items: array expected";
                for (var i = 0; i < message.direct_partner_items.length; ++i) {
                    var error = $root.hall.team_member_item.verify(message.direct_partner_items[i]);
                    if (error)
                        return "direct_partner_items." + error;
                }
            }
            if (message.direct_member_items != null && message.hasOwnProperty("direct_member_items")) {
                if (!Array.isArray(message.direct_member_items))
                    return "direct_member_items: array expected";
                for (var i = 0; i < message.direct_member_items.length; ++i) {
                    var error = $root.hall.team_member_item.verify(message.direct_member_items[i]);
                    if (error)
                        return "direct_member_items." + error;
                }
            }
            if (message.member_items != null && message.hasOwnProperty("member_items")) {
                if (!Array.isArray(message.member_items))
                    return "member_items: array expected";
                for (var i = 0; i < message.member_items.length; ++i) {
                    var error = $root.hall.team_member_item.verify(message.member_items[i]);
                    if (error)
                        return "member_items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a response_team_members_info message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_team_members_info
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_team_members_info} response_team_members_info
         */
        response_team_members_info.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_team_members_info)
                return object;
            var message = new $root.hall.response_team_members_info();
            if (object.share_ratio != null)
                message.share_ratio = object.share_ratio >>> 0;
            if (object.auto_be_partner != null)
                message.auto_be_partner = Boolean(object.auto_be_partner);
            if (object.auto_partner_share_ratio != null)
                message.auto_partner_share_ratio = object.auto_partner_share_ratio >>> 0;
            if (object.direct_partner_items) {
                if (!Array.isArray(object.direct_partner_items))
                    throw TypeError(".hall.response_team_members_info.direct_partner_items: array expected");
                message.direct_partner_items = [];
                for (var i = 0; i < object.direct_partner_items.length; ++i) {
                    if (typeof object.direct_partner_items[i] !== "object")
                        throw TypeError(".hall.response_team_members_info.direct_partner_items: object expected");
                    message.direct_partner_items[i] = $root.hall.team_member_item.fromObject(object.direct_partner_items[i]);
                }
            }
            if (object.direct_member_items) {
                if (!Array.isArray(object.direct_member_items))
                    throw TypeError(".hall.response_team_members_info.direct_member_items: array expected");
                message.direct_member_items = [];
                for (var i = 0; i < object.direct_member_items.length; ++i) {
                    if (typeof object.direct_member_items[i] !== "object")
                        throw TypeError(".hall.response_team_members_info.direct_member_items: object expected");
                    message.direct_member_items[i] = $root.hall.team_member_item.fromObject(object.direct_member_items[i]);
                }
            }
            if (object.member_items) {
                if (!Array.isArray(object.member_items))
                    throw TypeError(".hall.response_team_members_info.member_items: array expected");
                message.member_items = [];
                for (var i = 0; i < object.member_items.length; ++i) {
                    if (typeof object.member_items[i] !== "object")
                        throw TypeError(".hall.response_team_members_info.member_items: object expected");
                    message.member_items[i] = $root.hall.team_member_item.fromObject(object.member_items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a response_team_members_info message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_team_members_info
         * @static
         * @param {hall.response_team_members_info} message response_team_members_info
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_team_members_info.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.direct_partner_items = [];
                object.direct_member_items = [];
                object.member_items = [];
            }
            if (options.defaults) {
                object.share_ratio = 0;
                object.auto_be_partner = false;
                object.auto_partner_share_ratio = 0;
            }
            if (message.share_ratio != null && message.hasOwnProperty("share_ratio"))
                object.share_ratio = message.share_ratio;
            if (message.auto_be_partner != null && message.hasOwnProperty("auto_be_partner"))
                object.auto_be_partner = message.auto_be_partner;
            if (message.auto_partner_share_ratio != null && message.hasOwnProperty("auto_partner_share_ratio"))
                object.auto_partner_share_ratio = message.auto_partner_share_ratio;
            if (message.direct_partner_items && message.direct_partner_items.length) {
                object.direct_partner_items = [];
                for (var j = 0; j < message.direct_partner_items.length; ++j)
                    object.direct_partner_items[j] = $root.hall.team_member_item.toObject(message.direct_partner_items[j], options);
            }
            if (message.direct_member_items && message.direct_member_items.length) {
                object.direct_member_items = [];
                for (var j = 0; j < message.direct_member_items.length; ++j)
                    object.direct_member_items[j] = $root.hall.team_member_item.toObject(message.direct_member_items[j], options);
            }
            if (message.member_items && message.member_items.length) {
                object.member_items = [];
                for (var j = 0; j < message.member_items.length; ++j)
                    object.member_items[j] = $root.hall.team_member_item.toObject(message.member_items[j], options);
            }
            return object;
        };

        /**
         * Converts this response_team_members_info to JSON.
         * @function toJSON
         * @memberof hall.response_team_members_info
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_team_members_info.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_team_members_info;
    })();

    hall.request_team_report_info = (function() {

        /**
         * Properties of a request_team_report_info.
         * @memberof hall
         * @interface Irequest_team_report_info
         * @property {number} userid request_team_report_info userid
         * @property {string} password request_team_report_info password
         * @property {number} clubid request_team_report_info clubid
         * @property {number} month request_team_report_info month
         */

        /**
         * Constructs a new request_team_report_info.
         * @memberof hall
         * @classdesc Represents a request_team_report_info.
         * @implements Irequest_team_report_info
         * @constructor
         * @param {hall.Irequest_team_report_info=} [properties] Properties to set
         */
        function request_team_report_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_team_report_info userid.
         * @member {number} userid
         * @memberof hall.request_team_report_info
         * @instance
         */
        request_team_report_info.prototype.userid = 0;

        /**
         * request_team_report_info password.
         * @member {string} password
         * @memberof hall.request_team_report_info
         * @instance
         */
        request_team_report_info.prototype.password = "";

        /**
         * request_team_report_info clubid.
         * @member {number} clubid
         * @memberof hall.request_team_report_info
         * @instance
         */
        request_team_report_info.prototype.clubid = 0;

        /**
         * request_team_report_info month.
         * @member {number} month
         * @memberof hall.request_team_report_info
         * @instance
         */
        request_team_report_info.prototype.month = 0;

        /**
         * Creates a new request_team_report_info instance using the specified properties.
         * @function create
         * @memberof hall.request_team_report_info
         * @static
         * @param {hall.Irequest_team_report_info=} [properties] Properties to set
         * @returns {hall.request_team_report_info} request_team_report_info instance
         */
        request_team_report_info.create = function create(properties) {
            return new request_team_report_info(properties);
        };

        /**
         * Encodes the specified request_team_report_info message. Does not implicitly {@link hall.request_team_report_info.verify|verify} messages.
         * @function encode
         * @memberof hall.request_team_report_info
         * @static
         * @param {hall.Irequest_team_report_info} message request_team_report_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_report_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.clubid);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.month);
            return writer;
        };

        /**
         * Encodes the specified request_team_report_info message, length delimited. Does not implicitly {@link hall.request_team_report_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_team_report_info
         * @static
         * @param {hall.Irequest_team_report_info} message request_team_report_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_report_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_team_report_info message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_team_report_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_team_report_info} request_team_report_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_report_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_team_report_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.clubid = reader.uint32();
                    break;
                case 4:
                    message.month = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("clubid"))
                throw $util.ProtocolError("missing required 'clubid'", { instance: message });
            if (!message.hasOwnProperty("month"))
                throw $util.ProtocolError("missing required 'month'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_team_report_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_team_report_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_team_report_info} request_team_report_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_report_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_team_report_info message.
         * @function verify
         * @memberof hall.request_team_report_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_team_report_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isInteger(message.clubid))
                return "clubid: integer expected";
            if (!$util.isInteger(message.month))
                return "month: integer expected";
            return null;
        };

        /**
         * Creates a request_team_report_info message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_team_report_info
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_team_report_info} request_team_report_info
         */
        request_team_report_info.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_team_report_info)
                return object;
            var message = new $root.hall.request_team_report_info();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.clubid != null)
                message.clubid = object.clubid >>> 0;
            if (object.month != null)
                message.month = object.month >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a request_team_report_info message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_team_report_info
         * @static
         * @param {hall.request_team_report_info} message request_team_report_info
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_team_report_info.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.clubid = 0;
                object.month = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.clubid != null && message.hasOwnProperty("clubid"))
                object.clubid = message.clubid;
            if (message.month != null && message.hasOwnProperty("month"))
                object.month = message.month;
            return object;
        };

        /**
         * Converts this request_team_report_info to JSON.
         * @function toJSON
         * @memberof hall.request_team_report_info
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_team_report_info.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_team_report_info;
    })();

    hall.team_report_item = (function() {

        /**
         * Properties of a team_report_item.
         * @memberof hall
         * @interface Iteam_report_item
         * @property {number} id team_report_item id
         * @property {string} create_date team_report_item create_date
         * @property {number|Long} performance team_report_item performance
         * @property {number} share_ratio team_report_item share_ratio
         * @property {number|Long} commission team_report_item commission
         * @property {number|Long} partner_commission team_report_item partner_commission
         * @property {number|Long} direct_members_performance team_report_item direct_members_performance
         * @property {number|Long} direct_partner_commission team_report_item direct_partner_commission
         */

        /**
         * Constructs a new team_report_item.
         * @memberof hall
         * @classdesc Represents a team_report_item.
         * @implements Iteam_report_item
         * @constructor
         * @param {hall.Iteam_report_item=} [properties] Properties to set
         */
        function team_report_item(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * team_report_item id.
         * @member {number} id
         * @memberof hall.team_report_item
         * @instance
         */
        team_report_item.prototype.id = 0;

        /**
         * team_report_item create_date.
         * @member {string} create_date
         * @memberof hall.team_report_item
         * @instance
         */
        team_report_item.prototype.create_date = "";

        /**
         * team_report_item performance.
         * @member {number|Long} performance
         * @memberof hall.team_report_item
         * @instance
         */
        team_report_item.prototype.performance = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * team_report_item share_ratio.
         * @member {number} share_ratio
         * @memberof hall.team_report_item
         * @instance
         */
        team_report_item.prototype.share_ratio = 0;

        /**
         * team_report_item commission.
         * @member {number|Long} commission
         * @memberof hall.team_report_item
         * @instance
         */
        team_report_item.prototype.commission = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * team_report_item partner_commission.
         * @member {number|Long} partner_commission
         * @memberof hall.team_report_item
         * @instance
         */
        team_report_item.prototype.partner_commission = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * team_report_item direct_members_performance.
         * @member {number|Long} direct_members_performance
         * @memberof hall.team_report_item
         * @instance
         */
        team_report_item.prototype.direct_members_performance = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * team_report_item direct_partner_commission.
         * @member {number|Long} direct_partner_commission
         * @memberof hall.team_report_item
         * @instance
         */
        team_report_item.prototype.direct_partner_commission = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new team_report_item instance using the specified properties.
         * @function create
         * @memberof hall.team_report_item
         * @static
         * @param {hall.Iteam_report_item=} [properties] Properties to set
         * @returns {hall.team_report_item} team_report_item instance
         */
        team_report_item.create = function create(properties) {
            return new team_report_item(properties);
        };

        /**
         * Encodes the specified team_report_item message. Does not implicitly {@link hall.team_report_item.verify|verify} messages.
         * @function encode
         * @memberof hall.team_report_item
         * @static
         * @param {hall.Iteam_report_item} message team_report_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        team_report_item.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.create_date);
            writer.uint32(/* id 3, wireType 0 =*/24).sint64(message.performance);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.share_ratio);
            writer.uint32(/* id 5, wireType 0 =*/40).sint64(message.commission);
            writer.uint32(/* id 6, wireType 0 =*/48).sint64(message.partner_commission);
            writer.uint32(/* id 7, wireType 0 =*/56).sint64(message.direct_members_performance);
            writer.uint32(/* id 8, wireType 0 =*/64).sint64(message.direct_partner_commission);
            return writer;
        };

        /**
         * Encodes the specified team_report_item message, length delimited. Does not implicitly {@link hall.team_report_item.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.team_report_item
         * @static
         * @param {hall.Iteam_report_item} message team_report_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        team_report_item.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a team_report_item message from the specified reader or buffer.
         * @function decode
         * @memberof hall.team_report_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.team_report_item} team_report_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        team_report_item.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.team_report_item();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.create_date = reader.string();
                    break;
                case 3:
                    message.performance = reader.sint64();
                    break;
                case 4:
                    message.share_ratio = reader.uint32();
                    break;
                case 5:
                    message.commission = reader.sint64();
                    break;
                case 6:
                    message.partner_commission = reader.sint64();
                    break;
                case 7:
                    message.direct_members_performance = reader.sint64();
                    break;
                case 8:
                    message.direct_partner_commission = reader.sint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("id"))
                throw $util.ProtocolError("missing required 'id'", { instance: message });
            if (!message.hasOwnProperty("create_date"))
                throw $util.ProtocolError("missing required 'create_date'", { instance: message });
            if (!message.hasOwnProperty("performance"))
                throw $util.ProtocolError("missing required 'performance'", { instance: message });
            if (!message.hasOwnProperty("share_ratio"))
                throw $util.ProtocolError("missing required 'share_ratio'", { instance: message });
            if (!message.hasOwnProperty("commission"))
                throw $util.ProtocolError("missing required 'commission'", { instance: message });
            if (!message.hasOwnProperty("partner_commission"))
                throw $util.ProtocolError("missing required 'partner_commission'", { instance: message });
            if (!message.hasOwnProperty("direct_members_performance"))
                throw $util.ProtocolError("missing required 'direct_members_performance'", { instance: message });
            if (!message.hasOwnProperty("direct_partner_commission"))
                throw $util.ProtocolError("missing required 'direct_partner_commission'", { instance: message });
            return message;
        };

        /**
         * Decodes a team_report_item message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.team_report_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.team_report_item} team_report_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        team_report_item.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a team_report_item message.
         * @function verify
         * @memberof hall.team_report_item
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        team_report_item.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.id))
                return "id: integer expected";
            if (!$util.isString(message.create_date))
                return "create_date: string expected";
            if (!$util.isInteger(message.performance) && !(message.performance && $util.isInteger(message.performance.low) && $util.isInteger(message.performance.high)))
                return "performance: integer|Long expected";
            if (!$util.isInteger(message.share_ratio))
                return "share_ratio: integer expected";
            if (!$util.isInteger(message.commission) && !(message.commission && $util.isInteger(message.commission.low) && $util.isInteger(message.commission.high)))
                return "commission: integer|Long expected";
            if (!$util.isInteger(message.partner_commission) && !(message.partner_commission && $util.isInteger(message.partner_commission.low) && $util.isInteger(message.partner_commission.high)))
                return "partner_commission: integer|Long expected";
            if (!$util.isInteger(message.direct_members_performance) && !(message.direct_members_performance && $util.isInteger(message.direct_members_performance.low) && $util.isInteger(message.direct_members_performance.high)))
                return "direct_members_performance: integer|Long expected";
            if (!$util.isInteger(message.direct_partner_commission) && !(message.direct_partner_commission && $util.isInteger(message.direct_partner_commission.low) && $util.isInteger(message.direct_partner_commission.high)))
                return "direct_partner_commission: integer|Long expected";
            return null;
        };

        /**
         * Creates a team_report_item message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.team_report_item
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.team_report_item} team_report_item
         */
        team_report_item.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.team_report_item)
                return object;
            var message = new $root.hall.team_report_item();
            if (object.id != null)
                message.id = object.id >>> 0;
            if (object.create_date != null)
                message.create_date = String(object.create_date);
            if (object.performance != null)
                if ($util.Long)
                    (message.performance = $util.Long.fromValue(object.performance)).unsigned = false;
                else if (typeof object.performance === "string")
                    message.performance = parseInt(object.performance, 10);
                else if (typeof object.performance === "number")
                    message.performance = object.performance;
                else if (typeof object.performance === "object")
                    message.performance = new $util.LongBits(object.performance.low >>> 0, object.performance.high >>> 0).toNumber();
            if (object.share_ratio != null)
                message.share_ratio = object.share_ratio >>> 0;
            if (object.commission != null)
                if ($util.Long)
                    (message.commission = $util.Long.fromValue(object.commission)).unsigned = false;
                else if (typeof object.commission === "string")
                    message.commission = parseInt(object.commission, 10);
                else if (typeof object.commission === "number")
                    message.commission = object.commission;
                else if (typeof object.commission === "object")
                    message.commission = new $util.LongBits(object.commission.low >>> 0, object.commission.high >>> 0).toNumber();
            if (object.partner_commission != null)
                if ($util.Long)
                    (message.partner_commission = $util.Long.fromValue(object.partner_commission)).unsigned = false;
                else if (typeof object.partner_commission === "string")
                    message.partner_commission = parseInt(object.partner_commission, 10);
                else if (typeof object.partner_commission === "number")
                    message.partner_commission = object.partner_commission;
                else if (typeof object.partner_commission === "object")
                    message.partner_commission = new $util.LongBits(object.partner_commission.low >>> 0, object.partner_commission.high >>> 0).toNumber();
            if (object.direct_members_performance != null)
                if ($util.Long)
                    (message.direct_members_performance = $util.Long.fromValue(object.direct_members_performance)).unsigned = false;
                else if (typeof object.direct_members_performance === "string")
                    message.direct_members_performance = parseInt(object.direct_members_performance, 10);
                else if (typeof object.direct_members_performance === "number")
                    message.direct_members_performance = object.direct_members_performance;
                else if (typeof object.direct_members_performance === "object")
                    message.direct_members_performance = new $util.LongBits(object.direct_members_performance.low >>> 0, object.direct_members_performance.high >>> 0).toNumber();
            if (object.direct_partner_commission != null)
                if ($util.Long)
                    (message.direct_partner_commission = $util.Long.fromValue(object.direct_partner_commission)).unsigned = false;
                else if (typeof object.direct_partner_commission === "string")
                    message.direct_partner_commission = parseInt(object.direct_partner_commission, 10);
                else if (typeof object.direct_partner_commission === "number")
                    message.direct_partner_commission = object.direct_partner_commission;
                else if (typeof object.direct_partner_commission === "object")
                    message.direct_partner_commission = new $util.LongBits(object.direct_partner_commission.low >>> 0, object.direct_partner_commission.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a team_report_item message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.team_report_item
         * @static
         * @param {hall.team_report_item} message team_report_item
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        team_report_item.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.create_date = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.performance = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.performance = options.longs === String ? "0" : 0;
                object.share_ratio = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.commission = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.commission = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.partner_commission = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.partner_commission = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.direct_members_performance = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.direct_members_performance = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.direct_partner_commission = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.direct_partner_commission = options.longs === String ? "0" : 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.create_date != null && message.hasOwnProperty("create_date"))
                object.create_date = message.create_date;
            if (message.performance != null && message.hasOwnProperty("performance"))
                if (typeof message.performance === "number")
                    object.performance = options.longs === String ? String(message.performance) : message.performance;
                else
                    object.performance = options.longs === String ? $util.Long.prototype.toString.call(message.performance) : options.longs === Number ? new $util.LongBits(message.performance.low >>> 0, message.performance.high >>> 0).toNumber() : message.performance;
            if (message.share_ratio != null && message.hasOwnProperty("share_ratio"))
                object.share_ratio = message.share_ratio;
            if (message.commission != null && message.hasOwnProperty("commission"))
                if (typeof message.commission === "number")
                    object.commission = options.longs === String ? String(message.commission) : message.commission;
                else
                    object.commission = options.longs === String ? $util.Long.prototype.toString.call(message.commission) : options.longs === Number ? new $util.LongBits(message.commission.low >>> 0, message.commission.high >>> 0).toNumber() : message.commission;
            if (message.partner_commission != null && message.hasOwnProperty("partner_commission"))
                if (typeof message.partner_commission === "number")
                    object.partner_commission = options.longs === String ? String(message.partner_commission) : message.partner_commission;
                else
                    object.partner_commission = options.longs === String ? $util.Long.prototype.toString.call(message.partner_commission) : options.longs === Number ? new $util.LongBits(message.partner_commission.low >>> 0, message.partner_commission.high >>> 0).toNumber() : message.partner_commission;
            if (message.direct_members_performance != null && message.hasOwnProperty("direct_members_performance"))
                if (typeof message.direct_members_performance === "number")
                    object.direct_members_performance = options.longs === String ? String(message.direct_members_performance) : message.direct_members_performance;
                else
                    object.direct_members_performance = options.longs === String ? $util.Long.prototype.toString.call(message.direct_members_performance) : options.longs === Number ? new $util.LongBits(message.direct_members_performance.low >>> 0, message.direct_members_performance.high >>> 0).toNumber() : message.direct_members_performance;
            if (message.direct_partner_commission != null && message.hasOwnProperty("direct_partner_commission"))
                if (typeof message.direct_partner_commission === "number")
                    object.direct_partner_commission = options.longs === String ? String(message.direct_partner_commission) : message.direct_partner_commission;
                else
                    object.direct_partner_commission = options.longs === String ? $util.Long.prototype.toString.call(message.direct_partner_commission) : options.longs === Number ? new $util.LongBits(message.direct_partner_commission.low >>> 0, message.direct_partner_commission.high >>> 0).toNumber() : message.direct_partner_commission;
            return object;
        };

        /**
         * Converts this team_report_item to JSON.
         * @function toJSON
         * @memberof hall.team_report_item
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        team_report_item.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return team_report_item;
    })();

    hall.response_team_report_info = (function() {

        /**
         * Properties of a response_team_report_info.
         * @memberof hall
         * @interface Iresponse_team_report_info
         * @property {number|Long} today_total_performance response_team_report_info today_total_performance
         * @property {number|Long} month_total_performance response_team_report_info month_total_performance
         * @property {number|Long} month_total_commission response_team_report_info month_total_commission
         * @property {Array.<hall.Iteam_report_item>|null} [items] response_team_report_info items
         */

        /**
         * Constructs a new response_team_report_info.
         * @memberof hall
         * @classdesc Represents a response_team_report_info.
         * @implements Iresponse_team_report_info
         * @constructor
         * @param {hall.Iresponse_team_report_info=} [properties] Properties to set
         */
        function response_team_report_info(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_team_report_info today_total_performance.
         * @member {number|Long} today_total_performance
         * @memberof hall.response_team_report_info
         * @instance
         */
        response_team_report_info.prototype.today_total_performance = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * response_team_report_info month_total_performance.
         * @member {number|Long} month_total_performance
         * @memberof hall.response_team_report_info
         * @instance
         */
        response_team_report_info.prototype.month_total_performance = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * response_team_report_info month_total_commission.
         * @member {number|Long} month_total_commission
         * @memberof hall.response_team_report_info
         * @instance
         */
        response_team_report_info.prototype.month_total_commission = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * response_team_report_info items.
         * @member {Array.<hall.Iteam_report_item>} items
         * @memberof hall.response_team_report_info
         * @instance
         */
        response_team_report_info.prototype.items = $util.emptyArray;

        /**
         * Creates a new response_team_report_info instance using the specified properties.
         * @function create
         * @memberof hall.response_team_report_info
         * @static
         * @param {hall.Iresponse_team_report_info=} [properties] Properties to set
         * @returns {hall.response_team_report_info} response_team_report_info instance
         */
        response_team_report_info.create = function create(properties) {
            return new response_team_report_info(properties);
        };

        /**
         * Encodes the specified response_team_report_info message. Does not implicitly {@link hall.response_team_report_info.verify|verify} messages.
         * @function encode
         * @memberof hall.response_team_report_info
         * @static
         * @param {hall.Iresponse_team_report_info} message response_team_report_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_report_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).sint64(message.today_total_performance);
            writer.uint32(/* id 2, wireType 0 =*/16).sint64(message.month_total_performance);
            writer.uint32(/* id 3, wireType 0 =*/24).sint64(message.month_total_commission);
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.hall.team_report_item.encode(message.items[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified response_team_report_info message, length delimited. Does not implicitly {@link hall.response_team_report_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_team_report_info
         * @static
         * @param {hall.Iresponse_team_report_info} message response_team_report_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_report_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_team_report_info message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_team_report_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_team_report_info} response_team_report_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_report_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_team_report_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.today_total_performance = reader.sint64();
                    break;
                case 2:
                    message.month_total_performance = reader.sint64();
                    break;
                case 3:
                    message.month_total_commission = reader.sint64();
                    break;
                case 4:
                    if (!(message.items && message.items.length))
                        message.items = [];
                    message.items.push($root.hall.team_report_item.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("today_total_performance"))
                throw $util.ProtocolError("missing required 'today_total_performance'", { instance: message });
            if (!message.hasOwnProperty("month_total_performance"))
                throw $util.ProtocolError("missing required 'month_total_performance'", { instance: message });
            if (!message.hasOwnProperty("month_total_commission"))
                throw $util.ProtocolError("missing required 'month_total_commission'", { instance: message });
            return message;
        };

        /**
         * Decodes a response_team_report_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_team_report_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_team_report_info} response_team_report_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_report_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_team_report_info message.
         * @function verify
         * @memberof hall.response_team_report_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_team_report_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.today_total_performance) && !(message.today_total_performance && $util.isInteger(message.today_total_performance.low) && $util.isInteger(message.today_total_performance.high)))
                return "today_total_performance: integer|Long expected";
            if (!$util.isInteger(message.month_total_performance) && !(message.month_total_performance && $util.isInteger(message.month_total_performance.low) && $util.isInteger(message.month_total_performance.high)))
                return "month_total_performance: integer|Long expected";
            if (!$util.isInteger(message.month_total_commission) && !(message.month_total_commission && $util.isInteger(message.month_total_commission.low) && $util.isInteger(message.month_total_commission.high)))
                return "month_total_commission: integer|Long expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.hall.team_report_item.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a response_team_report_info message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_team_report_info
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_team_report_info} response_team_report_info
         */
        response_team_report_info.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_team_report_info)
                return object;
            var message = new $root.hall.response_team_report_info();
            if (object.today_total_performance != null)
                if ($util.Long)
                    (message.today_total_performance = $util.Long.fromValue(object.today_total_performance)).unsigned = false;
                else if (typeof object.today_total_performance === "string")
                    message.today_total_performance = parseInt(object.today_total_performance, 10);
                else if (typeof object.today_total_performance === "number")
                    message.today_total_performance = object.today_total_performance;
                else if (typeof object.today_total_performance === "object")
                    message.today_total_performance = new $util.LongBits(object.today_total_performance.low >>> 0, object.today_total_performance.high >>> 0).toNumber();
            if (object.month_total_performance != null)
                if ($util.Long)
                    (message.month_total_performance = $util.Long.fromValue(object.month_total_performance)).unsigned = false;
                else if (typeof object.month_total_performance === "string")
                    message.month_total_performance = parseInt(object.month_total_performance, 10);
                else if (typeof object.month_total_performance === "number")
                    message.month_total_performance = object.month_total_performance;
                else if (typeof object.month_total_performance === "object")
                    message.month_total_performance = new $util.LongBits(object.month_total_performance.low >>> 0, object.month_total_performance.high >>> 0).toNumber();
            if (object.month_total_commission != null)
                if ($util.Long)
                    (message.month_total_commission = $util.Long.fromValue(object.month_total_commission)).unsigned = false;
                else if (typeof object.month_total_commission === "string")
                    message.month_total_commission = parseInt(object.month_total_commission, 10);
                else if (typeof object.month_total_commission === "number")
                    message.month_total_commission = object.month_total_commission;
                else if (typeof object.month_total_commission === "object")
                    message.month_total_commission = new $util.LongBits(object.month_total_commission.low >>> 0, object.month_total_commission.high >>> 0).toNumber();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".hall.response_team_report_info.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".hall.response_team_report_info.items: object expected");
                    message.items[i] = $root.hall.team_report_item.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a response_team_report_info message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_team_report_info
         * @static
         * @param {hall.response_team_report_info} message response_team_report_info
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_team_report_info.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.today_total_performance = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.today_total_performance = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.month_total_performance = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.month_total_performance = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.month_total_commission = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.month_total_commission = options.longs === String ? "0" : 0;
            }
            if (message.today_total_performance != null && message.hasOwnProperty("today_total_performance"))
                if (typeof message.today_total_performance === "number")
                    object.today_total_performance = options.longs === String ? String(message.today_total_performance) : message.today_total_performance;
                else
                    object.today_total_performance = options.longs === String ? $util.Long.prototype.toString.call(message.today_total_performance) : options.longs === Number ? new $util.LongBits(message.today_total_performance.low >>> 0, message.today_total_performance.high >>> 0).toNumber() : message.today_total_performance;
            if (message.month_total_performance != null && message.hasOwnProperty("month_total_performance"))
                if (typeof message.month_total_performance === "number")
                    object.month_total_performance = options.longs === String ? String(message.month_total_performance) : message.month_total_performance;
                else
                    object.month_total_performance = options.longs === String ? $util.Long.prototype.toString.call(message.month_total_performance) : options.longs === Number ? new $util.LongBits(message.month_total_performance.low >>> 0, message.month_total_performance.high >>> 0).toNumber() : message.month_total_performance;
            if (message.month_total_commission != null && message.hasOwnProperty("month_total_commission"))
                if (typeof message.month_total_commission === "number")
                    object.month_total_commission = options.longs === String ? String(message.month_total_commission) : message.month_total_commission;
                else
                    object.month_total_commission = options.longs === String ? $util.Long.prototype.toString.call(message.month_total_commission) : options.longs === Number ? new $util.LongBits(message.month_total_commission.low >>> 0, message.month_total_commission.high >>> 0).toNumber() : message.month_total_commission;
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.hall.team_report_item.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this response_team_report_info to JSON.
         * @function toJSON
         * @memberof hall.response_team_report_info
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_team_report_info.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_team_report_info;
    })();

    hall.request_team_partner_member_info = (function() {

        /**
         * Properties of a request_team_partner_member_info.
         * @memberof hall
         * @interface Irequest_team_partner_member_info
         * @property {number} userid request_team_partner_member_info userid
         * @property {string} password request_team_partner_member_info password
         * @property {number} clubid request_team_partner_member_info clubid
         * @property {number} partner_userid request_team_partner_member_info partner_userid
         */

        /**
         * Constructs a new request_team_partner_member_info.
         * @memberof hall
         * @classdesc Represents a request_team_partner_member_info.
         * @implements Irequest_team_partner_member_info
         * @constructor
         * @param {hall.Irequest_team_partner_member_info=} [properties] Properties to set
         */
        function request_team_partner_member_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_team_partner_member_info userid.
         * @member {number} userid
         * @memberof hall.request_team_partner_member_info
         * @instance
         */
        request_team_partner_member_info.prototype.userid = 0;

        /**
         * request_team_partner_member_info password.
         * @member {string} password
         * @memberof hall.request_team_partner_member_info
         * @instance
         */
        request_team_partner_member_info.prototype.password = "";

        /**
         * request_team_partner_member_info clubid.
         * @member {number} clubid
         * @memberof hall.request_team_partner_member_info
         * @instance
         */
        request_team_partner_member_info.prototype.clubid = 0;

        /**
         * request_team_partner_member_info partner_userid.
         * @member {number} partner_userid
         * @memberof hall.request_team_partner_member_info
         * @instance
         */
        request_team_partner_member_info.prototype.partner_userid = 0;

        /**
         * Creates a new request_team_partner_member_info instance using the specified properties.
         * @function create
         * @memberof hall.request_team_partner_member_info
         * @static
         * @param {hall.Irequest_team_partner_member_info=} [properties] Properties to set
         * @returns {hall.request_team_partner_member_info} request_team_partner_member_info instance
         */
        request_team_partner_member_info.create = function create(properties) {
            return new request_team_partner_member_info(properties);
        };

        /**
         * Encodes the specified request_team_partner_member_info message. Does not implicitly {@link hall.request_team_partner_member_info.verify|verify} messages.
         * @function encode
         * @memberof hall.request_team_partner_member_info
         * @static
         * @param {hall.Irequest_team_partner_member_info} message request_team_partner_member_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_partner_member_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.clubid);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.partner_userid);
            return writer;
        };

        /**
         * Encodes the specified request_team_partner_member_info message, length delimited. Does not implicitly {@link hall.request_team_partner_member_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_team_partner_member_info
         * @static
         * @param {hall.Irequest_team_partner_member_info} message request_team_partner_member_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_partner_member_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_team_partner_member_info message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_team_partner_member_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_team_partner_member_info} request_team_partner_member_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_partner_member_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_team_partner_member_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.clubid = reader.uint32();
                    break;
                case 4:
                    message.partner_userid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("clubid"))
                throw $util.ProtocolError("missing required 'clubid'", { instance: message });
            if (!message.hasOwnProperty("partner_userid"))
                throw $util.ProtocolError("missing required 'partner_userid'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_team_partner_member_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_team_partner_member_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_team_partner_member_info} request_team_partner_member_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_partner_member_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_team_partner_member_info message.
         * @function verify
         * @memberof hall.request_team_partner_member_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_team_partner_member_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isInteger(message.clubid))
                return "clubid: integer expected";
            if (!$util.isInteger(message.partner_userid))
                return "partner_userid: integer expected";
            return null;
        };

        /**
         * Creates a request_team_partner_member_info message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_team_partner_member_info
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_team_partner_member_info} request_team_partner_member_info
         */
        request_team_partner_member_info.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_team_partner_member_info)
                return object;
            var message = new $root.hall.request_team_partner_member_info();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.clubid != null)
                message.clubid = object.clubid >>> 0;
            if (object.partner_userid != null)
                message.partner_userid = object.partner_userid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a request_team_partner_member_info message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_team_partner_member_info
         * @static
         * @param {hall.request_team_partner_member_info} message request_team_partner_member_info
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_team_partner_member_info.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.clubid = 0;
                object.partner_userid = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.clubid != null && message.hasOwnProperty("clubid"))
                object.clubid = message.clubid;
            if (message.partner_userid != null && message.hasOwnProperty("partner_userid"))
                object.partner_userid = message.partner_userid;
            return object;
        };

        /**
         * Converts this request_team_partner_member_info to JSON.
         * @function toJSON
         * @memberof hall.request_team_partner_member_info
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_team_partner_member_info.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_team_partner_member_info;
    })();

    hall.team_partner_member_item = (function() {

        /**
         * Properties of a team_partner_member_item.
         * @memberof hall
         * @interface Iteam_partner_member_item
         * @property {number} gameid team_partner_member_item gameid
         * @property {string} nickname team_partner_member_item nickname
         * @property {string} head_img_url team_partner_member_item head_img_url
         */

        /**
         * Constructs a new team_partner_member_item.
         * @memberof hall
         * @classdesc Represents a team_partner_member_item.
         * @implements Iteam_partner_member_item
         * @constructor
         * @param {hall.Iteam_partner_member_item=} [properties] Properties to set
         */
        function team_partner_member_item(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * team_partner_member_item gameid.
         * @member {number} gameid
         * @memberof hall.team_partner_member_item
         * @instance
         */
        team_partner_member_item.prototype.gameid = 0;

        /**
         * team_partner_member_item nickname.
         * @member {string} nickname
         * @memberof hall.team_partner_member_item
         * @instance
         */
        team_partner_member_item.prototype.nickname = "";

        /**
         * team_partner_member_item head_img_url.
         * @member {string} head_img_url
         * @memberof hall.team_partner_member_item
         * @instance
         */
        team_partner_member_item.prototype.head_img_url = "";

        /**
         * Creates a new team_partner_member_item instance using the specified properties.
         * @function create
         * @memberof hall.team_partner_member_item
         * @static
         * @param {hall.Iteam_partner_member_item=} [properties] Properties to set
         * @returns {hall.team_partner_member_item} team_partner_member_item instance
         */
        team_partner_member_item.create = function create(properties) {
            return new team_partner_member_item(properties);
        };

        /**
         * Encodes the specified team_partner_member_item message. Does not implicitly {@link hall.team_partner_member_item.verify|verify} messages.
         * @function encode
         * @memberof hall.team_partner_member_item
         * @static
         * @param {hall.Iteam_partner_member_item} message team_partner_member_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        team_partner_member_item.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.gameid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.nickname);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.head_img_url);
            return writer;
        };

        /**
         * Encodes the specified team_partner_member_item message, length delimited. Does not implicitly {@link hall.team_partner_member_item.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.team_partner_member_item
         * @static
         * @param {hall.Iteam_partner_member_item} message team_partner_member_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        team_partner_member_item.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a team_partner_member_item message from the specified reader or buffer.
         * @function decode
         * @memberof hall.team_partner_member_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.team_partner_member_item} team_partner_member_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        team_partner_member_item.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.team_partner_member_item();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.gameid = reader.uint32();
                    break;
                case 2:
                    message.nickname = reader.string();
                    break;
                case 3:
                    message.head_img_url = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("gameid"))
                throw $util.ProtocolError("missing required 'gameid'", { instance: message });
            if (!message.hasOwnProperty("nickname"))
                throw $util.ProtocolError("missing required 'nickname'", { instance: message });
            if (!message.hasOwnProperty("head_img_url"))
                throw $util.ProtocolError("missing required 'head_img_url'", { instance: message });
            return message;
        };

        /**
         * Decodes a team_partner_member_item message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.team_partner_member_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.team_partner_member_item} team_partner_member_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        team_partner_member_item.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a team_partner_member_item message.
         * @function verify
         * @memberof hall.team_partner_member_item
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        team_partner_member_item.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.gameid))
                return "gameid: integer expected";
            if (!$util.isString(message.nickname))
                return "nickname: string expected";
            if (!$util.isString(message.head_img_url))
                return "head_img_url: string expected";
            return null;
        };

        /**
         * Creates a team_partner_member_item message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.team_partner_member_item
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.team_partner_member_item} team_partner_member_item
         */
        team_partner_member_item.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.team_partner_member_item)
                return object;
            var message = new $root.hall.team_partner_member_item();
            if (object.gameid != null)
                message.gameid = object.gameid >>> 0;
            if (object.nickname != null)
                message.nickname = String(object.nickname);
            if (object.head_img_url != null)
                message.head_img_url = String(object.head_img_url);
            return message;
        };

        /**
         * Creates a plain object from a team_partner_member_item message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.team_partner_member_item
         * @static
         * @param {hall.team_partner_member_item} message team_partner_member_item
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        team_partner_member_item.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gameid = 0;
                object.nickname = "";
                object.head_img_url = "";
            }
            if (message.gameid != null && message.hasOwnProperty("gameid"))
                object.gameid = message.gameid;
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                object.nickname = message.nickname;
            if (message.head_img_url != null && message.hasOwnProperty("head_img_url"))
                object.head_img_url = message.head_img_url;
            return object;
        };

        /**
         * Converts this team_partner_member_item to JSON.
         * @function toJSON
         * @memberof hall.team_partner_member_item
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        team_partner_member_item.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return team_partner_member_item;
    })();

    hall.response_team_partner_member_info = (function() {

        /**
         * Properties of a response_team_partner_member_info.
         * @memberof hall
         * @interface Iresponse_team_partner_member_info
         * @property {Array.<hall.Iteam_partner_member_item>|null} [items] response_team_partner_member_info items
         */

        /**
         * Constructs a new response_team_partner_member_info.
         * @memberof hall
         * @classdesc Represents a response_team_partner_member_info.
         * @implements Iresponse_team_partner_member_info
         * @constructor
         * @param {hall.Iresponse_team_partner_member_info=} [properties] Properties to set
         */
        function response_team_partner_member_info(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_team_partner_member_info items.
         * @member {Array.<hall.Iteam_partner_member_item>} items
         * @memberof hall.response_team_partner_member_info
         * @instance
         */
        response_team_partner_member_info.prototype.items = $util.emptyArray;

        /**
         * Creates a new response_team_partner_member_info instance using the specified properties.
         * @function create
         * @memberof hall.response_team_partner_member_info
         * @static
         * @param {hall.Iresponse_team_partner_member_info=} [properties] Properties to set
         * @returns {hall.response_team_partner_member_info} response_team_partner_member_info instance
         */
        response_team_partner_member_info.create = function create(properties) {
            return new response_team_partner_member_info(properties);
        };

        /**
         * Encodes the specified response_team_partner_member_info message. Does not implicitly {@link hall.response_team_partner_member_info.verify|verify} messages.
         * @function encode
         * @memberof hall.response_team_partner_member_info
         * @static
         * @param {hall.Iresponse_team_partner_member_info} message response_team_partner_member_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_partner_member_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.hall.team_partner_member_item.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified response_team_partner_member_info message, length delimited. Does not implicitly {@link hall.response_team_partner_member_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_team_partner_member_info
         * @static
         * @param {hall.Iresponse_team_partner_member_info} message response_team_partner_member_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_partner_member_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_team_partner_member_info message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_team_partner_member_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_team_partner_member_info} response_team_partner_member_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_partner_member_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_team_partner_member_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.items && message.items.length))
                        message.items = [];
                    message.items.push($root.hall.team_partner_member_item.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a response_team_partner_member_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_team_partner_member_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_team_partner_member_info} response_team_partner_member_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_partner_member_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_team_partner_member_info message.
         * @function verify
         * @memberof hall.response_team_partner_member_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_team_partner_member_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.hall.team_partner_member_item.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a response_team_partner_member_info message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_team_partner_member_info
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_team_partner_member_info} response_team_partner_member_info
         */
        response_team_partner_member_info.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_team_partner_member_info)
                return object;
            var message = new $root.hall.response_team_partner_member_info();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".hall.response_team_partner_member_info.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".hall.response_team_partner_member_info.items: object expected");
                    message.items[i] = $root.hall.team_partner_member_item.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a response_team_partner_member_info message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_team_partner_member_info
         * @static
         * @param {hall.response_team_partner_member_info} message response_team_partner_member_info
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_team_partner_member_info.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.hall.team_partner_member_item.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this response_team_partner_member_info to JSON.
         * @function toJSON
         * @memberof hall.response_team_partner_member_info
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_team_partner_member_info.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_team_partner_member_info;
    })();

    hall.request_team_report_member_info = (function() {

        /**
         * Properties of a request_team_report_member_info.
         * @memberof hall
         * @interface Irequest_team_report_member_info
         * @property {number} userid request_team_report_member_info userid
         * @property {string} password request_team_report_member_info password
         * @property {number} clubid request_team_report_member_info clubid
         * @property {number} id request_team_report_member_info id
         */

        /**
         * Constructs a new request_team_report_member_info.
         * @memberof hall
         * @classdesc Represents a request_team_report_member_info.
         * @implements Irequest_team_report_member_info
         * @constructor
         * @param {hall.Irequest_team_report_member_info=} [properties] Properties to set
         */
        function request_team_report_member_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_team_report_member_info userid.
         * @member {number} userid
         * @memberof hall.request_team_report_member_info
         * @instance
         */
        request_team_report_member_info.prototype.userid = 0;

        /**
         * request_team_report_member_info password.
         * @member {string} password
         * @memberof hall.request_team_report_member_info
         * @instance
         */
        request_team_report_member_info.prototype.password = "";

        /**
         * request_team_report_member_info clubid.
         * @member {number} clubid
         * @memberof hall.request_team_report_member_info
         * @instance
         */
        request_team_report_member_info.prototype.clubid = 0;

        /**
         * request_team_report_member_info id.
         * @member {number} id
         * @memberof hall.request_team_report_member_info
         * @instance
         */
        request_team_report_member_info.prototype.id = 0;

        /**
         * Creates a new request_team_report_member_info instance using the specified properties.
         * @function create
         * @memberof hall.request_team_report_member_info
         * @static
         * @param {hall.Irequest_team_report_member_info=} [properties] Properties to set
         * @returns {hall.request_team_report_member_info} request_team_report_member_info instance
         */
        request_team_report_member_info.create = function create(properties) {
            return new request_team_report_member_info(properties);
        };

        /**
         * Encodes the specified request_team_report_member_info message. Does not implicitly {@link hall.request_team_report_member_info.verify|verify} messages.
         * @function encode
         * @memberof hall.request_team_report_member_info
         * @static
         * @param {hall.Irequest_team_report_member_info} message request_team_report_member_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_report_member_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.clubid);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.id);
            return writer;
        };

        /**
         * Encodes the specified request_team_report_member_info message, length delimited. Does not implicitly {@link hall.request_team_report_member_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_team_report_member_info
         * @static
         * @param {hall.Irequest_team_report_member_info} message request_team_report_member_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_report_member_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_team_report_member_info message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_team_report_member_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_team_report_member_info} request_team_report_member_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_report_member_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_team_report_member_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.clubid = reader.uint32();
                    break;
                case 4:
                    message.id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("clubid"))
                throw $util.ProtocolError("missing required 'clubid'", { instance: message });
            if (!message.hasOwnProperty("id"))
                throw $util.ProtocolError("missing required 'id'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_team_report_member_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_team_report_member_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_team_report_member_info} request_team_report_member_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_report_member_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_team_report_member_info message.
         * @function verify
         * @memberof hall.request_team_report_member_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_team_report_member_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isInteger(message.clubid))
                return "clubid: integer expected";
            if (!$util.isInteger(message.id))
                return "id: integer expected";
            return null;
        };

        /**
         * Creates a request_team_report_member_info message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_team_report_member_info
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_team_report_member_info} request_team_report_member_info
         */
        request_team_report_member_info.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_team_report_member_info)
                return object;
            var message = new $root.hall.request_team_report_member_info();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.clubid != null)
                message.clubid = object.clubid >>> 0;
            if (object.id != null)
                message.id = object.id >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a request_team_report_member_info message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_team_report_member_info
         * @static
         * @param {hall.request_team_report_member_info} message request_team_report_member_info
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_team_report_member_info.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.clubid = 0;
                object.id = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.clubid != null && message.hasOwnProperty("clubid"))
                object.clubid = message.clubid;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            return object;
        };

        /**
         * Converts this request_team_report_member_info to JSON.
         * @function toJSON
         * @memberof hall.request_team_report_member_info
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_team_report_member_info.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_team_report_member_info;
    })();

    hall.team_report_member_item = (function() {

        /**
         * Properties of a team_report_member_item.
         * @memberof hall
         * @interface Iteam_report_member_item
         * @property {number} gameid team_report_member_item gameid
         * @property {string} nickname team_report_member_item nickname
         * @property {boolean} partner team_report_member_item partner
         * @property {string} date team_report_member_item date
         * @property {number|Long} performance team_report_member_item performance
         * @property {number} share_ratio team_report_member_item share_ratio
         * @property {number|Long} commission team_report_member_item commission
         */

        /**
         * Constructs a new team_report_member_item.
         * @memberof hall
         * @classdesc Represents a team_report_member_item.
         * @implements Iteam_report_member_item
         * @constructor
         * @param {hall.Iteam_report_member_item=} [properties] Properties to set
         */
        function team_report_member_item(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * team_report_member_item gameid.
         * @member {number} gameid
         * @memberof hall.team_report_member_item
         * @instance
         */
        team_report_member_item.prototype.gameid = 0;

        /**
         * team_report_member_item nickname.
         * @member {string} nickname
         * @memberof hall.team_report_member_item
         * @instance
         */
        team_report_member_item.prototype.nickname = "";

        /**
         * team_report_member_item partner.
         * @member {boolean} partner
         * @memberof hall.team_report_member_item
         * @instance
         */
        team_report_member_item.prototype.partner = false;

        /**
         * team_report_member_item date.
         * @member {string} date
         * @memberof hall.team_report_member_item
         * @instance
         */
        team_report_member_item.prototype.date = "";

        /**
         * team_report_member_item performance.
         * @member {number|Long} performance
         * @memberof hall.team_report_member_item
         * @instance
         */
        team_report_member_item.prototype.performance = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * team_report_member_item share_ratio.
         * @member {number} share_ratio
         * @memberof hall.team_report_member_item
         * @instance
         */
        team_report_member_item.prototype.share_ratio = 0;

        /**
         * team_report_member_item commission.
         * @member {number|Long} commission
         * @memberof hall.team_report_member_item
         * @instance
         */
        team_report_member_item.prototype.commission = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new team_report_member_item instance using the specified properties.
         * @function create
         * @memberof hall.team_report_member_item
         * @static
         * @param {hall.Iteam_report_member_item=} [properties] Properties to set
         * @returns {hall.team_report_member_item} team_report_member_item instance
         */
        team_report_member_item.create = function create(properties) {
            return new team_report_member_item(properties);
        };

        /**
         * Encodes the specified team_report_member_item message. Does not implicitly {@link hall.team_report_member_item.verify|verify} messages.
         * @function encode
         * @memberof hall.team_report_member_item
         * @static
         * @param {hall.Iteam_report_member_item} message team_report_member_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        team_report_member_item.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.gameid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.nickname);
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.partner);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.date);
            writer.uint32(/* id 5, wireType 0 =*/40).sint64(message.performance);
            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.share_ratio);
            writer.uint32(/* id 7, wireType 0 =*/56).sint64(message.commission);
            return writer;
        };

        /**
         * Encodes the specified team_report_member_item message, length delimited. Does not implicitly {@link hall.team_report_member_item.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.team_report_member_item
         * @static
         * @param {hall.Iteam_report_member_item} message team_report_member_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        team_report_member_item.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a team_report_member_item message from the specified reader or buffer.
         * @function decode
         * @memberof hall.team_report_member_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.team_report_member_item} team_report_member_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        team_report_member_item.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.team_report_member_item();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.gameid = reader.uint32();
                    break;
                case 2:
                    message.nickname = reader.string();
                    break;
                case 3:
                    message.partner = reader.bool();
                    break;
                case 4:
                    message.date = reader.string();
                    break;
                case 5:
                    message.performance = reader.sint64();
                    break;
                case 6:
                    message.share_ratio = reader.uint32();
                    break;
                case 7:
                    message.commission = reader.sint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("gameid"))
                throw $util.ProtocolError("missing required 'gameid'", { instance: message });
            if (!message.hasOwnProperty("nickname"))
                throw $util.ProtocolError("missing required 'nickname'", { instance: message });
            if (!message.hasOwnProperty("partner"))
                throw $util.ProtocolError("missing required 'partner'", { instance: message });
            if (!message.hasOwnProperty("date"))
                throw $util.ProtocolError("missing required 'date'", { instance: message });
            if (!message.hasOwnProperty("performance"))
                throw $util.ProtocolError("missing required 'performance'", { instance: message });
            if (!message.hasOwnProperty("share_ratio"))
                throw $util.ProtocolError("missing required 'share_ratio'", { instance: message });
            if (!message.hasOwnProperty("commission"))
                throw $util.ProtocolError("missing required 'commission'", { instance: message });
            return message;
        };

        /**
         * Decodes a team_report_member_item message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.team_report_member_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.team_report_member_item} team_report_member_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        team_report_member_item.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a team_report_member_item message.
         * @function verify
         * @memberof hall.team_report_member_item
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        team_report_member_item.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.gameid))
                return "gameid: integer expected";
            if (!$util.isString(message.nickname))
                return "nickname: string expected";
            if (typeof message.partner !== "boolean")
                return "partner: boolean expected";
            if (!$util.isString(message.date))
                return "date: string expected";
            if (!$util.isInteger(message.performance) && !(message.performance && $util.isInteger(message.performance.low) && $util.isInteger(message.performance.high)))
                return "performance: integer|Long expected";
            if (!$util.isInteger(message.share_ratio))
                return "share_ratio: integer expected";
            if (!$util.isInteger(message.commission) && !(message.commission && $util.isInteger(message.commission.low) && $util.isInteger(message.commission.high)))
                return "commission: integer|Long expected";
            return null;
        };

        /**
         * Creates a team_report_member_item message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.team_report_member_item
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.team_report_member_item} team_report_member_item
         */
        team_report_member_item.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.team_report_member_item)
                return object;
            var message = new $root.hall.team_report_member_item();
            if (object.gameid != null)
                message.gameid = object.gameid >>> 0;
            if (object.nickname != null)
                message.nickname = String(object.nickname);
            if (object.partner != null)
                message.partner = Boolean(object.partner);
            if (object.date != null)
                message.date = String(object.date);
            if (object.performance != null)
                if ($util.Long)
                    (message.performance = $util.Long.fromValue(object.performance)).unsigned = false;
                else if (typeof object.performance === "string")
                    message.performance = parseInt(object.performance, 10);
                else if (typeof object.performance === "number")
                    message.performance = object.performance;
                else if (typeof object.performance === "object")
                    message.performance = new $util.LongBits(object.performance.low >>> 0, object.performance.high >>> 0).toNumber();
            if (object.share_ratio != null)
                message.share_ratio = object.share_ratio >>> 0;
            if (object.commission != null)
                if ($util.Long)
                    (message.commission = $util.Long.fromValue(object.commission)).unsigned = false;
                else if (typeof object.commission === "string")
                    message.commission = parseInt(object.commission, 10);
                else if (typeof object.commission === "number")
                    message.commission = object.commission;
                else if (typeof object.commission === "object")
                    message.commission = new $util.LongBits(object.commission.low >>> 0, object.commission.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a team_report_member_item message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.team_report_member_item
         * @static
         * @param {hall.team_report_member_item} message team_report_member_item
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        team_report_member_item.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gameid = 0;
                object.nickname = "";
                object.partner = false;
                object.date = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.performance = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.performance = options.longs === String ? "0" : 0;
                object.share_ratio = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.commission = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.commission = options.longs === String ? "0" : 0;
            }
            if (message.gameid != null && message.hasOwnProperty("gameid"))
                object.gameid = message.gameid;
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                object.nickname = message.nickname;
            if (message.partner != null && message.hasOwnProperty("partner"))
                object.partner = message.partner;
            if (message.date != null && message.hasOwnProperty("date"))
                object.date = message.date;
            if (message.performance != null && message.hasOwnProperty("performance"))
                if (typeof message.performance === "number")
                    object.performance = options.longs === String ? String(message.performance) : message.performance;
                else
                    object.performance = options.longs === String ? $util.Long.prototype.toString.call(message.performance) : options.longs === Number ? new $util.LongBits(message.performance.low >>> 0, message.performance.high >>> 0).toNumber() : message.performance;
            if (message.share_ratio != null && message.hasOwnProperty("share_ratio"))
                object.share_ratio = message.share_ratio;
            if (message.commission != null && message.hasOwnProperty("commission"))
                if (typeof message.commission === "number")
                    object.commission = options.longs === String ? String(message.commission) : message.commission;
                else
                    object.commission = options.longs === String ? $util.Long.prototype.toString.call(message.commission) : options.longs === Number ? new $util.LongBits(message.commission.low >>> 0, message.commission.high >>> 0).toNumber() : message.commission;
            return object;
        };

        /**
         * Converts this team_report_member_item to JSON.
         * @function toJSON
         * @memberof hall.team_report_member_item
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        team_report_member_item.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return team_report_member_item;
    })();

    hall.response_team_report_member_info = (function() {

        /**
         * Properties of a response_team_report_member_info.
         * @memberof hall
         * @interface Iresponse_team_report_member_info
         * @property {Array.<hall.Iteam_report_member_item>|null} [items] response_team_report_member_info items
         */

        /**
         * Constructs a new response_team_report_member_info.
         * @memberof hall
         * @classdesc Represents a response_team_report_member_info.
         * @implements Iresponse_team_report_member_info
         * @constructor
         * @param {hall.Iresponse_team_report_member_info=} [properties] Properties to set
         */
        function response_team_report_member_info(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_team_report_member_info items.
         * @member {Array.<hall.Iteam_report_member_item>} items
         * @memberof hall.response_team_report_member_info
         * @instance
         */
        response_team_report_member_info.prototype.items = $util.emptyArray;

        /**
         * Creates a new response_team_report_member_info instance using the specified properties.
         * @function create
         * @memberof hall.response_team_report_member_info
         * @static
         * @param {hall.Iresponse_team_report_member_info=} [properties] Properties to set
         * @returns {hall.response_team_report_member_info} response_team_report_member_info instance
         */
        response_team_report_member_info.create = function create(properties) {
            return new response_team_report_member_info(properties);
        };

        /**
         * Encodes the specified response_team_report_member_info message. Does not implicitly {@link hall.response_team_report_member_info.verify|verify} messages.
         * @function encode
         * @memberof hall.response_team_report_member_info
         * @static
         * @param {hall.Iresponse_team_report_member_info} message response_team_report_member_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_report_member_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.hall.team_report_member_item.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified response_team_report_member_info message, length delimited. Does not implicitly {@link hall.response_team_report_member_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_team_report_member_info
         * @static
         * @param {hall.Iresponse_team_report_member_info} message response_team_report_member_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_report_member_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_team_report_member_info message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_team_report_member_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_team_report_member_info} response_team_report_member_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_report_member_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_team_report_member_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.items && message.items.length))
                        message.items = [];
                    message.items.push($root.hall.team_report_member_item.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a response_team_report_member_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_team_report_member_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_team_report_member_info} response_team_report_member_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_report_member_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_team_report_member_info message.
         * @function verify
         * @memberof hall.response_team_report_member_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_team_report_member_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.hall.team_report_member_item.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a response_team_report_member_info message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_team_report_member_info
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_team_report_member_info} response_team_report_member_info
         */
        response_team_report_member_info.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_team_report_member_info)
                return object;
            var message = new $root.hall.response_team_report_member_info();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".hall.response_team_report_member_info.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".hall.response_team_report_member_info.items: object expected");
                    message.items[i] = $root.hall.team_report_member_item.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a response_team_report_member_info message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_team_report_member_info
         * @static
         * @param {hall.response_team_report_member_info} message response_team_report_member_info
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_team_report_member_info.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.hall.team_report_member_item.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this response_team_report_member_info to JSON.
         * @function toJSON
         * @memberof hall.response_team_report_member_info
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_team_report_member_info.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_team_report_member_info;
    })();

    hall.request_team_report_partner_info = (function() {

        /**
         * Properties of a request_team_report_partner_info.
         * @memberof hall
         * @interface Irequest_team_report_partner_info
         * @property {number} userid request_team_report_partner_info userid
         * @property {string} password request_team_report_partner_info password
         * @property {number} clubid request_team_report_partner_info clubid
         * @property {number} id request_team_report_partner_info id
         */

        /**
         * Constructs a new request_team_report_partner_info.
         * @memberof hall
         * @classdesc Represents a request_team_report_partner_info.
         * @implements Irequest_team_report_partner_info
         * @constructor
         * @param {hall.Irequest_team_report_partner_info=} [properties] Properties to set
         */
        function request_team_report_partner_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_team_report_partner_info userid.
         * @member {number} userid
         * @memberof hall.request_team_report_partner_info
         * @instance
         */
        request_team_report_partner_info.prototype.userid = 0;

        /**
         * request_team_report_partner_info password.
         * @member {string} password
         * @memberof hall.request_team_report_partner_info
         * @instance
         */
        request_team_report_partner_info.prototype.password = "";

        /**
         * request_team_report_partner_info clubid.
         * @member {number} clubid
         * @memberof hall.request_team_report_partner_info
         * @instance
         */
        request_team_report_partner_info.prototype.clubid = 0;

        /**
         * request_team_report_partner_info id.
         * @member {number} id
         * @memberof hall.request_team_report_partner_info
         * @instance
         */
        request_team_report_partner_info.prototype.id = 0;

        /**
         * Creates a new request_team_report_partner_info instance using the specified properties.
         * @function create
         * @memberof hall.request_team_report_partner_info
         * @static
         * @param {hall.Irequest_team_report_partner_info=} [properties] Properties to set
         * @returns {hall.request_team_report_partner_info} request_team_report_partner_info instance
         */
        request_team_report_partner_info.create = function create(properties) {
            return new request_team_report_partner_info(properties);
        };

        /**
         * Encodes the specified request_team_report_partner_info message. Does not implicitly {@link hall.request_team_report_partner_info.verify|verify} messages.
         * @function encode
         * @memberof hall.request_team_report_partner_info
         * @static
         * @param {hall.Irequest_team_report_partner_info} message request_team_report_partner_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_report_partner_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.clubid);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.id);
            return writer;
        };

        /**
         * Encodes the specified request_team_report_partner_info message, length delimited. Does not implicitly {@link hall.request_team_report_partner_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_team_report_partner_info
         * @static
         * @param {hall.Irequest_team_report_partner_info} message request_team_report_partner_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_report_partner_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_team_report_partner_info message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_team_report_partner_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_team_report_partner_info} request_team_report_partner_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_report_partner_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_team_report_partner_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.clubid = reader.uint32();
                    break;
                case 4:
                    message.id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("clubid"))
                throw $util.ProtocolError("missing required 'clubid'", { instance: message });
            if (!message.hasOwnProperty("id"))
                throw $util.ProtocolError("missing required 'id'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_team_report_partner_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_team_report_partner_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_team_report_partner_info} request_team_report_partner_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_report_partner_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_team_report_partner_info message.
         * @function verify
         * @memberof hall.request_team_report_partner_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_team_report_partner_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isInteger(message.clubid))
                return "clubid: integer expected";
            if (!$util.isInteger(message.id))
                return "id: integer expected";
            return null;
        };

        /**
         * Creates a request_team_report_partner_info message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_team_report_partner_info
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_team_report_partner_info} request_team_report_partner_info
         */
        request_team_report_partner_info.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_team_report_partner_info)
                return object;
            var message = new $root.hall.request_team_report_partner_info();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.clubid != null)
                message.clubid = object.clubid >>> 0;
            if (object.id != null)
                message.id = object.id >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a request_team_report_partner_info message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_team_report_partner_info
         * @static
         * @param {hall.request_team_report_partner_info} message request_team_report_partner_info
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_team_report_partner_info.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.clubid = 0;
                object.id = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.clubid != null && message.hasOwnProperty("clubid"))
                object.clubid = message.clubid;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            return object;
        };

        /**
         * Converts this request_team_report_partner_info to JSON.
         * @function toJSON
         * @memberof hall.request_team_report_partner_info
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_team_report_partner_info.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_team_report_partner_info;
    })();

    hall.team_report_partner_item = (function() {

        /**
         * Properties of a team_report_partner_item.
         * @memberof hall
         * @interface Iteam_report_partner_item
         * @property {number} gameid team_report_partner_item gameid
         * @property {string} nickname team_report_partner_item nickname
         * @property {string} date team_report_partner_item date
         * @property {number|Long} performance team_report_partner_item performance
         * @property {number} share_ratio team_report_partner_item share_ratio
         * @property {number|Long} commission team_report_partner_item commission
         */

        /**
         * Constructs a new team_report_partner_item.
         * @memberof hall
         * @classdesc Represents a team_report_partner_item.
         * @implements Iteam_report_partner_item
         * @constructor
         * @param {hall.Iteam_report_partner_item=} [properties] Properties to set
         */
        function team_report_partner_item(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * team_report_partner_item gameid.
         * @member {number} gameid
         * @memberof hall.team_report_partner_item
         * @instance
         */
        team_report_partner_item.prototype.gameid = 0;

        /**
         * team_report_partner_item nickname.
         * @member {string} nickname
         * @memberof hall.team_report_partner_item
         * @instance
         */
        team_report_partner_item.prototype.nickname = "";

        /**
         * team_report_partner_item date.
         * @member {string} date
         * @memberof hall.team_report_partner_item
         * @instance
         */
        team_report_partner_item.prototype.date = "";

        /**
         * team_report_partner_item performance.
         * @member {number|Long} performance
         * @memberof hall.team_report_partner_item
         * @instance
         */
        team_report_partner_item.prototype.performance = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * team_report_partner_item share_ratio.
         * @member {number} share_ratio
         * @memberof hall.team_report_partner_item
         * @instance
         */
        team_report_partner_item.prototype.share_ratio = 0;

        /**
         * team_report_partner_item commission.
         * @member {number|Long} commission
         * @memberof hall.team_report_partner_item
         * @instance
         */
        team_report_partner_item.prototype.commission = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new team_report_partner_item instance using the specified properties.
         * @function create
         * @memberof hall.team_report_partner_item
         * @static
         * @param {hall.Iteam_report_partner_item=} [properties] Properties to set
         * @returns {hall.team_report_partner_item} team_report_partner_item instance
         */
        team_report_partner_item.create = function create(properties) {
            return new team_report_partner_item(properties);
        };

        /**
         * Encodes the specified team_report_partner_item message. Does not implicitly {@link hall.team_report_partner_item.verify|verify} messages.
         * @function encode
         * @memberof hall.team_report_partner_item
         * @static
         * @param {hall.Iteam_report_partner_item} message team_report_partner_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        team_report_partner_item.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.gameid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.nickname);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.date);
            writer.uint32(/* id 4, wireType 0 =*/32).sint64(message.performance);
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.share_ratio);
            writer.uint32(/* id 6, wireType 0 =*/48).sint64(message.commission);
            return writer;
        };

        /**
         * Encodes the specified team_report_partner_item message, length delimited. Does not implicitly {@link hall.team_report_partner_item.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.team_report_partner_item
         * @static
         * @param {hall.Iteam_report_partner_item} message team_report_partner_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        team_report_partner_item.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a team_report_partner_item message from the specified reader or buffer.
         * @function decode
         * @memberof hall.team_report_partner_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.team_report_partner_item} team_report_partner_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        team_report_partner_item.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.team_report_partner_item();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.gameid = reader.uint32();
                    break;
                case 2:
                    message.nickname = reader.string();
                    break;
                case 3:
                    message.date = reader.string();
                    break;
                case 4:
                    message.performance = reader.sint64();
                    break;
                case 5:
                    message.share_ratio = reader.uint32();
                    break;
                case 6:
                    message.commission = reader.sint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("gameid"))
                throw $util.ProtocolError("missing required 'gameid'", { instance: message });
            if (!message.hasOwnProperty("nickname"))
                throw $util.ProtocolError("missing required 'nickname'", { instance: message });
            if (!message.hasOwnProperty("date"))
                throw $util.ProtocolError("missing required 'date'", { instance: message });
            if (!message.hasOwnProperty("performance"))
                throw $util.ProtocolError("missing required 'performance'", { instance: message });
            if (!message.hasOwnProperty("share_ratio"))
                throw $util.ProtocolError("missing required 'share_ratio'", { instance: message });
            if (!message.hasOwnProperty("commission"))
                throw $util.ProtocolError("missing required 'commission'", { instance: message });
            return message;
        };

        /**
         * Decodes a team_report_partner_item message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.team_report_partner_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.team_report_partner_item} team_report_partner_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        team_report_partner_item.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a team_report_partner_item message.
         * @function verify
         * @memberof hall.team_report_partner_item
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        team_report_partner_item.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.gameid))
                return "gameid: integer expected";
            if (!$util.isString(message.nickname))
                return "nickname: string expected";
            if (!$util.isString(message.date))
                return "date: string expected";
            if (!$util.isInteger(message.performance) && !(message.performance && $util.isInteger(message.performance.low) && $util.isInteger(message.performance.high)))
                return "performance: integer|Long expected";
            if (!$util.isInteger(message.share_ratio))
                return "share_ratio: integer expected";
            if (!$util.isInteger(message.commission) && !(message.commission && $util.isInteger(message.commission.low) && $util.isInteger(message.commission.high)))
                return "commission: integer|Long expected";
            return null;
        };

        /**
         * Creates a team_report_partner_item message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.team_report_partner_item
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.team_report_partner_item} team_report_partner_item
         */
        team_report_partner_item.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.team_report_partner_item)
                return object;
            var message = new $root.hall.team_report_partner_item();
            if (object.gameid != null)
                message.gameid = object.gameid >>> 0;
            if (object.nickname != null)
                message.nickname = String(object.nickname);
            if (object.date != null)
                message.date = String(object.date);
            if (object.performance != null)
                if ($util.Long)
                    (message.performance = $util.Long.fromValue(object.performance)).unsigned = false;
                else if (typeof object.performance === "string")
                    message.performance = parseInt(object.performance, 10);
                else if (typeof object.performance === "number")
                    message.performance = object.performance;
                else if (typeof object.performance === "object")
                    message.performance = new $util.LongBits(object.performance.low >>> 0, object.performance.high >>> 0).toNumber();
            if (object.share_ratio != null)
                message.share_ratio = object.share_ratio >>> 0;
            if (object.commission != null)
                if ($util.Long)
                    (message.commission = $util.Long.fromValue(object.commission)).unsigned = false;
                else if (typeof object.commission === "string")
                    message.commission = parseInt(object.commission, 10);
                else if (typeof object.commission === "number")
                    message.commission = object.commission;
                else if (typeof object.commission === "object")
                    message.commission = new $util.LongBits(object.commission.low >>> 0, object.commission.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a team_report_partner_item message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.team_report_partner_item
         * @static
         * @param {hall.team_report_partner_item} message team_report_partner_item
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        team_report_partner_item.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gameid = 0;
                object.nickname = "";
                object.date = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.performance = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.performance = options.longs === String ? "0" : 0;
                object.share_ratio = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.commission = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.commission = options.longs === String ? "0" : 0;
            }
            if (message.gameid != null && message.hasOwnProperty("gameid"))
                object.gameid = message.gameid;
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                object.nickname = message.nickname;
            if (message.date != null && message.hasOwnProperty("date"))
                object.date = message.date;
            if (message.performance != null && message.hasOwnProperty("performance"))
                if (typeof message.performance === "number")
                    object.performance = options.longs === String ? String(message.performance) : message.performance;
                else
                    object.performance = options.longs === String ? $util.Long.prototype.toString.call(message.performance) : options.longs === Number ? new $util.LongBits(message.performance.low >>> 0, message.performance.high >>> 0).toNumber() : message.performance;
            if (message.share_ratio != null && message.hasOwnProperty("share_ratio"))
                object.share_ratio = message.share_ratio;
            if (message.commission != null && message.hasOwnProperty("commission"))
                if (typeof message.commission === "number")
                    object.commission = options.longs === String ? String(message.commission) : message.commission;
                else
                    object.commission = options.longs === String ? $util.Long.prototype.toString.call(message.commission) : options.longs === Number ? new $util.LongBits(message.commission.low >>> 0, message.commission.high >>> 0).toNumber() : message.commission;
            return object;
        };

        /**
         * Converts this team_report_partner_item to JSON.
         * @function toJSON
         * @memberof hall.team_report_partner_item
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        team_report_partner_item.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return team_report_partner_item;
    })();

    hall.response_team_report_partner_info = (function() {

        /**
         * Properties of a response_team_report_partner_info.
         * @memberof hall
         * @interface Iresponse_team_report_partner_info
         * @property {Array.<hall.Iteam_report_partner_item>|null} [items] response_team_report_partner_info items
         */

        /**
         * Constructs a new response_team_report_partner_info.
         * @memberof hall
         * @classdesc Represents a response_team_report_partner_info.
         * @implements Iresponse_team_report_partner_info
         * @constructor
         * @param {hall.Iresponse_team_report_partner_info=} [properties] Properties to set
         */
        function response_team_report_partner_info(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_team_report_partner_info items.
         * @member {Array.<hall.Iteam_report_partner_item>} items
         * @memberof hall.response_team_report_partner_info
         * @instance
         */
        response_team_report_partner_info.prototype.items = $util.emptyArray;

        /**
         * Creates a new response_team_report_partner_info instance using the specified properties.
         * @function create
         * @memberof hall.response_team_report_partner_info
         * @static
         * @param {hall.Iresponse_team_report_partner_info=} [properties] Properties to set
         * @returns {hall.response_team_report_partner_info} response_team_report_partner_info instance
         */
        response_team_report_partner_info.create = function create(properties) {
            return new response_team_report_partner_info(properties);
        };

        /**
         * Encodes the specified response_team_report_partner_info message. Does not implicitly {@link hall.response_team_report_partner_info.verify|verify} messages.
         * @function encode
         * @memberof hall.response_team_report_partner_info
         * @static
         * @param {hall.Iresponse_team_report_partner_info} message response_team_report_partner_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_report_partner_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.hall.team_report_partner_item.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified response_team_report_partner_info message, length delimited. Does not implicitly {@link hall.response_team_report_partner_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_team_report_partner_info
         * @static
         * @param {hall.Iresponse_team_report_partner_info} message response_team_report_partner_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_report_partner_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_team_report_partner_info message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_team_report_partner_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_team_report_partner_info} response_team_report_partner_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_report_partner_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_team_report_partner_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.items && message.items.length))
                        message.items = [];
                    message.items.push($root.hall.team_report_partner_item.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a response_team_report_partner_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_team_report_partner_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_team_report_partner_info} response_team_report_partner_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_report_partner_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_team_report_partner_info message.
         * @function verify
         * @memberof hall.response_team_report_partner_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_team_report_partner_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.hall.team_report_partner_item.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a response_team_report_partner_info message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_team_report_partner_info
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_team_report_partner_info} response_team_report_partner_info
         */
        response_team_report_partner_info.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_team_report_partner_info)
                return object;
            var message = new $root.hall.response_team_report_partner_info();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".hall.response_team_report_partner_info.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".hall.response_team_report_partner_info.items: object expected");
                    message.items[i] = $root.hall.team_report_partner_item.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a response_team_report_partner_info message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_team_report_partner_info
         * @static
         * @param {hall.response_team_report_partner_info} message response_team_report_partner_info
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_team_report_partner_info.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.hall.team_report_partner_item.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this response_team_report_partner_info to JSON.
         * @function toJSON
         * @memberof hall.response_team_report_partner_info
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_team_report_partner_info.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_team_report_partner_info;
    })();

    hall.request_team_spread_info = (function() {

        /**
         * Properties of a request_team_spread_info.
         * @memberof hall
         * @interface Irequest_team_spread_info
         * @property {number} userid request_team_spread_info userid
         * @property {string} password request_team_spread_info password
         * @property {number} clubid request_team_spread_info clubid
         */

        /**
         * Constructs a new request_team_spread_info.
         * @memberof hall
         * @classdesc Represents a request_team_spread_info.
         * @implements Irequest_team_spread_info
         * @constructor
         * @param {hall.Irequest_team_spread_info=} [properties] Properties to set
         */
        function request_team_spread_info(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_team_spread_info userid.
         * @member {number} userid
         * @memberof hall.request_team_spread_info
         * @instance
         */
        request_team_spread_info.prototype.userid = 0;

        /**
         * request_team_spread_info password.
         * @member {string} password
         * @memberof hall.request_team_spread_info
         * @instance
         */
        request_team_spread_info.prototype.password = "";

        /**
         * request_team_spread_info clubid.
         * @member {number} clubid
         * @memberof hall.request_team_spread_info
         * @instance
         */
        request_team_spread_info.prototype.clubid = 0;

        /**
         * Creates a new request_team_spread_info instance using the specified properties.
         * @function create
         * @memberof hall.request_team_spread_info
         * @static
         * @param {hall.Irequest_team_spread_info=} [properties] Properties to set
         * @returns {hall.request_team_spread_info} request_team_spread_info instance
         */
        request_team_spread_info.create = function create(properties) {
            return new request_team_spread_info(properties);
        };

        /**
         * Encodes the specified request_team_spread_info message. Does not implicitly {@link hall.request_team_spread_info.verify|verify} messages.
         * @function encode
         * @memberof hall.request_team_spread_info
         * @static
         * @param {hall.Irequest_team_spread_info} message request_team_spread_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_spread_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.clubid);
            return writer;
        };

        /**
         * Encodes the specified request_team_spread_info message, length delimited. Does not implicitly {@link hall.request_team_spread_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_team_spread_info
         * @static
         * @param {hall.Irequest_team_spread_info} message request_team_spread_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_spread_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_team_spread_info message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_team_spread_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_team_spread_info} request_team_spread_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_spread_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_team_spread_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.clubid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("clubid"))
                throw $util.ProtocolError("missing required 'clubid'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_team_spread_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_team_spread_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_team_spread_info} request_team_spread_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_spread_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_team_spread_info message.
         * @function verify
         * @memberof hall.request_team_spread_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_team_spread_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isInteger(message.clubid))
                return "clubid: integer expected";
            return null;
        };

        /**
         * Creates a request_team_spread_info message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_team_spread_info
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_team_spread_info} request_team_spread_info
         */
        request_team_spread_info.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_team_spread_info)
                return object;
            var message = new $root.hall.request_team_spread_info();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.clubid != null)
                message.clubid = object.clubid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a request_team_spread_info message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_team_spread_info
         * @static
         * @param {hall.request_team_spread_info} message request_team_spread_info
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_team_spread_info.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.clubid = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.clubid != null && message.hasOwnProperty("clubid"))
                object.clubid = message.clubid;
            return object;
        };

        /**
         * Converts this request_team_spread_info to JSON.
         * @function toJSON
         * @memberof hall.request_team_spread_info
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_team_spread_info.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_team_spread_info;
    })();

    hall.team_invited_member_item = (function() {

        /**
         * Properties of a team_invited_member_item.
         * @memberof hall
         * @interface Iteam_invited_member_item
         * @property {number} new_members_count team_invited_member_item new_members_count
         * @property {number} new_direct_members_count team_invited_member_item new_direct_members_count
         */

        /**
         * Constructs a new team_invited_member_item.
         * @memberof hall
         * @classdesc Represents a team_invited_member_item.
         * @implements Iteam_invited_member_item
         * @constructor
         * @param {hall.Iteam_invited_member_item=} [properties] Properties to set
         */
        function team_invited_member_item(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * team_invited_member_item new_members_count.
         * @member {number} new_members_count
         * @memberof hall.team_invited_member_item
         * @instance
         */
        team_invited_member_item.prototype.new_members_count = 0;

        /**
         * team_invited_member_item new_direct_members_count.
         * @member {number} new_direct_members_count
         * @memberof hall.team_invited_member_item
         * @instance
         */
        team_invited_member_item.prototype.new_direct_members_count = 0;

        /**
         * Creates a new team_invited_member_item instance using the specified properties.
         * @function create
         * @memberof hall.team_invited_member_item
         * @static
         * @param {hall.Iteam_invited_member_item=} [properties] Properties to set
         * @returns {hall.team_invited_member_item} team_invited_member_item instance
         */
        team_invited_member_item.create = function create(properties) {
            return new team_invited_member_item(properties);
        };

        /**
         * Encodes the specified team_invited_member_item message. Does not implicitly {@link hall.team_invited_member_item.verify|verify} messages.
         * @function encode
         * @memberof hall.team_invited_member_item
         * @static
         * @param {hall.Iteam_invited_member_item} message team_invited_member_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        team_invited_member_item.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.new_members_count);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.new_direct_members_count);
            return writer;
        };

        /**
         * Encodes the specified team_invited_member_item message, length delimited. Does not implicitly {@link hall.team_invited_member_item.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.team_invited_member_item
         * @static
         * @param {hall.Iteam_invited_member_item} message team_invited_member_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        team_invited_member_item.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a team_invited_member_item message from the specified reader or buffer.
         * @function decode
         * @memberof hall.team_invited_member_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.team_invited_member_item} team_invited_member_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        team_invited_member_item.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.team_invited_member_item();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.new_members_count = reader.uint32();
                    break;
                case 2:
                    message.new_direct_members_count = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("new_members_count"))
                throw $util.ProtocolError("missing required 'new_members_count'", { instance: message });
            if (!message.hasOwnProperty("new_direct_members_count"))
                throw $util.ProtocolError("missing required 'new_direct_members_count'", { instance: message });
            return message;
        };

        /**
         * Decodes a team_invited_member_item message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.team_invited_member_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.team_invited_member_item} team_invited_member_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        team_invited_member_item.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a team_invited_member_item message.
         * @function verify
         * @memberof hall.team_invited_member_item
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        team_invited_member_item.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.new_members_count))
                return "new_members_count: integer expected";
            if (!$util.isInteger(message.new_direct_members_count))
                return "new_direct_members_count: integer expected";
            return null;
        };

        /**
         * Creates a team_invited_member_item message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.team_invited_member_item
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.team_invited_member_item} team_invited_member_item
         */
        team_invited_member_item.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.team_invited_member_item)
                return object;
            var message = new $root.hall.team_invited_member_item();
            if (object.new_members_count != null)
                message.new_members_count = object.new_members_count >>> 0;
            if (object.new_direct_members_count != null)
                message.new_direct_members_count = object.new_direct_members_count >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a team_invited_member_item message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.team_invited_member_item
         * @static
         * @param {hall.team_invited_member_item} message team_invited_member_item
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        team_invited_member_item.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.new_members_count = 0;
                object.new_direct_members_count = 0;
            }
            if (message.new_members_count != null && message.hasOwnProperty("new_members_count"))
                object.new_members_count = message.new_members_count;
            if (message.new_direct_members_count != null && message.hasOwnProperty("new_direct_members_count"))
                object.new_direct_members_count = message.new_direct_members_count;
            return object;
        };

        /**
         * Converts this team_invited_member_item to JSON.
         * @function toJSON
         * @memberof hall.team_invited_member_item
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        team_invited_member_item.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return team_invited_member_item;
    })();

    hall.response_team_spread_info = (function() {

        /**
         * Properties of a response_team_spread_info.
         * @memberof hall
         * @interface Iresponse_team_spread_info
         * @property {string|null} [invited_code] response_team_spread_info invited_code
         * @property {Array.<hall.Iteam_invited_member_item>|null} [new_members_item] response_team_spread_info new_members_item
         * @property {Array.<string>|null} [invite_urls] response_team_spread_info invite_urls
         */

        /**
         * Constructs a new response_team_spread_info.
         * @memberof hall
         * @classdesc Represents a response_team_spread_info.
         * @implements Iresponse_team_spread_info
         * @constructor
         * @param {hall.Iresponse_team_spread_info=} [properties] Properties to set
         */
        function response_team_spread_info(properties) {
            this.new_members_item = [];
            this.invite_urls = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_team_spread_info invited_code.
         * @member {string} invited_code
         * @memberof hall.response_team_spread_info
         * @instance
         */
        response_team_spread_info.prototype.invited_code = "";

        /**
         * response_team_spread_info new_members_item.
         * @member {Array.<hall.Iteam_invited_member_item>} new_members_item
         * @memberof hall.response_team_spread_info
         * @instance
         */
        response_team_spread_info.prototype.new_members_item = $util.emptyArray;

        /**
         * response_team_spread_info invite_urls.
         * @member {Array.<string>} invite_urls
         * @memberof hall.response_team_spread_info
         * @instance
         */
        response_team_spread_info.prototype.invite_urls = $util.emptyArray;

        /**
         * Creates a new response_team_spread_info instance using the specified properties.
         * @function create
         * @memberof hall.response_team_spread_info
         * @static
         * @param {hall.Iresponse_team_spread_info=} [properties] Properties to set
         * @returns {hall.response_team_spread_info} response_team_spread_info instance
         */
        response_team_spread_info.create = function create(properties) {
            return new response_team_spread_info(properties);
        };

        /**
         * Encodes the specified response_team_spread_info message. Does not implicitly {@link hall.response_team_spread_info.verify|verify} messages.
         * @function encode
         * @memberof hall.response_team_spread_info
         * @static
         * @param {hall.Iresponse_team_spread_info} message response_team_spread_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_spread_info.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.invited_code != null && Object.hasOwnProperty.call(message, "invited_code"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.invited_code);
            if (message.new_members_item != null && message.new_members_item.length)
                for (var i = 0; i < message.new_members_item.length; ++i)
                    $root.hall.team_invited_member_item.encode(message.new_members_item[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.invite_urls != null && message.invite_urls.length)
                for (var i = 0; i < message.invite_urls.length; ++i)
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.invite_urls[i]);
            return writer;
        };

        /**
         * Encodes the specified response_team_spread_info message, length delimited. Does not implicitly {@link hall.response_team_spread_info.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_team_spread_info
         * @static
         * @param {hall.Iresponse_team_spread_info} message response_team_spread_info message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_spread_info.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_team_spread_info message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_team_spread_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_team_spread_info} response_team_spread_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_spread_info.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_team_spread_info();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.invited_code = reader.string();
                    break;
                case 2:
                    if (!(message.new_members_item && message.new_members_item.length))
                        message.new_members_item = [];
                    message.new_members_item.push($root.hall.team_invited_member_item.decode(reader, reader.uint32()));
                    break;
                case 3:
                    if (!(message.invite_urls && message.invite_urls.length))
                        message.invite_urls = [];
                    message.invite_urls.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a response_team_spread_info message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_team_spread_info
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_team_spread_info} response_team_spread_info
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_spread_info.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_team_spread_info message.
         * @function verify
         * @memberof hall.response_team_spread_info
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_team_spread_info.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.invited_code != null && message.hasOwnProperty("invited_code"))
                if (!$util.isString(message.invited_code))
                    return "invited_code: string expected";
            if (message.new_members_item != null && message.hasOwnProperty("new_members_item")) {
                if (!Array.isArray(message.new_members_item))
                    return "new_members_item: array expected";
                for (var i = 0; i < message.new_members_item.length; ++i) {
                    var error = $root.hall.team_invited_member_item.verify(message.new_members_item[i]);
                    if (error)
                        return "new_members_item." + error;
                }
            }
            if (message.invite_urls != null && message.hasOwnProperty("invite_urls")) {
                if (!Array.isArray(message.invite_urls))
                    return "invite_urls: array expected";
                for (var i = 0; i < message.invite_urls.length; ++i)
                    if (!$util.isString(message.invite_urls[i]))
                        return "invite_urls: string[] expected";
            }
            return null;
        };

        /**
         * Creates a response_team_spread_info message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_team_spread_info
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_team_spread_info} response_team_spread_info
         */
        response_team_spread_info.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_team_spread_info)
                return object;
            var message = new $root.hall.response_team_spread_info();
            if (object.invited_code != null)
                message.invited_code = String(object.invited_code);
            if (object.new_members_item) {
                if (!Array.isArray(object.new_members_item))
                    throw TypeError(".hall.response_team_spread_info.new_members_item: array expected");
                message.new_members_item = [];
                for (var i = 0; i < object.new_members_item.length; ++i) {
                    if (typeof object.new_members_item[i] !== "object")
                        throw TypeError(".hall.response_team_spread_info.new_members_item: object expected");
                    message.new_members_item[i] = $root.hall.team_invited_member_item.fromObject(object.new_members_item[i]);
                }
            }
            if (object.invite_urls) {
                if (!Array.isArray(object.invite_urls))
                    throw TypeError(".hall.response_team_spread_info.invite_urls: array expected");
                message.invite_urls = [];
                for (var i = 0; i < object.invite_urls.length; ++i)
                    message.invite_urls[i] = String(object.invite_urls[i]);
            }
            return message;
        };

        /**
         * Creates a plain object from a response_team_spread_info message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_team_spread_info
         * @static
         * @param {hall.response_team_spread_info} message response_team_spread_info
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_team_spread_info.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.new_members_item = [];
                object.invite_urls = [];
            }
            if (options.defaults)
                object.invited_code = "";
            if (message.invited_code != null && message.hasOwnProperty("invited_code"))
                object.invited_code = message.invited_code;
            if (message.new_members_item && message.new_members_item.length) {
                object.new_members_item = [];
                for (var j = 0; j < message.new_members_item.length; ++j)
                    object.new_members_item[j] = $root.hall.team_invited_member_item.toObject(message.new_members_item[j], options);
            }
            if (message.invite_urls && message.invite_urls.length) {
                object.invite_urls = [];
                for (var j = 0; j < message.invite_urls.length; ++j)
                    object.invite_urls[j] = message.invite_urls[j];
            }
            return object;
        };

        /**
         * Converts this response_team_spread_info to JSON.
         * @function toJSON
         * @memberof hall.response_team_spread_info
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_team_spread_info.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_team_spread_info;
    })();

    hall.request_team_transfer = (function() {

        /**
         * Properties of a request_team_transfer.
         * @memberof hall
         * @interface Irequest_team_transfer
         * @property {number} userid request_team_transfer userid
         * @property {string} password request_team_transfer password
         * @property {number} clubid request_team_transfer clubid
         * @property {number} dest_userid request_team_transfer dest_userid
         * @property {number|Long} transfer_score request_team_transfer transfer_score
         */

        /**
         * Constructs a new request_team_transfer.
         * @memberof hall
         * @classdesc Represents a request_team_transfer.
         * @implements Irequest_team_transfer
         * @constructor
         * @param {hall.Irequest_team_transfer=} [properties] Properties to set
         */
        function request_team_transfer(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_team_transfer userid.
         * @member {number} userid
         * @memberof hall.request_team_transfer
         * @instance
         */
        request_team_transfer.prototype.userid = 0;

        /**
         * request_team_transfer password.
         * @member {string} password
         * @memberof hall.request_team_transfer
         * @instance
         */
        request_team_transfer.prototype.password = "";

        /**
         * request_team_transfer clubid.
         * @member {number} clubid
         * @memberof hall.request_team_transfer
         * @instance
         */
        request_team_transfer.prototype.clubid = 0;

        /**
         * request_team_transfer dest_userid.
         * @member {number} dest_userid
         * @memberof hall.request_team_transfer
         * @instance
         */
        request_team_transfer.prototype.dest_userid = 0;

        /**
         * request_team_transfer transfer_score.
         * @member {number|Long} transfer_score
         * @memberof hall.request_team_transfer
         * @instance
         */
        request_team_transfer.prototype.transfer_score = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new request_team_transfer instance using the specified properties.
         * @function create
         * @memberof hall.request_team_transfer
         * @static
         * @param {hall.Irequest_team_transfer=} [properties] Properties to set
         * @returns {hall.request_team_transfer} request_team_transfer instance
         */
        request_team_transfer.create = function create(properties) {
            return new request_team_transfer(properties);
        };

        /**
         * Encodes the specified request_team_transfer message. Does not implicitly {@link hall.request_team_transfer.verify|verify} messages.
         * @function encode
         * @memberof hall.request_team_transfer
         * @static
         * @param {hall.Irequest_team_transfer} message request_team_transfer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_transfer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.clubid);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.dest_userid);
            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.transfer_score);
            return writer;
        };

        /**
         * Encodes the specified request_team_transfer message, length delimited. Does not implicitly {@link hall.request_team_transfer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_team_transfer
         * @static
         * @param {hall.Irequest_team_transfer} message request_team_transfer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_transfer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_team_transfer message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_team_transfer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_team_transfer} request_team_transfer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_transfer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_team_transfer();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.clubid = reader.uint32();
                    break;
                case 4:
                    message.dest_userid = reader.uint32();
                    break;
                case 5:
                    message.transfer_score = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("clubid"))
                throw $util.ProtocolError("missing required 'clubid'", { instance: message });
            if (!message.hasOwnProperty("dest_userid"))
                throw $util.ProtocolError("missing required 'dest_userid'", { instance: message });
            if (!message.hasOwnProperty("transfer_score"))
                throw $util.ProtocolError("missing required 'transfer_score'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_team_transfer message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_team_transfer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_team_transfer} request_team_transfer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_transfer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_team_transfer message.
         * @function verify
         * @memberof hall.request_team_transfer
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_team_transfer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isInteger(message.clubid))
                return "clubid: integer expected";
            if (!$util.isInteger(message.dest_userid))
                return "dest_userid: integer expected";
            if (!$util.isInteger(message.transfer_score) && !(message.transfer_score && $util.isInteger(message.transfer_score.low) && $util.isInteger(message.transfer_score.high)))
                return "transfer_score: integer|Long expected";
            return null;
        };

        /**
         * Creates a request_team_transfer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_team_transfer
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_team_transfer} request_team_transfer
         */
        request_team_transfer.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_team_transfer)
                return object;
            var message = new $root.hall.request_team_transfer();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.clubid != null)
                message.clubid = object.clubid >>> 0;
            if (object.dest_userid != null)
                message.dest_userid = object.dest_userid >>> 0;
            if (object.transfer_score != null)
                if ($util.Long)
                    (message.transfer_score = $util.Long.fromValue(object.transfer_score)).unsigned = true;
                else if (typeof object.transfer_score === "string")
                    message.transfer_score = parseInt(object.transfer_score, 10);
                else if (typeof object.transfer_score === "number")
                    message.transfer_score = object.transfer_score;
                else if (typeof object.transfer_score === "object")
                    message.transfer_score = new $util.LongBits(object.transfer_score.low >>> 0, object.transfer_score.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a request_team_transfer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_team_transfer
         * @static
         * @param {hall.request_team_transfer} message request_team_transfer
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_team_transfer.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.clubid = 0;
                object.dest_userid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.transfer_score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.transfer_score = options.longs === String ? "0" : 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.clubid != null && message.hasOwnProperty("clubid"))
                object.clubid = message.clubid;
            if (message.dest_userid != null && message.hasOwnProperty("dest_userid"))
                object.dest_userid = message.dest_userid;
            if (message.transfer_score != null && message.hasOwnProperty("transfer_score"))
                if (typeof message.transfer_score === "number")
                    object.transfer_score = options.longs === String ? String(message.transfer_score) : message.transfer_score;
                else
                    object.transfer_score = options.longs === String ? $util.Long.prototype.toString.call(message.transfer_score) : options.longs === Number ? new $util.LongBits(message.transfer_score.low >>> 0, message.transfer_score.high >>> 0).toNumber(true) : message.transfer_score;
            return object;
        };

        /**
         * Converts this request_team_transfer to JSON.
         * @function toJSON
         * @memberof hall.request_team_transfer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_team_transfer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_team_transfer;
    })();

    hall.response_team_transfer = (function() {

        /**
         * Properties of a response_team_transfer.
         * @memberof hall
         * @interface Iresponse_team_transfer
         * @property {number} result_code response_team_transfer result_code
         * @property {string|null} [reason] response_team_transfer reason
         */

        /**
         * Constructs a new response_team_transfer.
         * @memberof hall
         * @classdesc Represents a response_team_transfer.
         * @implements Iresponse_team_transfer
         * @constructor
         * @param {hall.Iresponse_team_transfer=} [properties] Properties to set
         */
        function response_team_transfer(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_team_transfer result_code.
         * @member {number} result_code
         * @memberof hall.response_team_transfer
         * @instance
         */
        response_team_transfer.prototype.result_code = 0;

        /**
         * response_team_transfer reason.
         * @member {string} reason
         * @memberof hall.response_team_transfer
         * @instance
         */
        response_team_transfer.prototype.reason = "";

        /**
         * Creates a new response_team_transfer instance using the specified properties.
         * @function create
         * @memberof hall.response_team_transfer
         * @static
         * @param {hall.Iresponse_team_transfer=} [properties] Properties to set
         * @returns {hall.response_team_transfer} response_team_transfer instance
         */
        response_team_transfer.create = function create(properties) {
            return new response_team_transfer(properties);
        };

        /**
         * Encodes the specified response_team_transfer message. Does not implicitly {@link hall.response_team_transfer.verify|verify} messages.
         * @function encode
         * @memberof hall.response_team_transfer
         * @static
         * @param {hall.Iresponse_team_transfer} message response_team_transfer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_transfer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).sint32(message.result_code);
            if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.reason);
            return writer;
        };

        /**
         * Encodes the specified response_team_transfer message, length delimited. Does not implicitly {@link hall.response_team_transfer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_team_transfer
         * @static
         * @param {hall.Iresponse_team_transfer} message response_team_transfer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_transfer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_team_transfer message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_team_transfer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_team_transfer} response_team_transfer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_transfer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_team_transfer();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.result_code = reader.sint32();
                    break;
                case 2:
                    message.reason = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("result_code"))
                throw $util.ProtocolError("missing required 'result_code'", { instance: message });
            return message;
        };

        /**
         * Decodes a response_team_transfer message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_team_transfer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_team_transfer} response_team_transfer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_transfer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_team_transfer message.
         * @function verify
         * @memberof hall.response_team_transfer
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_team_transfer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.result_code))
                return "result_code: integer expected";
            if (message.reason != null && message.hasOwnProperty("reason"))
                if (!$util.isString(message.reason))
                    return "reason: string expected";
            return null;
        };

        /**
         * Creates a response_team_transfer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_team_transfer
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_team_transfer} response_team_transfer
         */
        response_team_transfer.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_team_transfer)
                return object;
            var message = new $root.hall.response_team_transfer();
            if (object.result_code != null)
                message.result_code = object.result_code | 0;
            if (object.reason != null)
                message.reason = String(object.reason);
            return message;
        };

        /**
         * Creates a plain object from a response_team_transfer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_team_transfer
         * @static
         * @param {hall.response_team_transfer} message response_team_transfer
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_team_transfer.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result_code = 0;
                object.reason = "";
            }
            if (message.result_code != null && message.hasOwnProperty("result_code"))
                object.result_code = message.result_code;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            return object;
        };

        /**
         * Converts this response_team_transfer to JSON.
         * @function toJSON
         * @memberof hall.response_team_transfer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_team_transfer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_team_transfer;
    })();

    hall.request_team_edit_notice = (function() {

        /**
         * Properties of a request_team_edit_notice.
         * @memberof hall
         * @interface Irequest_team_edit_notice
         * @property {number} userid request_team_edit_notice userid
         * @property {string} password request_team_edit_notice password
         * @property {number} clubid request_team_edit_notice clubid
         * @property {string} notice request_team_edit_notice notice
         */

        /**
         * Constructs a new request_team_edit_notice.
         * @memberof hall
         * @classdesc Represents a request_team_edit_notice.
         * @implements Irequest_team_edit_notice
         * @constructor
         * @param {hall.Irequest_team_edit_notice=} [properties] Properties to set
         */
        function request_team_edit_notice(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_team_edit_notice userid.
         * @member {number} userid
         * @memberof hall.request_team_edit_notice
         * @instance
         */
        request_team_edit_notice.prototype.userid = 0;

        /**
         * request_team_edit_notice password.
         * @member {string} password
         * @memberof hall.request_team_edit_notice
         * @instance
         */
        request_team_edit_notice.prototype.password = "";

        /**
         * request_team_edit_notice clubid.
         * @member {number} clubid
         * @memberof hall.request_team_edit_notice
         * @instance
         */
        request_team_edit_notice.prototype.clubid = 0;

        /**
         * request_team_edit_notice notice.
         * @member {string} notice
         * @memberof hall.request_team_edit_notice
         * @instance
         */
        request_team_edit_notice.prototype.notice = "";

        /**
         * Creates a new request_team_edit_notice instance using the specified properties.
         * @function create
         * @memberof hall.request_team_edit_notice
         * @static
         * @param {hall.Irequest_team_edit_notice=} [properties] Properties to set
         * @returns {hall.request_team_edit_notice} request_team_edit_notice instance
         */
        request_team_edit_notice.create = function create(properties) {
            return new request_team_edit_notice(properties);
        };

        /**
         * Encodes the specified request_team_edit_notice message. Does not implicitly {@link hall.request_team_edit_notice.verify|verify} messages.
         * @function encode
         * @memberof hall.request_team_edit_notice
         * @static
         * @param {hall.Irequest_team_edit_notice} message request_team_edit_notice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_edit_notice.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.clubid);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.notice);
            return writer;
        };

        /**
         * Encodes the specified request_team_edit_notice message, length delimited. Does not implicitly {@link hall.request_team_edit_notice.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_team_edit_notice
         * @static
         * @param {hall.Irequest_team_edit_notice} message request_team_edit_notice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_edit_notice.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_team_edit_notice message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_team_edit_notice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_team_edit_notice} request_team_edit_notice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_edit_notice.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_team_edit_notice();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.clubid = reader.uint32();
                    break;
                case 4:
                    message.notice = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("clubid"))
                throw $util.ProtocolError("missing required 'clubid'", { instance: message });
            if (!message.hasOwnProperty("notice"))
                throw $util.ProtocolError("missing required 'notice'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_team_edit_notice message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_team_edit_notice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_team_edit_notice} request_team_edit_notice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_edit_notice.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_team_edit_notice message.
         * @function verify
         * @memberof hall.request_team_edit_notice
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_team_edit_notice.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isInteger(message.clubid))
                return "clubid: integer expected";
            if (!$util.isString(message.notice))
                return "notice: string expected";
            return null;
        };

        /**
         * Creates a request_team_edit_notice message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_team_edit_notice
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_team_edit_notice} request_team_edit_notice
         */
        request_team_edit_notice.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_team_edit_notice)
                return object;
            var message = new $root.hall.request_team_edit_notice();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.clubid != null)
                message.clubid = object.clubid >>> 0;
            if (object.notice != null)
                message.notice = String(object.notice);
            return message;
        };

        /**
         * Creates a plain object from a request_team_edit_notice message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_team_edit_notice
         * @static
         * @param {hall.request_team_edit_notice} message request_team_edit_notice
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_team_edit_notice.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.clubid = 0;
                object.notice = "";
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.clubid != null && message.hasOwnProperty("clubid"))
                object.clubid = message.clubid;
            if (message.notice != null && message.hasOwnProperty("notice"))
                object.notice = message.notice;
            return object;
        };

        /**
         * Converts this request_team_edit_notice to JSON.
         * @function toJSON
         * @memberof hall.request_team_edit_notice
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_team_edit_notice.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_team_edit_notice;
    })();

    hall.response_team_edit_notice = (function() {

        /**
         * Properties of a response_team_edit_notice.
         * @memberof hall
         * @interface Iresponse_team_edit_notice
         * @property {number} result_code response_team_edit_notice result_code
         * @property {string} reason response_team_edit_notice reason
         */

        /**
         * Constructs a new response_team_edit_notice.
         * @memberof hall
         * @classdesc Represents a response_team_edit_notice.
         * @implements Iresponse_team_edit_notice
         * @constructor
         * @param {hall.Iresponse_team_edit_notice=} [properties] Properties to set
         */
        function response_team_edit_notice(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_team_edit_notice result_code.
         * @member {number} result_code
         * @memberof hall.response_team_edit_notice
         * @instance
         */
        response_team_edit_notice.prototype.result_code = 0;

        /**
         * response_team_edit_notice reason.
         * @member {string} reason
         * @memberof hall.response_team_edit_notice
         * @instance
         */
        response_team_edit_notice.prototype.reason = "";

        /**
         * Creates a new response_team_edit_notice instance using the specified properties.
         * @function create
         * @memberof hall.response_team_edit_notice
         * @static
         * @param {hall.Iresponse_team_edit_notice=} [properties] Properties to set
         * @returns {hall.response_team_edit_notice} response_team_edit_notice instance
         */
        response_team_edit_notice.create = function create(properties) {
            return new response_team_edit_notice(properties);
        };

        /**
         * Encodes the specified response_team_edit_notice message. Does not implicitly {@link hall.response_team_edit_notice.verify|verify} messages.
         * @function encode
         * @memberof hall.response_team_edit_notice
         * @static
         * @param {hall.Iresponse_team_edit_notice} message response_team_edit_notice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_edit_notice.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.result_code);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.reason);
            return writer;
        };

        /**
         * Encodes the specified response_team_edit_notice message, length delimited. Does not implicitly {@link hall.response_team_edit_notice.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_team_edit_notice
         * @static
         * @param {hall.Iresponse_team_edit_notice} message response_team_edit_notice message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_edit_notice.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_team_edit_notice message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_team_edit_notice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_team_edit_notice} response_team_edit_notice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_edit_notice.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_team_edit_notice();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.result_code = reader.uint32();
                    break;
                case 2:
                    message.reason = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("result_code"))
                throw $util.ProtocolError("missing required 'result_code'", { instance: message });
            if (!message.hasOwnProperty("reason"))
                throw $util.ProtocolError("missing required 'reason'", { instance: message });
            return message;
        };

        /**
         * Decodes a response_team_edit_notice message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_team_edit_notice
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_team_edit_notice} response_team_edit_notice
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_edit_notice.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_team_edit_notice message.
         * @function verify
         * @memberof hall.response_team_edit_notice
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_team_edit_notice.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.result_code))
                return "result_code: integer expected";
            if (!$util.isString(message.reason))
                return "reason: string expected";
            return null;
        };

        /**
         * Creates a response_team_edit_notice message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_team_edit_notice
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_team_edit_notice} response_team_edit_notice
         */
        response_team_edit_notice.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_team_edit_notice)
                return object;
            var message = new $root.hall.response_team_edit_notice();
            if (object.result_code != null)
                message.result_code = object.result_code >>> 0;
            if (object.reason != null)
                message.reason = String(object.reason);
            return message;
        };

        /**
         * Creates a plain object from a response_team_edit_notice message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_team_edit_notice
         * @static
         * @param {hall.response_team_edit_notice} message response_team_edit_notice
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_team_edit_notice.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result_code = 0;
                object.reason = "";
            }
            if (message.result_code != null && message.hasOwnProperty("result_code"))
                object.result_code = message.result_code;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            return object;
        };

        /**
         * Converts this response_team_edit_notice to JSON.
         * @function toJSON
         * @memberof hall.response_team_edit_notice
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_team_edit_notice.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_team_edit_notice;
    })();

    hall.request_team_edit_card = (function() {

        /**
         * Properties of a request_team_edit_card.
         * @memberof hall
         * @interface Irequest_team_edit_card
         * @property {number} userid request_team_edit_card userid
         * @property {string} password request_team_edit_card password
         * @property {number} clubid request_team_edit_card clubid
         * @property {string} wx request_team_edit_card wx
         * @property {string} qq request_team_edit_card qq
         */

        /**
         * Constructs a new request_team_edit_card.
         * @memberof hall
         * @classdesc Represents a request_team_edit_card.
         * @implements Irequest_team_edit_card
         * @constructor
         * @param {hall.Irequest_team_edit_card=} [properties] Properties to set
         */
        function request_team_edit_card(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_team_edit_card userid.
         * @member {number} userid
         * @memberof hall.request_team_edit_card
         * @instance
         */
        request_team_edit_card.prototype.userid = 0;

        /**
         * request_team_edit_card password.
         * @member {string} password
         * @memberof hall.request_team_edit_card
         * @instance
         */
        request_team_edit_card.prototype.password = "";

        /**
         * request_team_edit_card clubid.
         * @member {number} clubid
         * @memberof hall.request_team_edit_card
         * @instance
         */
        request_team_edit_card.prototype.clubid = 0;

        /**
         * request_team_edit_card wx.
         * @member {string} wx
         * @memberof hall.request_team_edit_card
         * @instance
         */
        request_team_edit_card.prototype.wx = "";

        /**
         * request_team_edit_card qq.
         * @member {string} qq
         * @memberof hall.request_team_edit_card
         * @instance
         */
        request_team_edit_card.prototype.qq = "";

        /**
         * Creates a new request_team_edit_card instance using the specified properties.
         * @function create
         * @memberof hall.request_team_edit_card
         * @static
         * @param {hall.Irequest_team_edit_card=} [properties] Properties to set
         * @returns {hall.request_team_edit_card} request_team_edit_card instance
         */
        request_team_edit_card.create = function create(properties) {
            return new request_team_edit_card(properties);
        };

        /**
         * Encodes the specified request_team_edit_card message. Does not implicitly {@link hall.request_team_edit_card.verify|verify} messages.
         * @function encode
         * @memberof hall.request_team_edit_card
         * @static
         * @param {hall.Irequest_team_edit_card} message request_team_edit_card message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_edit_card.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.clubid);
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.wx);
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.qq);
            return writer;
        };

        /**
         * Encodes the specified request_team_edit_card message, length delimited. Does not implicitly {@link hall.request_team_edit_card.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_team_edit_card
         * @static
         * @param {hall.Irequest_team_edit_card} message request_team_edit_card message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_edit_card.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_team_edit_card message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_team_edit_card
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_team_edit_card} request_team_edit_card
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_edit_card.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_team_edit_card();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.clubid = reader.uint32();
                    break;
                case 4:
                    message.wx = reader.string();
                    break;
                case 5:
                    message.qq = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("clubid"))
                throw $util.ProtocolError("missing required 'clubid'", { instance: message });
            if (!message.hasOwnProperty("wx"))
                throw $util.ProtocolError("missing required 'wx'", { instance: message });
            if (!message.hasOwnProperty("qq"))
                throw $util.ProtocolError("missing required 'qq'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_team_edit_card message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_team_edit_card
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_team_edit_card} request_team_edit_card
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_edit_card.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_team_edit_card message.
         * @function verify
         * @memberof hall.request_team_edit_card
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_team_edit_card.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isInteger(message.clubid))
                return "clubid: integer expected";
            if (!$util.isString(message.wx))
                return "wx: string expected";
            if (!$util.isString(message.qq))
                return "qq: string expected";
            return null;
        };

        /**
         * Creates a request_team_edit_card message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_team_edit_card
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_team_edit_card} request_team_edit_card
         */
        request_team_edit_card.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_team_edit_card)
                return object;
            var message = new $root.hall.request_team_edit_card();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.clubid != null)
                message.clubid = object.clubid >>> 0;
            if (object.wx != null)
                message.wx = String(object.wx);
            if (object.qq != null)
                message.qq = String(object.qq);
            return message;
        };

        /**
         * Creates a plain object from a request_team_edit_card message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_team_edit_card
         * @static
         * @param {hall.request_team_edit_card} message request_team_edit_card
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_team_edit_card.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.clubid = 0;
                object.wx = "";
                object.qq = "";
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.clubid != null && message.hasOwnProperty("clubid"))
                object.clubid = message.clubid;
            if (message.wx != null && message.hasOwnProperty("wx"))
                object.wx = message.wx;
            if (message.qq != null && message.hasOwnProperty("qq"))
                object.qq = message.qq;
            return object;
        };

        /**
         * Converts this request_team_edit_card to JSON.
         * @function toJSON
         * @memberof hall.request_team_edit_card
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_team_edit_card.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_team_edit_card;
    })();

    hall.response_team_edit_card = (function() {

        /**
         * Properties of a response_team_edit_card.
         * @memberof hall
         * @interface Iresponse_team_edit_card
         * @property {number} result_code response_team_edit_card result_code
         * @property {string} reason response_team_edit_card reason
         */

        /**
         * Constructs a new response_team_edit_card.
         * @memberof hall
         * @classdesc Represents a response_team_edit_card.
         * @implements Iresponse_team_edit_card
         * @constructor
         * @param {hall.Iresponse_team_edit_card=} [properties] Properties to set
         */
        function response_team_edit_card(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_team_edit_card result_code.
         * @member {number} result_code
         * @memberof hall.response_team_edit_card
         * @instance
         */
        response_team_edit_card.prototype.result_code = 0;

        /**
         * response_team_edit_card reason.
         * @member {string} reason
         * @memberof hall.response_team_edit_card
         * @instance
         */
        response_team_edit_card.prototype.reason = "";

        /**
         * Creates a new response_team_edit_card instance using the specified properties.
         * @function create
         * @memberof hall.response_team_edit_card
         * @static
         * @param {hall.Iresponse_team_edit_card=} [properties] Properties to set
         * @returns {hall.response_team_edit_card} response_team_edit_card instance
         */
        response_team_edit_card.create = function create(properties) {
            return new response_team_edit_card(properties);
        };

        /**
         * Encodes the specified response_team_edit_card message. Does not implicitly {@link hall.response_team_edit_card.verify|verify} messages.
         * @function encode
         * @memberof hall.response_team_edit_card
         * @static
         * @param {hall.Iresponse_team_edit_card} message response_team_edit_card message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_edit_card.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.result_code);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.reason);
            return writer;
        };

        /**
         * Encodes the specified response_team_edit_card message, length delimited. Does not implicitly {@link hall.response_team_edit_card.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_team_edit_card
         * @static
         * @param {hall.Iresponse_team_edit_card} message response_team_edit_card message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_edit_card.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_team_edit_card message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_team_edit_card
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_team_edit_card} response_team_edit_card
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_edit_card.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_team_edit_card();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.result_code = reader.uint32();
                    break;
                case 2:
                    message.reason = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("result_code"))
                throw $util.ProtocolError("missing required 'result_code'", { instance: message });
            if (!message.hasOwnProperty("reason"))
                throw $util.ProtocolError("missing required 'reason'", { instance: message });
            return message;
        };

        /**
         * Decodes a response_team_edit_card message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_team_edit_card
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_team_edit_card} response_team_edit_card
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_edit_card.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_team_edit_card message.
         * @function verify
         * @memberof hall.response_team_edit_card
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_team_edit_card.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.result_code))
                return "result_code: integer expected";
            if (!$util.isString(message.reason))
                return "reason: string expected";
            return null;
        };

        /**
         * Creates a response_team_edit_card message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_team_edit_card
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_team_edit_card} response_team_edit_card
         */
        response_team_edit_card.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_team_edit_card)
                return object;
            var message = new $root.hall.response_team_edit_card();
            if (object.result_code != null)
                message.result_code = object.result_code >>> 0;
            if (object.reason != null)
                message.reason = String(object.reason);
            return message;
        };

        /**
         * Creates a plain object from a response_team_edit_card message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_team_edit_card
         * @static
         * @param {hall.response_team_edit_card} message response_team_edit_card
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_team_edit_card.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result_code = 0;
                object.reason = "";
            }
            if (message.result_code != null && message.hasOwnProperty("result_code"))
                object.result_code = message.result_code;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            return object;
        };

        /**
         * Converts this response_team_edit_card to JSON.
         * @function toJSON
         * @memberof hall.response_team_edit_card
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_team_edit_card.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_team_edit_card;
    })();

    hall.request_team_log_transfer = (function() {

        /**
         * Properties of a request_team_log_transfer.
         * @memberof hall
         * @interface Irequest_team_log_transfer
         * @property {number} userid request_team_log_transfer userid
         * @property {string} password request_team_log_transfer password
         * @property {number} clubid request_team_log_transfer clubid
         */

        /**
         * Constructs a new request_team_log_transfer.
         * @memberof hall
         * @classdesc Represents a request_team_log_transfer.
         * @implements Irequest_team_log_transfer
         * @constructor
         * @param {hall.Irequest_team_log_transfer=} [properties] Properties to set
         */
        function request_team_log_transfer(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_team_log_transfer userid.
         * @member {number} userid
         * @memberof hall.request_team_log_transfer
         * @instance
         */
        request_team_log_transfer.prototype.userid = 0;

        /**
         * request_team_log_transfer password.
         * @member {string} password
         * @memberof hall.request_team_log_transfer
         * @instance
         */
        request_team_log_transfer.prototype.password = "";

        /**
         * request_team_log_transfer clubid.
         * @member {number} clubid
         * @memberof hall.request_team_log_transfer
         * @instance
         */
        request_team_log_transfer.prototype.clubid = 0;

        /**
         * Creates a new request_team_log_transfer instance using the specified properties.
         * @function create
         * @memberof hall.request_team_log_transfer
         * @static
         * @param {hall.Irequest_team_log_transfer=} [properties] Properties to set
         * @returns {hall.request_team_log_transfer} request_team_log_transfer instance
         */
        request_team_log_transfer.create = function create(properties) {
            return new request_team_log_transfer(properties);
        };

        /**
         * Encodes the specified request_team_log_transfer message. Does not implicitly {@link hall.request_team_log_transfer.verify|verify} messages.
         * @function encode
         * @memberof hall.request_team_log_transfer
         * @static
         * @param {hall.Irequest_team_log_transfer} message request_team_log_transfer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_log_transfer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.clubid);
            return writer;
        };

        /**
         * Encodes the specified request_team_log_transfer message, length delimited. Does not implicitly {@link hall.request_team_log_transfer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_team_log_transfer
         * @static
         * @param {hall.Irequest_team_log_transfer} message request_team_log_transfer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_log_transfer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_team_log_transfer message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_team_log_transfer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_team_log_transfer} request_team_log_transfer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_log_transfer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_team_log_transfer();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.clubid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("clubid"))
                throw $util.ProtocolError("missing required 'clubid'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_team_log_transfer message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_team_log_transfer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_team_log_transfer} request_team_log_transfer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_log_transfer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_team_log_transfer message.
         * @function verify
         * @memberof hall.request_team_log_transfer
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_team_log_transfer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isInteger(message.clubid))
                return "clubid: integer expected";
            return null;
        };

        /**
         * Creates a request_team_log_transfer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_team_log_transfer
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_team_log_transfer} request_team_log_transfer
         */
        request_team_log_transfer.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_team_log_transfer)
                return object;
            var message = new $root.hall.request_team_log_transfer();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.clubid != null)
                message.clubid = object.clubid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a request_team_log_transfer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_team_log_transfer
         * @static
         * @param {hall.request_team_log_transfer} message request_team_log_transfer
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_team_log_transfer.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.clubid = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.clubid != null && message.hasOwnProperty("clubid"))
                object.clubid = message.clubid;
            return object;
        };

        /**
         * Converts this request_team_log_transfer to JSON.
         * @function toJSON
         * @memberof hall.request_team_log_transfer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_team_log_transfer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_team_log_transfer;
    })();

    hall.team_log_transfer_item = (function() {

        /**
         * Properties of a team_log_transfer_item.
         * @memberof hall
         * @interface Iteam_log_transfer_item
         * @property {number} id team_log_transfer_item id
         * @property {string} insert_date team_log_transfer_item insert_date
         * @property {string} nickname team_log_transfer_item nickname
         * @property {number} gameid team_log_transfer_item gameid
         * @property {number|Long} transfer_score team_log_transfer_item transfer_score
         * @property {number|Long} state team_log_transfer_item state
         * @property {number|null} [expired_seconds] team_log_transfer_item expired_seconds
         */

        /**
         * Constructs a new team_log_transfer_item.
         * @memberof hall
         * @classdesc Represents a team_log_transfer_item.
         * @implements Iteam_log_transfer_item
         * @constructor
         * @param {hall.Iteam_log_transfer_item=} [properties] Properties to set
         */
        function team_log_transfer_item(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * team_log_transfer_item id.
         * @member {number} id
         * @memberof hall.team_log_transfer_item
         * @instance
         */
        team_log_transfer_item.prototype.id = 0;

        /**
         * team_log_transfer_item insert_date.
         * @member {string} insert_date
         * @memberof hall.team_log_transfer_item
         * @instance
         */
        team_log_transfer_item.prototype.insert_date = "";

        /**
         * team_log_transfer_item nickname.
         * @member {string} nickname
         * @memberof hall.team_log_transfer_item
         * @instance
         */
        team_log_transfer_item.prototype.nickname = "";

        /**
         * team_log_transfer_item gameid.
         * @member {number} gameid
         * @memberof hall.team_log_transfer_item
         * @instance
         */
        team_log_transfer_item.prototype.gameid = 0;

        /**
         * team_log_transfer_item transfer_score.
         * @member {number|Long} transfer_score
         * @memberof hall.team_log_transfer_item
         * @instance
         */
        team_log_transfer_item.prototype.transfer_score = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * team_log_transfer_item state.
         * @member {number|Long} state
         * @memberof hall.team_log_transfer_item
         * @instance
         */
        team_log_transfer_item.prototype.state = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * team_log_transfer_item expired_seconds.
         * @member {number} expired_seconds
         * @memberof hall.team_log_transfer_item
         * @instance
         */
        team_log_transfer_item.prototype.expired_seconds = 0;

        /**
         * Creates a new team_log_transfer_item instance using the specified properties.
         * @function create
         * @memberof hall.team_log_transfer_item
         * @static
         * @param {hall.Iteam_log_transfer_item=} [properties] Properties to set
         * @returns {hall.team_log_transfer_item} team_log_transfer_item instance
         */
        team_log_transfer_item.create = function create(properties) {
            return new team_log_transfer_item(properties);
        };

        /**
         * Encodes the specified team_log_transfer_item message. Does not implicitly {@link hall.team_log_transfer_item.verify|verify} messages.
         * @function encode
         * @memberof hall.team_log_transfer_item
         * @static
         * @param {hall.Iteam_log_transfer_item} message team_log_transfer_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        team_log_transfer_item.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.insert_date);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.nickname);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.gameid);
            writer.uint32(/* id 5, wireType 0 =*/40).sint64(message.transfer_score);
            writer.uint32(/* id 6, wireType 0 =*/48).sint64(message.state);
            if (message.expired_seconds != null && Object.hasOwnProperty.call(message, "expired_seconds"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.expired_seconds);
            return writer;
        };

        /**
         * Encodes the specified team_log_transfer_item message, length delimited. Does not implicitly {@link hall.team_log_transfer_item.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.team_log_transfer_item
         * @static
         * @param {hall.Iteam_log_transfer_item} message team_log_transfer_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        team_log_transfer_item.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a team_log_transfer_item message from the specified reader or buffer.
         * @function decode
         * @memberof hall.team_log_transfer_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.team_log_transfer_item} team_log_transfer_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        team_log_transfer_item.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.team_log_transfer_item();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.insert_date = reader.string();
                    break;
                case 3:
                    message.nickname = reader.string();
                    break;
                case 4:
                    message.gameid = reader.uint32();
                    break;
                case 5:
                    message.transfer_score = reader.sint64();
                    break;
                case 6:
                    message.state = reader.sint64();
                    break;
                case 7:
                    message.expired_seconds = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("id"))
                throw $util.ProtocolError("missing required 'id'", { instance: message });
            if (!message.hasOwnProperty("insert_date"))
                throw $util.ProtocolError("missing required 'insert_date'", { instance: message });
            if (!message.hasOwnProperty("nickname"))
                throw $util.ProtocolError("missing required 'nickname'", { instance: message });
            if (!message.hasOwnProperty("gameid"))
                throw $util.ProtocolError("missing required 'gameid'", { instance: message });
            if (!message.hasOwnProperty("transfer_score"))
                throw $util.ProtocolError("missing required 'transfer_score'", { instance: message });
            if (!message.hasOwnProperty("state"))
                throw $util.ProtocolError("missing required 'state'", { instance: message });
            return message;
        };

        /**
         * Decodes a team_log_transfer_item message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.team_log_transfer_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.team_log_transfer_item} team_log_transfer_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        team_log_transfer_item.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a team_log_transfer_item message.
         * @function verify
         * @memberof hall.team_log_transfer_item
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        team_log_transfer_item.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.id))
                return "id: integer expected";
            if (!$util.isString(message.insert_date))
                return "insert_date: string expected";
            if (!$util.isString(message.nickname))
                return "nickname: string expected";
            if (!$util.isInteger(message.gameid))
                return "gameid: integer expected";
            if (!$util.isInteger(message.transfer_score) && !(message.transfer_score && $util.isInteger(message.transfer_score.low) && $util.isInteger(message.transfer_score.high)))
                return "transfer_score: integer|Long expected";
            if (!$util.isInteger(message.state) && !(message.state && $util.isInteger(message.state.low) && $util.isInteger(message.state.high)))
                return "state: integer|Long expected";
            if (message.expired_seconds != null && message.hasOwnProperty("expired_seconds"))
                if (!$util.isInteger(message.expired_seconds))
                    return "expired_seconds: integer expected";
            return null;
        };

        /**
         * Creates a team_log_transfer_item message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.team_log_transfer_item
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.team_log_transfer_item} team_log_transfer_item
         */
        team_log_transfer_item.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.team_log_transfer_item)
                return object;
            var message = new $root.hall.team_log_transfer_item();
            if (object.id != null)
                message.id = object.id >>> 0;
            if (object.insert_date != null)
                message.insert_date = String(object.insert_date);
            if (object.nickname != null)
                message.nickname = String(object.nickname);
            if (object.gameid != null)
                message.gameid = object.gameid >>> 0;
            if (object.transfer_score != null)
                if ($util.Long)
                    (message.transfer_score = $util.Long.fromValue(object.transfer_score)).unsigned = false;
                else if (typeof object.transfer_score === "string")
                    message.transfer_score = parseInt(object.transfer_score, 10);
                else if (typeof object.transfer_score === "number")
                    message.transfer_score = object.transfer_score;
                else if (typeof object.transfer_score === "object")
                    message.transfer_score = new $util.LongBits(object.transfer_score.low >>> 0, object.transfer_score.high >>> 0).toNumber();
            if (object.state != null)
                if ($util.Long)
                    (message.state = $util.Long.fromValue(object.state)).unsigned = false;
                else if (typeof object.state === "string")
                    message.state = parseInt(object.state, 10);
                else if (typeof object.state === "number")
                    message.state = object.state;
                else if (typeof object.state === "object")
                    message.state = new $util.LongBits(object.state.low >>> 0, object.state.high >>> 0).toNumber();
            if (object.expired_seconds != null)
                message.expired_seconds = object.expired_seconds >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a team_log_transfer_item message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.team_log_transfer_item
         * @static
         * @param {hall.team_log_transfer_item} message team_log_transfer_item
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        team_log_transfer_item.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.insert_date = "";
                object.nickname = "";
                object.gameid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.transfer_score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.transfer_score = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.state = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.state = options.longs === String ? "0" : 0;
                object.expired_seconds = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.insert_date != null && message.hasOwnProperty("insert_date"))
                object.insert_date = message.insert_date;
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                object.nickname = message.nickname;
            if (message.gameid != null && message.hasOwnProperty("gameid"))
                object.gameid = message.gameid;
            if (message.transfer_score != null && message.hasOwnProperty("transfer_score"))
                if (typeof message.transfer_score === "number")
                    object.transfer_score = options.longs === String ? String(message.transfer_score) : message.transfer_score;
                else
                    object.transfer_score = options.longs === String ? $util.Long.prototype.toString.call(message.transfer_score) : options.longs === Number ? new $util.LongBits(message.transfer_score.low >>> 0, message.transfer_score.high >>> 0).toNumber() : message.transfer_score;
            if (message.state != null && message.hasOwnProperty("state"))
                if (typeof message.state === "number")
                    object.state = options.longs === String ? String(message.state) : message.state;
                else
                    object.state = options.longs === String ? $util.Long.prototype.toString.call(message.state) : options.longs === Number ? new $util.LongBits(message.state.low >>> 0, message.state.high >>> 0).toNumber() : message.state;
            if (message.expired_seconds != null && message.hasOwnProperty("expired_seconds"))
                object.expired_seconds = message.expired_seconds;
            return object;
        };

        /**
         * Converts this team_log_transfer_item to JSON.
         * @function toJSON
         * @memberof hall.team_log_transfer_item
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        team_log_transfer_item.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return team_log_transfer_item;
    })();

    hall.response_team_log_transfer = (function() {

        /**
         * Properties of a response_team_log_transfer.
         * @memberof hall
         * @interface Iresponse_team_log_transfer
         * @property {Array.<hall.Iteam_log_transfer_item>|null} [items] response_team_log_transfer items
         */

        /**
         * Constructs a new response_team_log_transfer.
         * @memberof hall
         * @classdesc Represents a response_team_log_transfer.
         * @implements Iresponse_team_log_transfer
         * @constructor
         * @param {hall.Iresponse_team_log_transfer=} [properties] Properties to set
         */
        function response_team_log_transfer(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_team_log_transfer items.
         * @member {Array.<hall.Iteam_log_transfer_item>} items
         * @memberof hall.response_team_log_transfer
         * @instance
         */
        response_team_log_transfer.prototype.items = $util.emptyArray;

        /**
         * Creates a new response_team_log_transfer instance using the specified properties.
         * @function create
         * @memberof hall.response_team_log_transfer
         * @static
         * @param {hall.Iresponse_team_log_transfer=} [properties] Properties to set
         * @returns {hall.response_team_log_transfer} response_team_log_transfer instance
         */
        response_team_log_transfer.create = function create(properties) {
            return new response_team_log_transfer(properties);
        };

        /**
         * Encodes the specified response_team_log_transfer message. Does not implicitly {@link hall.response_team_log_transfer.verify|verify} messages.
         * @function encode
         * @memberof hall.response_team_log_transfer
         * @static
         * @param {hall.Iresponse_team_log_transfer} message response_team_log_transfer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_log_transfer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.hall.team_log_transfer_item.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified response_team_log_transfer message, length delimited. Does not implicitly {@link hall.response_team_log_transfer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_team_log_transfer
         * @static
         * @param {hall.Iresponse_team_log_transfer} message response_team_log_transfer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_log_transfer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_team_log_transfer message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_team_log_transfer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_team_log_transfer} response_team_log_transfer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_log_transfer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_team_log_transfer();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.items && message.items.length))
                        message.items = [];
                    message.items.push($root.hall.team_log_transfer_item.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a response_team_log_transfer message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_team_log_transfer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_team_log_transfer} response_team_log_transfer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_log_transfer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_team_log_transfer message.
         * @function verify
         * @memberof hall.response_team_log_transfer
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_team_log_transfer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.hall.team_log_transfer_item.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a response_team_log_transfer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_team_log_transfer
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_team_log_transfer} response_team_log_transfer
         */
        response_team_log_transfer.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_team_log_transfer)
                return object;
            var message = new $root.hall.response_team_log_transfer();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".hall.response_team_log_transfer.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".hall.response_team_log_transfer.items: object expected");
                    message.items[i] = $root.hall.team_log_transfer_item.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a response_team_log_transfer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_team_log_transfer
         * @static
         * @param {hall.response_team_log_transfer} message response_team_log_transfer
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_team_log_transfer.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.hall.team_log_transfer_item.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this response_team_log_transfer to JSON.
         * @function toJSON
         * @memberof hall.response_team_log_transfer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_team_log_transfer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_team_log_transfer;
    })();

    hall.request_team_transfer_cancel = (function() {

        /**
         * Properties of a request_team_transfer_cancel.
         * @memberof hall
         * @interface Irequest_team_transfer_cancel
         * @property {number} userid request_team_transfer_cancel userid
         * @property {string} password request_team_transfer_cancel password
         * @property {number} clubid request_team_transfer_cancel clubid
         * @property {number} id request_team_transfer_cancel id
         */

        /**
         * Constructs a new request_team_transfer_cancel.
         * @memberof hall
         * @classdesc Represents a request_team_transfer_cancel.
         * @implements Irequest_team_transfer_cancel
         * @constructor
         * @param {hall.Irequest_team_transfer_cancel=} [properties] Properties to set
         */
        function request_team_transfer_cancel(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_team_transfer_cancel userid.
         * @member {number} userid
         * @memberof hall.request_team_transfer_cancel
         * @instance
         */
        request_team_transfer_cancel.prototype.userid = 0;

        /**
         * request_team_transfer_cancel password.
         * @member {string} password
         * @memberof hall.request_team_transfer_cancel
         * @instance
         */
        request_team_transfer_cancel.prototype.password = "";

        /**
         * request_team_transfer_cancel clubid.
         * @member {number} clubid
         * @memberof hall.request_team_transfer_cancel
         * @instance
         */
        request_team_transfer_cancel.prototype.clubid = 0;

        /**
         * request_team_transfer_cancel id.
         * @member {number} id
         * @memberof hall.request_team_transfer_cancel
         * @instance
         */
        request_team_transfer_cancel.prototype.id = 0;

        /**
         * Creates a new request_team_transfer_cancel instance using the specified properties.
         * @function create
         * @memberof hall.request_team_transfer_cancel
         * @static
         * @param {hall.Irequest_team_transfer_cancel=} [properties] Properties to set
         * @returns {hall.request_team_transfer_cancel} request_team_transfer_cancel instance
         */
        request_team_transfer_cancel.create = function create(properties) {
            return new request_team_transfer_cancel(properties);
        };

        /**
         * Encodes the specified request_team_transfer_cancel message. Does not implicitly {@link hall.request_team_transfer_cancel.verify|verify} messages.
         * @function encode
         * @memberof hall.request_team_transfer_cancel
         * @static
         * @param {hall.Irequest_team_transfer_cancel} message request_team_transfer_cancel message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_transfer_cancel.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.clubid);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.id);
            return writer;
        };

        /**
         * Encodes the specified request_team_transfer_cancel message, length delimited. Does not implicitly {@link hall.request_team_transfer_cancel.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_team_transfer_cancel
         * @static
         * @param {hall.Irequest_team_transfer_cancel} message request_team_transfer_cancel message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_transfer_cancel.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_team_transfer_cancel message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_team_transfer_cancel
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_team_transfer_cancel} request_team_transfer_cancel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_transfer_cancel.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_team_transfer_cancel();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.clubid = reader.uint32();
                    break;
                case 4:
                    message.id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("clubid"))
                throw $util.ProtocolError("missing required 'clubid'", { instance: message });
            if (!message.hasOwnProperty("id"))
                throw $util.ProtocolError("missing required 'id'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_team_transfer_cancel message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_team_transfer_cancel
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_team_transfer_cancel} request_team_transfer_cancel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_transfer_cancel.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_team_transfer_cancel message.
         * @function verify
         * @memberof hall.request_team_transfer_cancel
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_team_transfer_cancel.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isInteger(message.clubid))
                return "clubid: integer expected";
            if (!$util.isInteger(message.id))
                return "id: integer expected";
            return null;
        };

        /**
         * Creates a request_team_transfer_cancel message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_team_transfer_cancel
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_team_transfer_cancel} request_team_transfer_cancel
         */
        request_team_transfer_cancel.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_team_transfer_cancel)
                return object;
            var message = new $root.hall.request_team_transfer_cancel();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.clubid != null)
                message.clubid = object.clubid >>> 0;
            if (object.id != null)
                message.id = object.id >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a request_team_transfer_cancel message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_team_transfer_cancel
         * @static
         * @param {hall.request_team_transfer_cancel} message request_team_transfer_cancel
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_team_transfer_cancel.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.clubid = 0;
                object.id = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.clubid != null && message.hasOwnProperty("clubid"))
                object.clubid = message.clubid;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            return object;
        };

        /**
         * Converts this request_team_transfer_cancel to JSON.
         * @function toJSON
         * @memberof hall.request_team_transfer_cancel
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_team_transfer_cancel.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_team_transfer_cancel;
    })();

    hall.response_team_transfer_cancel = (function() {

        /**
         * Properties of a response_team_transfer_cancel.
         * @memberof hall
         * @interface Iresponse_team_transfer_cancel
         * @property {number} result_code response_team_transfer_cancel result_code
         * @property {string} reason response_team_transfer_cancel reason
         * @property {number|null} [id] response_team_transfer_cancel id
         */

        /**
         * Constructs a new response_team_transfer_cancel.
         * @memberof hall
         * @classdesc Represents a response_team_transfer_cancel.
         * @implements Iresponse_team_transfer_cancel
         * @constructor
         * @param {hall.Iresponse_team_transfer_cancel=} [properties] Properties to set
         */
        function response_team_transfer_cancel(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_team_transfer_cancel result_code.
         * @member {number} result_code
         * @memberof hall.response_team_transfer_cancel
         * @instance
         */
        response_team_transfer_cancel.prototype.result_code = 0;

        /**
         * response_team_transfer_cancel reason.
         * @member {string} reason
         * @memberof hall.response_team_transfer_cancel
         * @instance
         */
        response_team_transfer_cancel.prototype.reason = "";

        /**
         * response_team_transfer_cancel id.
         * @member {number} id
         * @memberof hall.response_team_transfer_cancel
         * @instance
         */
        response_team_transfer_cancel.prototype.id = 0;

        /**
         * Creates a new response_team_transfer_cancel instance using the specified properties.
         * @function create
         * @memberof hall.response_team_transfer_cancel
         * @static
         * @param {hall.Iresponse_team_transfer_cancel=} [properties] Properties to set
         * @returns {hall.response_team_transfer_cancel} response_team_transfer_cancel instance
         */
        response_team_transfer_cancel.create = function create(properties) {
            return new response_team_transfer_cancel(properties);
        };

        /**
         * Encodes the specified response_team_transfer_cancel message. Does not implicitly {@link hall.response_team_transfer_cancel.verify|verify} messages.
         * @function encode
         * @memberof hall.response_team_transfer_cancel
         * @static
         * @param {hall.Iresponse_team_transfer_cancel} message response_team_transfer_cancel message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_transfer_cancel.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.result_code);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.reason);
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.id);
            return writer;
        };

        /**
         * Encodes the specified response_team_transfer_cancel message, length delimited. Does not implicitly {@link hall.response_team_transfer_cancel.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_team_transfer_cancel
         * @static
         * @param {hall.Iresponse_team_transfer_cancel} message response_team_transfer_cancel message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_transfer_cancel.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_team_transfer_cancel message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_team_transfer_cancel
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_team_transfer_cancel} response_team_transfer_cancel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_transfer_cancel.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_team_transfer_cancel();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.result_code = reader.uint32();
                    break;
                case 2:
                    message.reason = reader.string();
                    break;
                case 3:
                    message.id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("result_code"))
                throw $util.ProtocolError("missing required 'result_code'", { instance: message });
            if (!message.hasOwnProperty("reason"))
                throw $util.ProtocolError("missing required 'reason'", { instance: message });
            return message;
        };

        /**
         * Decodes a response_team_transfer_cancel message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_team_transfer_cancel
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_team_transfer_cancel} response_team_transfer_cancel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_transfer_cancel.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_team_transfer_cancel message.
         * @function verify
         * @memberof hall.response_team_transfer_cancel
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_team_transfer_cancel.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.result_code))
                return "result_code: integer expected";
            if (!$util.isString(message.reason))
                return "reason: string expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            return null;
        };

        /**
         * Creates a response_team_transfer_cancel message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_team_transfer_cancel
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_team_transfer_cancel} response_team_transfer_cancel
         */
        response_team_transfer_cancel.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_team_transfer_cancel)
                return object;
            var message = new $root.hall.response_team_transfer_cancel();
            if (object.result_code != null)
                message.result_code = object.result_code >>> 0;
            if (object.reason != null)
                message.reason = String(object.reason);
            if (object.id != null)
                message.id = object.id >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a response_team_transfer_cancel message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_team_transfer_cancel
         * @static
         * @param {hall.response_team_transfer_cancel} message response_team_transfer_cancel
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_team_transfer_cancel.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result_code = 0;
                object.reason = "";
                object.id = 0;
            }
            if (message.result_code != null && message.hasOwnProperty("result_code"))
                object.result_code = message.result_code;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            return object;
        };

        /**
         * Converts this response_team_transfer_cancel to JSON.
         * @function toJSON
         * @memberof hall.response_team_transfer_cancel
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_team_transfer_cancel.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_team_transfer_cancel;
    })();

    hall.request_team_auto_be_partner = (function() {

        /**
         * Properties of a request_team_auto_be_partner.
         * @memberof hall
         * @interface Irequest_team_auto_be_partner
         * @property {number} userid request_team_auto_be_partner userid
         * @property {string} password request_team_auto_be_partner password
         * @property {number} clubid request_team_auto_be_partner clubid
         * @property {boolean} auto_be_partner request_team_auto_be_partner auto_be_partner
         * @property {number} auto_partner_share_ratio request_team_auto_be_partner auto_partner_share_ratio
         */

        /**
         * Constructs a new request_team_auto_be_partner.
         * @memberof hall
         * @classdesc Represents a request_team_auto_be_partner.
         * @implements Irequest_team_auto_be_partner
         * @constructor
         * @param {hall.Irequest_team_auto_be_partner=} [properties] Properties to set
         */
        function request_team_auto_be_partner(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_team_auto_be_partner userid.
         * @member {number} userid
         * @memberof hall.request_team_auto_be_partner
         * @instance
         */
        request_team_auto_be_partner.prototype.userid = 0;

        /**
         * request_team_auto_be_partner password.
         * @member {string} password
         * @memberof hall.request_team_auto_be_partner
         * @instance
         */
        request_team_auto_be_partner.prototype.password = "";

        /**
         * request_team_auto_be_partner clubid.
         * @member {number} clubid
         * @memberof hall.request_team_auto_be_partner
         * @instance
         */
        request_team_auto_be_partner.prototype.clubid = 0;

        /**
         * request_team_auto_be_partner auto_be_partner.
         * @member {boolean} auto_be_partner
         * @memberof hall.request_team_auto_be_partner
         * @instance
         */
        request_team_auto_be_partner.prototype.auto_be_partner = false;

        /**
         * request_team_auto_be_partner auto_partner_share_ratio.
         * @member {number} auto_partner_share_ratio
         * @memberof hall.request_team_auto_be_partner
         * @instance
         */
        request_team_auto_be_partner.prototype.auto_partner_share_ratio = 0;

        /**
         * Creates a new request_team_auto_be_partner instance using the specified properties.
         * @function create
         * @memberof hall.request_team_auto_be_partner
         * @static
         * @param {hall.Irequest_team_auto_be_partner=} [properties] Properties to set
         * @returns {hall.request_team_auto_be_partner} request_team_auto_be_partner instance
         */
        request_team_auto_be_partner.create = function create(properties) {
            return new request_team_auto_be_partner(properties);
        };

        /**
         * Encodes the specified request_team_auto_be_partner message. Does not implicitly {@link hall.request_team_auto_be_partner.verify|verify} messages.
         * @function encode
         * @memberof hall.request_team_auto_be_partner
         * @static
         * @param {hall.Irequest_team_auto_be_partner} message request_team_auto_be_partner message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_auto_be_partner.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.clubid);
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.auto_be_partner);
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.auto_partner_share_ratio);
            return writer;
        };

        /**
         * Encodes the specified request_team_auto_be_partner message, length delimited. Does not implicitly {@link hall.request_team_auto_be_partner.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_team_auto_be_partner
         * @static
         * @param {hall.Irequest_team_auto_be_partner} message request_team_auto_be_partner message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_auto_be_partner.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_team_auto_be_partner message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_team_auto_be_partner
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_team_auto_be_partner} request_team_auto_be_partner
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_auto_be_partner.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_team_auto_be_partner();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.clubid = reader.uint32();
                    break;
                case 4:
                    message.auto_be_partner = reader.bool();
                    break;
                case 5:
                    message.auto_partner_share_ratio = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("clubid"))
                throw $util.ProtocolError("missing required 'clubid'", { instance: message });
            if (!message.hasOwnProperty("auto_be_partner"))
                throw $util.ProtocolError("missing required 'auto_be_partner'", { instance: message });
            if (!message.hasOwnProperty("auto_partner_share_ratio"))
                throw $util.ProtocolError("missing required 'auto_partner_share_ratio'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_team_auto_be_partner message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_team_auto_be_partner
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_team_auto_be_partner} request_team_auto_be_partner
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_auto_be_partner.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_team_auto_be_partner message.
         * @function verify
         * @memberof hall.request_team_auto_be_partner
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_team_auto_be_partner.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isInteger(message.clubid))
                return "clubid: integer expected";
            if (typeof message.auto_be_partner !== "boolean")
                return "auto_be_partner: boolean expected";
            if (!$util.isInteger(message.auto_partner_share_ratio))
                return "auto_partner_share_ratio: integer expected";
            return null;
        };

        /**
         * Creates a request_team_auto_be_partner message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_team_auto_be_partner
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_team_auto_be_partner} request_team_auto_be_partner
         */
        request_team_auto_be_partner.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_team_auto_be_partner)
                return object;
            var message = new $root.hall.request_team_auto_be_partner();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.clubid != null)
                message.clubid = object.clubid >>> 0;
            if (object.auto_be_partner != null)
                message.auto_be_partner = Boolean(object.auto_be_partner);
            if (object.auto_partner_share_ratio != null)
                message.auto_partner_share_ratio = object.auto_partner_share_ratio >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a request_team_auto_be_partner message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_team_auto_be_partner
         * @static
         * @param {hall.request_team_auto_be_partner} message request_team_auto_be_partner
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_team_auto_be_partner.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.clubid = 0;
                object.auto_be_partner = false;
                object.auto_partner_share_ratio = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.clubid != null && message.hasOwnProperty("clubid"))
                object.clubid = message.clubid;
            if (message.auto_be_partner != null && message.hasOwnProperty("auto_be_partner"))
                object.auto_be_partner = message.auto_be_partner;
            if (message.auto_partner_share_ratio != null && message.hasOwnProperty("auto_partner_share_ratio"))
                object.auto_partner_share_ratio = message.auto_partner_share_ratio;
            return object;
        };

        /**
         * Converts this request_team_auto_be_partner to JSON.
         * @function toJSON
         * @memberof hall.request_team_auto_be_partner
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_team_auto_be_partner.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_team_auto_be_partner;
    })();

    hall.response_team_auto_be_partner = (function() {

        /**
         * Properties of a response_team_auto_be_partner.
         * @memberof hall
         * @interface Iresponse_team_auto_be_partner
         * @property {number} result_code response_team_auto_be_partner result_code
         * @property {string} reason response_team_auto_be_partner reason
         */

        /**
         * Constructs a new response_team_auto_be_partner.
         * @memberof hall
         * @classdesc Represents a response_team_auto_be_partner.
         * @implements Iresponse_team_auto_be_partner
         * @constructor
         * @param {hall.Iresponse_team_auto_be_partner=} [properties] Properties to set
         */
        function response_team_auto_be_partner(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_team_auto_be_partner result_code.
         * @member {number} result_code
         * @memberof hall.response_team_auto_be_partner
         * @instance
         */
        response_team_auto_be_partner.prototype.result_code = 0;

        /**
         * response_team_auto_be_partner reason.
         * @member {string} reason
         * @memberof hall.response_team_auto_be_partner
         * @instance
         */
        response_team_auto_be_partner.prototype.reason = "";

        /**
         * Creates a new response_team_auto_be_partner instance using the specified properties.
         * @function create
         * @memberof hall.response_team_auto_be_partner
         * @static
         * @param {hall.Iresponse_team_auto_be_partner=} [properties] Properties to set
         * @returns {hall.response_team_auto_be_partner} response_team_auto_be_partner instance
         */
        response_team_auto_be_partner.create = function create(properties) {
            return new response_team_auto_be_partner(properties);
        };

        /**
         * Encodes the specified response_team_auto_be_partner message. Does not implicitly {@link hall.response_team_auto_be_partner.verify|verify} messages.
         * @function encode
         * @memberof hall.response_team_auto_be_partner
         * @static
         * @param {hall.Iresponse_team_auto_be_partner} message response_team_auto_be_partner message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_auto_be_partner.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.result_code);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.reason);
            return writer;
        };

        /**
         * Encodes the specified response_team_auto_be_partner message, length delimited. Does not implicitly {@link hall.response_team_auto_be_partner.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_team_auto_be_partner
         * @static
         * @param {hall.Iresponse_team_auto_be_partner} message response_team_auto_be_partner message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_auto_be_partner.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_team_auto_be_partner message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_team_auto_be_partner
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_team_auto_be_partner} response_team_auto_be_partner
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_auto_be_partner.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_team_auto_be_partner();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.result_code = reader.uint32();
                    break;
                case 2:
                    message.reason = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("result_code"))
                throw $util.ProtocolError("missing required 'result_code'", { instance: message });
            if (!message.hasOwnProperty("reason"))
                throw $util.ProtocolError("missing required 'reason'", { instance: message });
            return message;
        };

        /**
         * Decodes a response_team_auto_be_partner message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_team_auto_be_partner
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_team_auto_be_partner} response_team_auto_be_partner
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_auto_be_partner.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_team_auto_be_partner message.
         * @function verify
         * @memberof hall.response_team_auto_be_partner
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_team_auto_be_partner.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.result_code))
                return "result_code: integer expected";
            if (!$util.isString(message.reason))
                return "reason: string expected";
            return null;
        };

        /**
         * Creates a response_team_auto_be_partner message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_team_auto_be_partner
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_team_auto_be_partner} response_team_auto_be_partner
         */
        response_team_auto_be_partner.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_team_auto_be_partner)
                return object;
            var message = new $root.hall.response_team_auto_be_partner();
            if (object.result_code != null)
                message.result_code = object.result_code >>> 0;
            if (object.reason != null)
                message.reason = String(object.reason);
            return message;
        };

        /**
         * Creates a plain object from a response_team_auto_be_partner message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_team_auto_be_partner
         * @static
         * @param {hall.response_team_auto_be_partner} message response_team_auto_be_partner
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_team_auto_be_partner.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result_code = 0;
                object.reason = "";
            }
            if (message.result_code != null && message.hasOwnProperty("result_code"))
                object.result_code = message.result_code;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            return object;
        };

        /**
         * Converts this response_team_auto_be_partner to JSON.
         * @function toJSON
         * @memberof hall.response_team_auto_be_partner
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_team_auto_be_partner.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_team_auto_be_partner;
    })();

    hall.request_team_be_partner = (function() {

        /**
         * Properties of a request_team_be_partner.
         * @memberof hall
         * @interface Irequest_team_be_partner
         * @property {number} userid request_team_be_partner userid
         * @property {string} password request_team_be_partner password
         * @property {number} clubid request_team_be_partner clubid
         * @property {number} dest_userid request_team_be_partner dest_userid
         * @property {number} share_ratio request_team_be_partner share_ratio
         */

        /**
         * Constructs a new request_team_be_partner.
         * @memberof hall
         * @classdesc Represents a request_team_be_partner.
         * @implements Irequest_team_be_partner
         * @constructor
         * @param {hall.Irequest_team_be_partner=} [properties] Properties to set
         */
        function request_team_be_partner(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_team_be_partner userid.
         * @member {number} userid
         * @memberof hall.request_team_be_partner
         * @instance
         */
        request_team_be_partner.prototype.userid = 0;

        /**
         * request_team_be_partner password.
         * @member {string} password
         * @memberof hall.request_team_be_partner
         * @instance
         */
        request_team_be_partner.prototype.password = "";

        /**
         * request_team_be_partner clubid.
         * @member {number} clubid
         * @memberof hall.request_team_be_partner
         * @instance
         */
        request_team_be_partner.prototype.clubid = 0;

        /**
         * request_team_be_partner dest_userid.
         * @member {number} dest_userid
         * @memberof hall.request_team_be_partner
         * @instance
         */
        request_team_be_partner.prototype.dest_userid = 0;

        /**
         * request_team_be_partner share_ratio.
         * @member {number} share_ratio
         * @memberof hall.request_team_be_partner
         * @instance
         */
        request_team_be_partner.prototype.share_ratio = 0;

        /**
         * Creates a new request_team_be_partner instance using the specified properties.
         * @function create
         * @memberof hall.request_team_be_partner
         * @static
         * @param {hall.Irequest_team_be_partner=} [properties] Properties to set
         * @returns {hall.request_team_be_partner} request_team_be_partner instance
         */
        request_team_be_partner.create = function create(properties) {
            return new request_team_be_partner(properties);
        };

        /**
         * Encodes the specified request_team_be_partner message. Does not implicitly {@link hall.request_team_be_partner.verify|verify} messages.
         * @function encode
         * @memberof hall.request_team_be_partner
         * @static
         * @param {hall.Irequest_team_be_partner} message request_team_be_partner message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_be_partner.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.clubid);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.dest_userid);
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.share_ratio);
            return writer;
        };

        /**
         * Encodes the specified request_team_be_partner message, length delimited. Does not implicitly {@link hall.request_team_be_partner.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_team_be_partner
         * @static
         * @param {hall.Irequest_team_be_partner} message request_team_be_partner message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_be_partner.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_team_be_partner message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_team_be_partner
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_team_be_partner} request_team_be_partner
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_be_partner.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_team_be_partner();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.clubid = reader.uint32();
                    break;
                case 4:
                    message.dest_userid = reader.uint32();
                    break;
                case 5:
                    message.share_ratio = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("clubid"))
                throw $util.ProtocolError("missing required 'clubid'", { instance: message });
            if (!message.hasOwnProperty("dest_userid"))
                throw $util.ProtocolError("missing required 'dest_userid'", { instance: message });
            if (!message.hasOwnProperty("share_ratio"))
                throw $util.ProtocolError("missing required 'share_ratio'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_team_be_partner message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_team_be_partner
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_team_be_partner} request_team_be_partner
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_be_partner.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_team_be_partner message.
         * @function verify
         * @memberof hall.request_team_be_partner
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_team_be_partner.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isInteger(message.clubid))
                return "clubid: integer expected";
            if (!$util.isInteger(message.dest_userid))
                return "dest_userid: integer expected";
            if (!$util.isInteger(message.share_ratio))
                return "share_ratio: integer expected";
            return null;
        };

        /**
         * Creates a request_team_be_partner message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_team_be_partner
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_team_be_partner} request_team_be_partner
         */
        request_team_be_partner.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_team_be_partner)
                return object;
            var message = new $root.hall.request_team_be_partner();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.clubid != null)
                message.clubid = object.clubid >>> 0;
            if (object.dest_userid != null)
                message.dest_userid = object.dest_userid >>> 0;
            if (object.share_ratio != null)
                message.share_ratio = object.share_ratio >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a request_team_be_partner message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_team_be_partner
         * @static
         * @param {hall.request_team_be_partner} message request_team_be_partner
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_team_be_partner.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.clubid = 0;
                object.dest_userid = 0;
                object.share_ratio = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.clubid != null && message.hasOwnProperty("clubid"))
                object.clubid = message.clubid;
            if (message.dest_userid != null && message.hasOwnProperty("dest_userid"))
                object.dest_userid = message.dest_userid;
            if (message.share_ratio != null && message.hasOwnProperty("share_ratio"))
                object.share_ratio = message.share_ratio;
            return object;
        };

        /**
         * Converts this request_team_be_partner to JSON.
         * @function toJSON
         * @memberof hall.request_team_be_partner
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_team_be_partner.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_team_be_partner;
    })();

    hall.response_team_be_partner = (function() {

        /**
         * Properties of a response_team_be_partner.
         * @memberof hall
         * @interface Iresponse_team_be_partner
         * @property {number} result_code response_team_be_partner result_code
         * @property {string} reason response_team_be_partner reason
         */

        /**
         * Constructs a new response_team_be_partner.
         * @memberof hall
         * @classdesc Represents a response_team_be_partner.
         * @implements Iresponse_team_be_partner
         * @constructor
         * @param {hall.Iresponse_team_be_partner=} [properties] Properties to set
         */
        function response_team_be_partner(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_team_be_partner result_code.
         * @member {number} result_code
         * @memberof hall.response_team_be_partner
         * @instance
         */
        response_team_be_partner.prototype.result_code = 0;

        /**
         * response_team_be_partner reason.
         * @member {string} reason
         * @memberof hall.response_team_be_partner
         * @instance
         */
        response_team_be_partner.prototype.reason = "";

        /**
         * Creates a new response_team_be_partner instance using the specified properties.
         * @function create
         * @memberof hall.response_team_be_partner
         * @static
         * @param {hall.Iresponse_team_be_partner=} [properties] Properties to set
         * @returns {hall.response_team_be_partner} response_team_be_partner instance
         */
        response_team_be_partner.create = function create(properties) {
            return new response_team_be_partner(properties);
        };

        /**
         * Encodes the specified response_team_be_partner message. Does not implicitly {@link hall.response_team_be_partner.verify|verify} messages.
         * @function encode
         * @memberof hall.response_team_be_partner
         * @static
         * @param {hall.Iresponse_team_be_partner} message response_team_be_partner message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_be_partner.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.result_code);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.reason);
            return writer;
        };

        /**
         * Encodes the specified response_team_be_partner message, length delimited. Does not implicitly {@link hall.response_team_be_partner.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_team_be_partner
         * @static
         * @param {hall.Iresponse_team_be_partner} message response_team_be_partner message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_be_partner.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_team_be_partner message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_team_be_partner
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_team_be_partner} response_team_be_partner
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_be_partner.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_team_be_partner();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.result_code = reader.uint32();
                    break;
                case 2:
                    message.reason = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("result_code"))
                throw $util.ProtocolError("missing required 'result_code'", { instance: message });
            if (!message.hasOwnProperty("reason"))
                throw $util.ProtocolError("missing required 'reason'", { instance: message });
            return message;
        };

        /**
         * Decodes a response_team_be_partner message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_team_be_partner
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_team_be_partner} response_team_be_partner
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_be_partner.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_team_be_partner message.
         * @function verify
         * @memberof hall.response_team_be_partner
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_team_be_partner.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.result_code))
                return "result_code: integer expected";
            if (!$util.isString(message.reason))
                return "reason: string expected";
            return null;
        };

        /**
         * Creates a response_team_be_partner message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_team_be_partner
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_team_be_partner} response_team_be_partner
         */
        response_team_be_partner.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_team_be_partner)
                return object;
            var message = new $root.hall.response_team_be_partner();
            if (object.result_code != null)
                message.result_code = object.result_code >>> 0;
            if (object.reason != null)
                message.reason = String(object.reason);
            return message;
        };

        /**
         * Creates a plain object from a response_team_be_partner message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_team_be_partner
         * @static
         * @param {hall.response_team_be_partner} message response_team_be_partner
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_team_be_partner.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result_code = 0;
                object.reason = "";
            }
            if (message.result_code != null && message.hasOwnProperty("result_code"))
                object.result_code = message.result_code;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            return object;
        };

        /**
         * Converts this response_team_be_partner to JSON.
         * @function toJSON
         * @memberof hall.response_team_be_partner
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_team_be_partner.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_team_be_partner;
    })();

    hall.request_team_set_partner_share_ratio = (function() {

        /**
         * Properties of a request_team_set_partner_share_ratio.
         * @memberof hall
         * @interface Irequest_team_set_partner_share_ratio
         * @property {number} userid request_team_set_partner_share_ratio userid
         * @property {string} password request_team_set_partner_share_ratio password
         * @property {number} clubid request_team_set_partner_share_ratio clubid
         * @property {number} partner_userid request_team_set_partner_share_ratio partner_userid
         * @property {number} share_ratio request_team_set_partner_share_ratio share_ratio
         */

        /**
         * Constructs a new request_team_set_partner_share_ratio.
         * @memberof hall
         * @classdesc Represents a request_team_set_partner_share_ratio.
         * @implements Irequest_team_set_partner_share_ratio
         * @constructor
         * @param {hall.Irequest_team_set_partner_share_ratio=} [properties] Properties to set
         */
        function request_team_set_partner_share_ratio(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_team_set_partner_share_ratio userid.
         * @member {number} userid
         * @memberof hall.request_team_set_partner_share_ratio
         * @instance
         */
        request_team_set_partner_share_ratio.prototype.userid = 0;

        /**
         * request_team_set_partner_share_ratio password.
         * @member {string} password
         * @memberof hall.request_team_set_partner_share_ratio
         * @instance
         */
        request_team_set_partner_share_ratio.prototype.password = "";

        /**
         * request_team_set_partner_share_ratio clubid.
         * @member {number} clubid
         * @memberof hall.request_team_set_partner_share_ratio
         * @instance
         */
        request_team_set_partner_share_ratio.prototype.clubid = 0;

        /**
         * request_team_set_partner_share_ratio partner_userid.
         * @member {number} partner_userid
         * @memberof hall.request_team_set_partner_share_ratio
         * @instance
         */
        request_team_set_partner_share_ratio.prototype.partner_userid = 0;

        /**
         * request_team_set_partner_share_ratio share_ratio.
         * @member {number} share_ratio
         * @memberof hall.request_team_set_partner_share_ratio
         * @instance
         */
        request_team_set_partner_share_ratio.prototype.share_ratio = 0;

        /**
         * Creates a new request_team_set_partner_share_ratio instance using the specified properties.
         * @function create
         * @memberof hall.request_team_set_partner_share_ratio
         * @static
         * @param {hall.Irequest_team_set_partner_share_ratio=} [properties] Properties to set
         * @returns {hall.request_team_set_partner_share_ratio} request_team_set_partner_share_ratio instance
         */
        request_team_set_partner_share_ratio.create = function create(properties) {
            return new request_team_set_partner_share_ratio(properties);
        };

        /**
         * Encodes the specified request_team_set_partner_share_ratio message. Does not implicitly {@link hall.request_team_set_partner_share_ratio.verify|verify} messages.
         * @function encode
         * @memberof hall.request_team_set_partner_share_ratio
         * @static
         * @param {hall.Irequest_team_set_partner_share_ratio} message request_team_set_partner_share_ratio message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_set_partner_share_ratio.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.clubid);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.partner_userid);
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.share_ratio);
            return writer;
        };

        /**
         * Encodes the specified request_team_set_partner_share_ratio message, length delimited. Does not implicitly {@link hall.request_team_set_partner_share_ratio.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_team_set_partner_share_ratio
         * @static
         * @param {hall.Irequest_team_set_partner_share_ratio} message request_team_set_partner_share_ratio message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_set_partner_share_ratio.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_team_set_partner_share_ratio message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_team_set_partner_share_ratio
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_team_set_partner_share_ratio} request_team_set_partner_share_ratio
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_set_partner_share_ratio.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_team_set_partner_share_ratio();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.clubid = reader.uint32();
                    break;
                case 4:
                    message.partner_userid = reader.uint32();
                    break;
                case 5:
                    message.share_ratio = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("clubid"))
                throw $util.ProtocolError("missing required 'clubid'", { instance: message });
            if (!message.hasOwnProperty("partner_userid"))
                throw $util.ProtocolError("missing required 'partner_userid'", { instance: message });
            if (!message.hasOwnProperty("share_ratio"))
                throw $util.ProtocolError("missing required 'share_ratio'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_team_set_partner_share_ratio message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_team_set_partner_share_ratio
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_team_set_partner_share_ratio} request_team_set_partner_share_ratio
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_set_partner_share_ratio.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_team_set_partner_share_ratio message.
         * @function verify
         * @memberof hall.request_team_set_partner_share_ratio
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_team_set_partner_share_ratio.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isInteger(message.clubid))
                return "clubid: integer expected";
            if (!$util.isInteger(message.partner_userid))
                return "partner_userid: integer expected";
            if (!$util.isInteger(message.share_ratio))
                return "share_ratio: integer expected";
            return null;
        };

        /**
         * Creates a request_team_set_partner_share_ratio message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_team_set_partner_share_ratio
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_team_set_partner_share_ratio} request_team_set_partner_share_ratio
         */
        request_team_set_partner_share_ratio.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_team_set_partner_share_ratio)
                return object;
            var message = new $root.hall.request_team_set_partner_share_ratio();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.clubid != null)
                message.clubid = object.clubid >>> 0;
            if (object.partner_userid != null)
                message.partner_userid = object.partner_userid >>> 0;
            if (object.share_ratio != null)
                message.share_ratio = object.share_ratio >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a request_team_set_partner_share_ratio message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_team_set_partner_share_ratio
         * @static
         * @param {hall.request_team_set_partner_share_ratio} message request_team_set_partner_share_ratio
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_team_set_partner_share_ratio.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.clubid = 0;
                object.partner_userid = 0;
                object.share_ratio = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.clubid != null && message.hasOwnProperty("clubid"))
                object.clubid = message.clubid;
            if (message.partner_userid != null && message.hasOwnProperty("partner_userid"))
                object.partner_userid = message.partner_userid;
            if (message.share_ratio != null && message.hasOwnProperty("share_ratio"))
                object.share_ratio = message.share_ratio;
            return object;
        };

        /**
         * Converts this request_team_set_partner_share_ratio to JSON.
         * @function toJSON
         * @memberof hall.request_team_set_partner_share_ratio
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_team_set_partner_share_ratio.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_team_set_partner_share_ratio;
    })();

    hall.response_team_set_partner_share_ratio = (function() {

        /**
         * Properties of a response_team_set_partner_share_ratio.
         * @memberof hall
         * @interface Iresponse_team_set_partner_share_ratio
         * @property {number} result_code response_team_set_partner_share_ratio result_code
         * @property {string} reason response_team_set_partner_share_ratio reason
         */

        /**
         * Constructs a new response_team_set_partner_share_ratio.
         * @memberof hall
         * @classdesc Represents a response_team_set_partner_share_ratio.
         * @implements Iresponse_team_set_partner_share_ratio
         * @constructor
         * @param {hall.Iresponse_team_set_partner_share_ratio=} [properties] Properties to set
         */
        function response_team_set_partner_share_ratio(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_team_set_partner_share_ratio result_code.
         * @member {number} result_code
         * @memberof hall.response_team_set_partner_share_ratio
         * @instance
         */
        response_team_set_partner_share_ratio.prototype.result_code = 0;

        /**
         * response_team_set_partner_share_ratio reason.
         * @member {string} reason
         * @memberof hall.response_team_set_partner_share_ratio
         * @instance
         */
        response_team_set_partner_share_ratio.prototype.reason = "";

        /**
         * Creates a new response_team_set_partner_share_ratio instance using the specified properties.
         * @function create
         * @memberof hall.response_team_set_partner_share_ratio
         * @static
         * @param {hall.Iresponse_team_set_partner_share_ratio=} [properties] Properties to set
         * @returns {hall.response_team_set_partner_share_ratio} response_team_set_partner_share_ratio instance
         */
        response_team_set_partner_share_ratio.create = function create(properties) {
            return new response_team_set_partner_share_ratio(properties);
        };

        /**
         * Encodes the specified response_team_set_partner_share_ratio message. Does not implicitly {@link hall.response_team_set_partner_share_ratio.verify|verify} messages.
         * @function encode
         * @memberof hall.response_team_set_partner_share_ratio
         * @static
         * @param {hall.Iresponse_team_set_partner_share_ratio} message response_team_set_partner_share_ratio message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_set_partner_share_ratio.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.result_code);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.reason);
            return writer;
        };

        /**
         * Encodes the specified response_team_set_partner_share_ratio message, length delimited. Does not implicitly {@link hall.response_team_set_partner_share_ratio.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_team_set_partner_share_ratio
         * @static
         * @param {hall.Iresponse_team_set_partner_share_ratio} message response_team_set_partner_share_ratio message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_set_partner_share_ratio.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_team_set_partner_share_ratio message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_team_set_partner_share_ratio
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_team_set_partner_share_ratio} response_team_set_partner_share_ratio
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_set_partner_share_ratio.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_team_set_partner_share_ratio();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.result_code = reader.uint32();
                    break;
                case 2:
                    message.reason = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("result_code"))
                throw $util.ProtocolError("missing required 'result_code'", { instance: message });
            if (!message.hasOwnProperty("reason"))
                throw $util.ProtocolError("missing required 'reason'", { instance: message });
            return message;
        };

        /**
         * Decodes a response_team_set_partner_share_ratio message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_team_set_partner_share_ratio
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_team_set_partner_share_ratio} response_team_set_partner_share_ratio
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_set_partner_share_ratio.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_team_set_partner_share_ratio message.
         * @function verify
         * @memberof hall.response_team_set_partner_share_ratio
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_team_set_partner_share_ratio.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.result_code))
                return "result_code: integer expected";
            if (!$util.isString(message.reason))
                return "reason: string expected";
            return null;
        };

        /**
         * Creates a response_team_set_partner_share_ratio message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_team_set_partner_share_ratio
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_team_set_partner_share_ratio} response_team_set_partner_share_ratio
         */
        response_team_set_partner_share_ratio.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_team_set_partner_share_ratio)
                return object;
            var message = new $root.hall.response_team_set_partner_share_ratio();
            if (object.result_code != null)
                message.result_code = object.result_code >>> 0;
            if (object.reason != null)
                message.reason = String(object.reason);
            return message;
        };

        /**
         * Creates a plain object from a response_team_set_partner_share_ratio message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_team_set_partner_share_ratio
         * @static
         * @param {hall.response_team_set_partner_share_ratio} message response_team_set_partner_share_ratio
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_team_set_partner_share_ratio.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result_code = 0;
                object.reason = "";
            }
            if (message.result_code != null && message.hasOwnProperty("result_code"))
                object.result_code = message.result_code;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            return object;
        };

        /**
         * Converts this response_team_set_partner_share_ratio to JSON.
         * @function toJSON
         * @memberof hall.response_team_set_partner_share_ratio
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_team_set_partner_share_ratio.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_team_set_partner_share_ratio;
    })();

    hall.request_team_game_records = (function() {

        /**
         * Properties of a request_team_game_records.
         * @memberof hall
         * @interface Irequest_team_game_records
         * @property {number} userid request_team_game_records userid
         * @property {string} password request_team_game_records password
         * @property {number} clubid request_team_game_records clubid
         * @property {number} type request_team_game_records type
         * @property {number} day request_team_game_records day
         */

        /**
         * Constructs a new request_team_game_records.
         * @memberof hall
         * @classdesc Represents a request_team_game_records.
         * @implements Irequest_team_game_records
         * @constructor
         * @param {hall.Irequest_team_game_records=} [properties] Properties to set
         */
        function request_team_game_records(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_team_game_records userid.
         * @member {number} userid
         * @memberof hall.request_team_game_records
         * @instance
         */
        request_team_game_records.prototype.userid = 0;

        /**
         * request_team_game_records password.
         * @member {string} password
         * @memberof hall.request_team_game_records
         * @instance
         */
        request_team_game_records.prototype.password = "";

        /**
         * request_team_game_records clubid.
         * @member {number} clubid
         * @memberof hall.request_team_game_records
         * @instance
         */
        request_team_game_records.prototype.clubid = 0;

        /**
         * request_team_game_records type.
         * @member {number} type
         * @memberof hall.request_team_game_records
         * @instance
         */
        request_team_game_records.prototype.type = 0;

        /**
         * request_team_game_records day.
         * @member {number} day
         * @memberof hall.request_team_game_records
         * @instance
         */
        request_team_game_records.prototype.day = 0;

        /**
         * Creates a new request_team_game_records instance using the specified properties.
         * @function create
         * @memberof hall.request_team_game_records
         * @static
         * @param {hall.Irequest_team_game_records=} [properties] Properties to set
         * @returns {hall.request_team_game_records} request_team_game_records instance
         */
        request_team_game_records.create = function create(properties) {
            return new request_team_game_records(properties);
        };

        /**
         * Encodes the specified request_team_game_records message. Does not implicitly {@link hall.request_team_game_records.verify|verify} messages.
         * @function encode
         * @memberof hall.request_team_game_records
         * @static
         * @param {hall.Irequest_team_game_records} message request_team_game_records message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_game_records.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.clubid);
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.type);
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.day);
            return writer;
        };

        /**
         * Encodes the specified request_team_game_records message, length delimited. Does not implicitly {@link hall.request_team_game_records.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_team_game_records
         * @static
         * @param {hall.Irequest_team_game_records} message request_team_game_records message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_game_records.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_team_game_records message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_team_game_records
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_team_game_records} request_team_game_records
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_game_records.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_team_game_records();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.clubid = reader.uint32();
                    break;
                case 4:
                    message.type = reader.uint32();
                    break;
                case 5:
                    message.day = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("clubid"))
                throw $util.ProtocolError("missing required 'clubid'", { instance: message });
            if (!message.hasOwnProperty("type"))
                throw $util.ProtocolError("missing required 'type'", { instance: message });
            if (!message.hasOwnProperty("day"))
                throw $util.ProtocolError("missing required 'day'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_team_game_records message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_team_game_records
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_team_game_records} request_team_game_records
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_game_records.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_team_game_records message.
         * @function verify
         * @memberof hall.request_team_game_records
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_team_game_records.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isInteger(message.clubid))
                return "clubid: integer expected";
            if (!$util.isInteger(message.type))
                return "type: integer expected";
            if (!$util.isInteger(message.day))
                return "day: integer expected";
            return null;
        };

        /**
         * Creates a request_team_game_records message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_team_game_records
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_team_game_records} request_team_game_records
         */
        request_team_game_records.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_team_game_records)
                return object;
            var message = new $root.hall.request_team_game_records();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.clubid != null)
                message.clubid = object.clubid >>> 0;
            if (object.type != null)
                message.type = object.type >>> 0;
            if (object.day != null)
                message.day = object.day >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a request_team_game_records message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_team_game_records
         * @static
         * @param {hall.request_team_game_records} message request_team_game_records
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_team_game_records.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.clubid = 0;
                object.type = 0;
                object.day = 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.clubid != null && message.hasOwnProperty("clubid"))
                object.clubid = message.clubid;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            if (message.day != null && message.hasOwnProperty("day"))
                object.day = message.day;
            return object;
        };

        /**
         * Converts this request_team_game_records to JSON.
         * @function toJSON
         * @memberof hall.request_team_game_records
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_team_game_records.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_team_game_records;
    })();

    hall.team_game_record_item = (function() {

        /**
         * Properties of a team_game_record_item.
         * @memberof hall
         * @interface Iteam_game_record_item
         * @property {number|Long} drawid team_game_record_item drawid
         * @property {string} insert_date team_game_record_item insert_date
         * @property {string} wanfa team_game_record_item wanfa
         * @property {number|null} [gameid] team_game_record_item gameid
         * @property {number|Long} change_score team_game_record_item change_score
         * @property {number|Long} revenue team_game_record_item revenue
         * @property {number|Long} commission team_game_record_item commission
         */

        /**
         * Constructs a new team_game_record_item.
         * @memberof hall
         * @classdesc Represents a team_game_record_item.
         * @implements Iteam_game_record_item
         * @constructor
         * @param {hall.Iteam_game_record_item=} [properties] Properties to set
         */
        function team_game_record_item(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * team_game_record_item drawid.
         * @member {number|Long} drawid
         * @memberof hall.team_game_record_item
         * @instance
         */
        team_game_record_item.prototype.drawid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * team_game_record_item insert_date.
         * @member {string} insert_date
         * @memberof hall.team_game_record_item
         * @instance
         */
        team_game_record_item.prototype.insert_date = "";

        /**
         * team_game_record_item wanfa.
         * @member {string} wanfa
         * @memberof hall.team_game_record_item
         * @instance
         */
        team_game_record_item.prototype.wanfa = "";

        /**
         * team_game_record_item gameid.
         * @member {number} gameid
         * @memberof hall.team_game_record_item
         * @instance
         */
        team_game_record_item.prototype.gameid = 0;

        /**
         * team_game_record_item change_score.
         * @member {number|Long} change_score
         * @memberof hall.team_game_record_item
         * @instance
         */
        team_game_record_item.prototype.change_score = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * team_game_record_item revenue.
         * @member {number|Long} revenue
         * @memberof hall.team_game_record_item
         * @instance
         */
        team_game_record_item.prototype.revenue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * team_game_record_item commission.
         * @member {number|Long} commission
         * @memberof hall.team_game_record_item
         * @instance
         */
        team_game_record_item.prototype.commission = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new team_game_record_item instance using the specified properties.
         * @function create
         * @memberof hall.team_game_record_item
         * @static
         * @param {hall.Iteam_game_record_item=} [properties] Properties to set
         * @returns {hall.team_game_record_item} team_game_record_item instance
         */
        team_game_record_item.create = function create(properties) {
            return new team_game_record_item(properties);
        };

        /**
         * Encodes the specified team_game_record_item message. Does not implicitly {@link hall.team_game_record_item.verify|verify} messages.
         * @function encode
         * @memberof hall.team_game_record_item
         * @static
         * @param {hall.Iteam_game_record_item} message team_game_record_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        team_game_record_item.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.drawid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.insert_date);
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.wanfa);
            if (message.gameid != null && Object.hasOwnProperty.call(message, "gameid"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.gameid);
            writer.uint32(/* id 5, wireType 0 =*/40).sint64(message.change_score);
            writer.uint32(/* id 6, wireType 0 =*/48).sint64(message.revenue);
            writer.uint32(/* id 7, wireType 0 =*/56).sint64(message.commission);
            return writer;
        };

        /**
         * Encodes the specified team_game_record_item message, length delimited. Does not implicitly {@link hall.team_game_record_item.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.team_game_record_item
         * @static
         * @param {hall.Iteam_game_record_item} message team_game_record_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        team_game_record_item.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a team_game_record_item message from the specified reader or buffer.
         * @function decode
         * @memberof hall.team_game_record_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.team_game_record_item} team_game_record_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        team_game_record_item.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.team_game_record_item();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.drawid = reader.uint64();
                    break;
                case 2:
                    message.insert_date = reader.string();
                    break;
                case 3:
                    message.wanfa = reader.string();
                    break;
                case 4:
                    message.gameid = reader.uint32();
                    break;
                case 5:
                    message.change_score = reader.sint64();
                    break;
                case 6:
                    message.revenue = reader.sint64();
                    break;
                case 7:
                    message.commission = reader.sint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("drawid"))
                throw $util.ProtocolError("missing required 'drawid'", { instance: message });
            if (!message.hasOwnProperty("insert_date"))
                throw $util.ProtocolError("missing required 'insert_date'", { instance: message });
            if (!message.hasOwnProperty("wanfa"))
                throw $util.ProtocolError("missing required 'wanfa'", { instance: message });
            if (!message.hasOwnProperty("change_score"))
                throw $util.ProtocolError("missing required 'change_score'", { instance: message });
            if (!message.hasOwnProperty("revenue"))
                throw $util.ProtocolError("missing required 'revenue'", { instance: message });
            if (!message.hasOwnProperty("commission"))
                throw $util.ProtocolError("missing required 'commission'", { instance: message });
            return message;
        };

        /**
         * Decodes a team_game_record_item message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.team_game_record_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.team_game_record_item} team_game_record_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        team_game_record_item.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a team_game_record_item message.
         * @function verify
         * @memberof hall.team_game_record_item
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        team_game_record_item.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.drawid) && !(message.drawid && $util.isInteger(message.drawid.low) && $util.isInteger(message.drawid.high)))
                return "drawid: integer|Long expected";
            if (!$util.isString(message.insert_date))
                return "insert_date: string expected";
            if (!$util.isString(message.wanfa))
                return "wanfa: string expected";
            if (message.gameid != null && message.hasOwnProperty("gameid"))
                if (!$util.isInteger(message.gameid))
                    return "gameid: integer expected";
            if (!$util.isInteger(message.change_score) && !(message.change_score && $util.isInteger(message.change_score.low) && $util.isInteger(message.change_score.high)))
                return "change_score: integer|Long expected";
            if (!$util.isInteger(message.revenue) && !(message.revenue && $util.isInteger(message.revenue.low) && $util.isInteger(message.revenue.high)))
                return "revenue: integer|Long expected";
            if (!$util.isInteger(message.commission) && !(message.commission && $util.isInteger(message.commission.low) && $util.isInteger(message.commission.high)))
                return "commission: integer|Long expected";
            return null;
        };

        /**
         * Creates a team_game_record_item message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.team_game_record_item
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.team_game_record_item} team_game_record_item
         */
        team_game_record_item.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.team_game_record_item)
                return object;
            var message = new $root.hall.team_game_record_item();
            if (object.drawid != null)
                if ($util.Long)
                    (message.drawid = $util.Long.fromValue(object.drawid)).unsigned = true;
                else if (typeof object.drawid === "string")
                    message.drawid = parseInt(object.drawid, 10);
                else if (typeof object.drawid === "number")
                    message.drawid = object.drawid;
                else if (typeof object.drawid === "object")
                    message.drawid = new $util.LongBits(object.drawid.low >>> 0, object.drawid.high >>> 0).toNumber(true);
            if (object.insert_date != null)
                message.insert_date = String(object.insert_date);
            if (object.wanfa != null)
                message.wanfa = String(object.wanfa);
            if (object.gameid != null)
                message.gameid = object.gameid >>> 0;
            if (object.change_score != null)
                if ($util.Long)
                    (message.change_score = $util.Long.fromValue(object.change_score)).unsigned = false;
                else if (typeof object.change_score === "string")
                    message.change_score = parseInt(object.change_score, 10);
                else if (typeof object.change_score === "number")
                    message.change_score = object.change_score;
                else if (typeof object.change_score === "object")
                    message.change_score = new $util.LongBits(object.change_score.low >>> 0, object.change_score.high >>> 0).toNumber();
            if (object.revenue != null)
                if ($util.Long)
                    (message.revenue = $util.Long.fromValue(object.revenue)).unsigned = false;
                else if (typeof object.revenue === "string")
                    message.revenue = parseInt(object.revenue, 10);
                else if (typeof object.revenue === "number")
                    message.revenue = object.revenue;
                else if (typeof object.revenue === "object")
                    message.revenue = new $util.LongBits(object.revenue.low >>> 0, object.revenue.high >>> 0).toNumber();
            if (object.commission != null)
                if ($util.Long)
                    (message.commission = $util.Long.fromValue(object.commission)).unsigned = false;
                else if (typeof object.commission === "string")
                    message.commission = parseInt(object.commission, 10);
                else if (typeof object.commission === "number")
                    message.commission = object.commission;
                else if (typeof object.commission === "object")
                    message.commission = new $util.LongBits(object.commission.low >>> 0, object.commission.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a team_game_record_item message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.team_game_record_item
         * @static
         * @param {hall.team_game_record_item} message team_game_record_item
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        team_game_record_item.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.drawid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.drawid = options.longs === String ? "0" : 0;
                object.insert_date = "";
                object.wanfa = "";
                object.gameid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.change_score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.change_score = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.revenue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.revenue = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.commission = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.commission = options.longs === String ? "0" : 0;
            }
            if (message.drawid != null && message.hasOwnProperty("drawid"))
                if (typeof message.drawid === "number")
                    object.drawid = options.longs === String ? String(message.drawid) : message.drawid;
                else
                    object.drawid = options.longs === String ? $util.Long.prototype.toString.call(message.drawid) : options.longs === Number ? new $util.LongBits(message.drawid.low >>> 0, message.drawid.high >>> 0).toNumber(true) : message.drawid;
            if (message.insert_date != null && message.hasOwnProperty("insert_date"))
                object.insert_date = message.insert_date;
            if (message.wanfa != null && message.hasOwnProperty("wanfa"))
                object.wanfa = message.wanfa;
            if (message.gameid != null && message.hasOwnProperty("gameid"))
                object.gameid = message.gameid;
            if (message.change_score != null && message.hasOwnProperty("change_score"))
                if (typeof message.change_score === "number")
                    object.change_score = options.longs === String ? String(message.change_score) : message.change_score;
                else
                    object.change_score = options.longs === String ? $util.Long.prototype.toString.call(message.change_score) : options.longs === Number ? new $util.LongBits(message.change_score.low >>> 0, message.change_score.high >>> 0).toNumber() : message.change_score;
            if (message.revenue != null && message.hasOwnProperty("revenue"))
                if (typeof message.revenue === "number")
                    object.revenue = options.longs === String ? String(message.revenue) : message.revenue;
                else
                    object.revenue = options.longs === String ? $util.Long.prototype.toString.call(message.revenue) : options.longs === Number ? new $util.LongBits(message.revenue.low >>> 0, message.revenue.high >>> 0).toNumber() : message.revenue;
            if (message.commission != null && message.hasOwnProperty("commission"))
                if (typeof message.commission === "number")
                    object.commission = options.longs === String ? String(message.commission) : message.commission;
                else
                    object.commission = options.longs === String ? $util.Long.prototype.toString.call(message.commission) : options.longs === Number ? new $util.LongBits(message.commission.low >>> 0, message.commission.high >>> 0).toNumber() : message.commission;
            return object;
        };

        /**
         * Converts this team_game_record_item to JSON.
         * @function toJSON
         * @memberof hall.team_game_record_item
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        team_game_record_item.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return team_game_record_item;
    })();

    hall.response_team_game_records = (function() {

        /**
         * Properties of a response_team_game_records.
         * @memberof hall
         * @interface Iresponse_team_game_records
         * @property {Array.<hall.Iteam_game_record_item>|null} [items] response_team_game_records items
         */

        /**
         * Constructs a new response_team_game_records.
         * @memberof hall
         * @classdesc Represents a response_team_game_records.
         * @implements Iresponse_team_game_records
         * @constructor
         * @param {hall.Iresponse_team_game_records=} [properties] Properties to set
         */
        function response_team_game_records(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_team_game_records items.
         * @member {Array.<hall.Iteam_game_record_item>} items
         * @memberof hall.response_team_game_records
         * @instance
         */
        response_team_game_records.prototype.items = $util.emptyArray;

        /**
         * Creates a new response_team_game_records instance using the specified properties.
         * @function create
         * @memberof hall.response_team_game_records
         * @static
         * @param {hall.Iresponse_team_game_records=} [properties] Properties to set
         * @returns {hall.response_team_game_records} response_team_game_records instance
         */
        response_team_game_records.create = function create(properties) {
            return new response_team_game_records(properties);
        };

        /**
         * Encodes the specified response_team_game_records message. Does not implicitly {@link hall.response_team_game_records.verify|verify} messages.
         * @function encode
         * @memberof hall.response_team_game_records
         * @static
         * @param {hall.Iresponse_team_game_records} message response_team_game_records message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_game_records.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.hall.team_game_record_item.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified response_team_game_records message, length delimited. Does not implicitly {@link hall.response_team_game_records.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_team_game_records
         * @static
         * @param {hall.Iresponse_team_game_records} message response_team_game_records message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_game_records.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_team_game_records message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_team_game_records
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_team_game_records} response_team_game_records
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_game_records.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_team_game_records();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.items && message.items.length))
                        message.items = [];
                    message.items.push($root.hall.team_game_record_item.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a response_team_game_records message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_team_game_records
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_team_game_records} response_team_game_records
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_game_records.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_team_game_records message.
         * @function verify
         * @memberof hall.response_team_game_records
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_team_game_records.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.hall.team_game_record_item.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a response_team_game_records message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_team_game_records
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_team_game_records} response_team_game_records
         */
        response_team_game_records.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_team_game_records)
                return object;
            var message = new $root.hall.response_team_game_records();
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".hall.response_team_game_records.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".hall.response_team_game_records.items: object expected");
                    message.items[i] = $root.hall.team_game_record_item.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a response_team_game_records message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_team_game_records
         * @static
         * @param {hall.response_team_game_records} message response_team_game_records
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_team_game_records.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.hall.team_game_record_item.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this response_team_game_records to JSON.
         * @function toJSON
         * @memberof hall.response_team_game_records
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_team_game_records.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_team_game_records;
    })();

    hall.request_team_game_record_detail = (function() {

        /**
         * Properties of a request_team_game_record_detail.
         * @memberof hall
         * @interface Irequest_team_game_record_detail
         * @property {number} userid request_team_game_record_detail userid
         * @property {string} password request_team_game_record_detail password
         * @property {number} clubid request_team_game_record_detail clubid
         * @property {number|Long} drawid request_team_game_record_detail drawid
         */

        /**
         * Constructs a new request_team_game_record_detail.
         * @memberof hall
         * @classdesc Represents a request_team_game_record_detail.
         * @implements Irequest_team_game_record_detail
         * @constructor
         * @param {hall.Irequest_team_game_record_detail=} [properties] Properties to set
         */
        function request_team_game_record_detail(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * request_team_game_record_detail userid.
         * @member {number} userid
         * @memberof hall.request_team_game_record_detail
         * @instance
         */
        request_team_game_record_detail.prototype.userid = 0;

        /**
         * request_team_game_record_detail password.
         * @member {string} password
         * @memberof hall.request_team_game_record_detail
         * @instance
         */
        request_team_game_record_detail.prototype.password = "";

        /**
         * request_team_game_record_detail clubid.
         * @member {number} clubid
         * @memberof hall.request_team_game_record_detail
         * @instance
         */
        request_team_game_record_detail.prototype.clubid = 0;

        /**
         * request_team_game_record_detail drawid.
         * @member {number|Long} drawid
         * @memberof hall.request_team_game_record_detail
         * @instance
         */
        request_team_game_record_detail.prototype.drawid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new request_team_game_record_detail instance using the specified properties.
         * @function create
         * @memberof hall.request_team_game_record_detail
         * @static
         * @param {hall.Irequest_team_game_record_detail=} [properties] Properties to set
         * @returns {hall.request_team_game_record_detail} request_team_game_record_detail instance
         */
        request_team_game_record_detail.create = function create(properties) {
            return new request_team_game_record_detail(properties);
        };

        /**
         * Encodes the specified request_team_game_record_detail message. Does not implicitly {@link hall.request_team_game_record_detail.verify|verify} messages.
         * @function encode
         * @memberof hall.request_team_game_record_detail
         * @static
         * @param {hall.Irequest_team_game_record_detail} message request_team_game_record_detail message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_game_record_detail.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.clubid);
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.drawid);
            return writer;
        };

        /**
         * Encodes the specified request_team_game_record_detail message, length delimited. Does not implicitly {@link hall.request_team_game_record_detail.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.request_team_game_record_detail
         * @static
         * @param {hall.Irequest_team_game_record_detail} message request_team_game_record_detail message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        request_team_game_record_detail.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a request_team_game_record_detail message from the specified reader or buffer.
         * @function decode
         * @memberof hall.request_team_game_record_detail
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.request_team_game_record_detail} request_team_game_record_detail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_game_record_detail.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.request_team_game_record_detail();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userid = reader.uint32();
                    break;
                case 2:
                    message.password = reader.string();
                    break;
                case 3:
                    message.clubid = reader.uint32();
                    break;
                case 4:
                    message.drawid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userid"))
                throw $util.ProtocolError("missing required 'userid'", { instance: message });
            if (!message.hasOwnProperty("password"))
                throw $util.ProtocolError("missing required 'password'", { instance: message });
            if (!message.hasOwnProperty("clubid"))
                throw $util.ProtocolError("missing required 'clubid'", { instance: message });
            if (!message.hasOwnProperty("drawid"))
                throw $util.ProtocolError("missing required 'drawid'", { instance: message });
            return message;
        };

        /**
         * Decodes a request_team_game_record_detail message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.request_team_game_record_detail
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.request_team_game_record_detail} request_team_game_record_detail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        request_team_game_record_detail.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a request_team_game_record_detail message.
         * @function verify
         * @memberof hall.request_team_game_record_detail
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        request_team_game_record_detail.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.userid))
                return "userid: integer expected";
            if (!$util.isString(message.password))
                return "password: string expected";
            if (!$util.isInteger(message.clubid))
                return "clubid: integer expected";
            if (!$util.isInteger(message.drawid) && !(message.drawid && $util.isInteger(message.drawid.low) && $util.isInteger(message.drawid.high)))
                return "drawid: integer|Long expected";
            return null;
        };

        /**
         * Creates a request_team_game_record_detail message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.request_team_game_record_detail
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.request_team_game_record_detail} request_team_game_record_detail
         */
        request_team_game_record_detail.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.request_team_game_record_detail)
                return object;
            var message = new $root.hall.request_team_game_record_detail();
            if (object.userid != null)
                message.userid = object.userid >>> 0;
            if (object.password != null)
                message.password = String(object.password);
            if (object.clubid != null)
                message.clubid = object.clubid >>> 0;
            if (object.drawid != null)
                if ($util.Long)
                    (message.drawid = $util.Long.fromValue(object.drawid)).unsigned = true;
                else if (typeof object.drawid === "string")
                    message.drawid = parseInt(object.drawid, 10);
                else if (typeof object.drawid === "number")
                    message.drawid = object.drawid;
                else if (typeof object.drawid === "object")
                    message.drawid = new $util.LongBits(object.drawid.low >>> 0, object.drawid.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a request_team_game_record_detail message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.request_team_game_record_detail
         * @static
         * @param {hall.request_team_game_record_detail} message request_team_game_record_detail
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        request_team_game_record_detail.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userid = 0;
                object.password = "";
                object.clubid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.drawid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.drawid = options.longs === String ? "0" : 0;
            }
            if (message.userid != null && message.hasOwnProperty("userid"))
                object.userid = message.userid;
            if (message.password != null && message.hasOwnProperty("password"))
                object.password = message.password;
            if (message.clubid != null && message.hasOwnProperty("clubid"))
                object.clubid = message.clubid;
            if (message.drawid != null && message.hasOwnProperty("drawid"))
                if (typeof message.drawid === "number")
                    object.drawid = options.longs === String ? String(message.drawid) : message.drawid;
                else
                    object.drawid = options.longs === String ? $util.Long.prototype.toString.call(message.drawid) : options.longs === Number ? new $util.LongBits(message.drawid.low >>> 0, message.drawid.high >>> 0).toNumber(true) : message.drawid;
            return object;
        };

        /**
         * Converts this request_team_game_record_detail to JSON.
         * @function toJSON
         * @memberof hall.request_team_game_record_detail
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        request_team_game_record_detail.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return request_team_game_record_detail;
    })();

    hall.team_game_record_detail_item = (function() {

        /**
         * Properties of a team_game_record_detail_item.
         * @memberof hall
         * @interface Iteam_game_record_detail_item
         * @property {string} gamelog team_game_record_detail_item gamelog
         * @property {number|Long} start_score team_game_record_detail_item start_score
         * @property {number|Long} change_score team_game_record_detail_item change_score
         * @property {number|null} [gameid] team_game_record_detail_item gameid
         */

        /**
         * Constructs a new team_game_record_detail_item.
         * @memberof hall
         * @classdesc Represents a team_game_record_detail_item.
         * @implements Iteam_game_record_detail_item
         * @constructor
         * @param {hall.Iteam_game_record_detail_item=} [properties] Properties to set
         */
        function team_game_record_detail_item(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * team_game_record_detail_item gamelog.
         * @member {string} gamelog
         * @memberof hall.team_game_record_detail_item
         * @instance
         */
        team_game_record_detail_item.prototype.gamelog = "";

        /**
         * team_game_record_detail_item start_score.
         * @member {number|Long} start_score
         * @memberof hall.team_game_record_detail_item
         * @instance
         */
        team_game_record_detail_item.prototype.start_score = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * team_game_record_detail_item change_score.
         * @member {number|Long} change_score
         * @memberof hall.team_game_record_detail_item
         * @instance
         */
        team_game_record_detail_item.prototype.change_score = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * team_game_record_detail_item gameid.
         * @member {number} gameid
         * @memberof hall.team_game_record_detail_item
         * @instance
         */
        team_game_record_detail_item.prototype.gameid = 0;

        /**
         * Creates a new team_game_record_detail_item instance using the specified properties.
         * @function create
         * @memberof hall.team_game_record_detail_item
         * @static
         * @param {hall.Iteam_game_record_detail_item=} [properties] Properties to set
         * @returns {hall.team_game_record_detail_item} team_game_record_detail_item instance
         */
        team_game_record_detail_item.create = function create(properties) {
            return new team_game_record_detail_item(properties);
        };

        /**
         * Encodes the specified team_game_record_detail_item message. Does not implicitly {@link hall.team_game_record_detail_item.verify|verify} messages.
         * @function encode
         * @memberof hall.team_game_record_detail_item
         * @static
         * @param {hall.Iteam_game_record_detail_item} message team_game_record_detail_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        team_game_record_detail_item.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.gamelog);
            writer.uint32(/* id 2, wireType 0 =*/16).sint64(message.start_score);
            writer.uint32(/* id 3, wireType 0 =*/24).sint64(message.change_score);
            if (message.gameid != null && Object.hasOwnProperty.call(message, "gameid"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.gameid);
            return writer;
        };

        /**
         * Encodes the specified team_game_record_detail_item message, length delimited. Does not implicitly {@link hall.team_game_record_detail_item.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.team_game_record_detail_item
         * @static
         * @param {hall.Iteam_game_record_detail_item} message team_game_record_detail_item message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        team_game_record_detail_item.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a team_game_record_detail_item message from the specified reader or buffer.
         * @function decode
         * @memberof hall.team_game_record_detail_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.team_game_record_detail_item} team_game_record_detail_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        team_game_record_detail_item.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.team_game_record_detail_item();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.gamelog = reader.string();
                    break;
                case 2:
                    message.start_score = reader.sint64();
                    break;
                case 3:
                    message.change_score = reader.sint64();
                    break;
                case 4:
                    message.gameid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("gamelog"))
                throw $util.ProtocolError("missing required 'gamelog'", { instance: message });
            if (!message.hasOwnProperty("start_score"))
                throw $util.ProtocolError("missing required 'start_score'", { instance: message });
            if (!message.hasOwnProperty("change_score"))
                throw $util.ProtocolError("missing required 'change_score'", { instance: message });
            return message;
        };

        /**
         * Decodes a team_game_record_detail_item message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.team_game_record_detail_item
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.team_game_record_detail_item} team_game_record_detail_item
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        team_game_record_detail_item.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a team_game_record_detail_item message.
         * @function verify
         * @memberof hall.team_game_record_detail_item
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        team_game_record_detail_item.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isString(message.gamelog))
                return "gamelog: string expected";
            if (!$util.isInteger(message.start_score) && !(message.start_score && $util.isInteger(message.start_score.low) && $util.isInteger(message.start_score.high)))
                return "start_score: integer|Long expected";
            if (!$util.isInteger(message.change_score) && !(message.change_score && $util.isInteger(message.change_score.low) && $util.isInteger(message.change_score.high)))
                return "change_score: integer|Long expected";
            if (message.gameid != null && message.hasOwnProperty("gameid"))
                if (!$util.isInteger(message.gameid))
                    return "gameid: integer expected";
            return null;
        };

        /**
         * Creates a team_game_record_detail_item message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.team_game_record_detail_item
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.team_game_record_detail_item} team_game_record_detail_item
         */
        team_game_record_detail_item.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.team_game_record_detail_item)
                return object;
            var message = new $root.hall.team_game_record_detail_item();
            if (object.gamelog != null)
                message.gamelog = String(object.gamelog);
            if (object.start_score != null)
                if ($util.Long)
                    (message.start_score = $util.Long.fromValue(object.start_score)).unsigned = false;
                else if (typeof object.start_score === "string")
                    message.start_score = parseInt(object.start_score, 10);
                else if (typeof object.start_score === "number")
                    message.start_score = object.start_score;
                else if (typeof object.start_score === "object")
                    message.start_score = new $util.LongBits(object.start_score.low >>> 0, object.start_score.high >>> 0).toNumber();
            if (object.change_score != null)
                if ($util.Long)
                    (message.change_score = $util.Long.fromValue(object.change_score)).unsigned = false;
                else if (typeof object.change_score === "string")
                    message.change_score = parseInt(object.change_score, 10);
                else if (typeof object.change_score === "number")
                    message.change_score = object.change_score;
                else if (typeof object.change_score === "object")
                    message.change_score = new $util.LongBits(object.change_score.low >>> 0, object.change_score.high >>> 0).toNumber();
            if (object.gameid != null)
                message.gameid = object.gameid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a team_game_record_detail_item message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.team_game_record_detail_item
         * @static
         * @param {hall.team_game_record_detail_item} message team_game_record_detail_item
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        team_game_record_detail_item.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gamelog = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.start_score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.start_score = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.change_score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.change_score = options.longs === String ? "0" : 0;
                object.gameid = 0;
            }
            if (message.gamelog != null && message.hasOwnProperty("gamelog"))
                object.gamelog = message.gamelog;
            if (message.start_score != null && message.hasOwnProperty("start_score"))
                if (typeof message.start_score === "number")
                    object.start_score = options.longs === String ? String(message.start_score) : message.start_score;
                else
                    object.start_score = options.longs === String ? $util.Long.prototype.toString.call(message.start_score) : options.longs === Number ? new $util.LongBits(message.start_score.low >>> 0, message.start_score.high >>> 0).toNumber() : message.start_score;
            if (message.change_score != null && message.hasOwnProperty("change_score"))
                if (typeof message.change_score === "number")
                    object.change_score = options.longs === String ? String(message.change_score) : message.change_score;
                else
                    object.change_score = options.longs === String ? $util.Long.prototype.toString.call(message.change_score) : options.longs === Number ? new $util.LongBits(message.change_score.low >>> 0, message.change_score.high >>> 0).toNumber() : message.change_score;
            if (message.gameid != null && message.hasOwnProperty("gameid"))
                object.gameid = message.gameid;
            return object;
        };

        /**
         * Converts this team_game_record_detail_item to JSON.
         * @function toJSON
         * @memberof hall.team_game_record_detail_item
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        team_game_record_detail_item.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return team_game_record_detail_item;
    })();

    hall.response_team_game_record_detail = (function() {

        /**
         * Properties of a response_team_game_record_detail.
         * @memberof hall
         * @interface Iresponse_team_game_record_detail
         * @property {number} kindid response_team_game_record_detail kindid
         * @property {Array.<hall.Iteam_game_record_detail_item>|null} [items] response_team_game_record_detail items
         */

        /**
         * Constructs a new response_team_game_record_detail.
         * @memberof hall
         * @classdesc Represents a response_team_game_record_detail.
         * @implements Iresponse_team_game_record_detail
         * @constructor
         * @param {hall.Iresponse_team_game_record_detail=} [properties] Properties to set
         */
        function response_team_game_record_detail(properties) {
            this.items = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * response_team_game_record_detail kindid.
         * @member {number} kindid
         * @memberof hall.response_team_game_record_detail
         * @instance
         */
        response_team_game_record_detail.prototype.kindid = 0;

        /**
         * response_team_game_record_detail items.
         * @member {Array.<hall.Iteam_game_record_detail_item>} items
         * @memberof hall.response_team_game_record_detail
         * @instance
         */
        response_team_game_record_detail.prototype.items = $util.emptyArray;

        /**
         * Creates a new response_team_game_record_detail instance using the specified properties.
         * @function create
         * @memberof hall.response_team_game_record_detail
         * @static
         * @param {hall.Iresponse_team_game_record_detail=} [properties] Properties to set
         * @returns {hall.response_team_game_record_detail} response_team_game_record_detail instance
         */
        response_team_game_record_detail.create = function create(properties) {
            return new response_team_game_record_detail(properties);
        };

        /**
         * Encodes the specified response_team_game_record_detail message. Does not implicitly {@link hall.response_team_game_record_detail.verify|verify} messages.
         * @function encode
         * @memberof hall.response_team_game_record_detail
         * @static
         * @param {hall.Iresponse_team_game_record_detail} message response_team_game_record_detail message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_game_record_detail.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.kindid);
            if (message.items != null && message.items.length)
                for (var i = 0; i < message.items.length; ++i)
                    $root.hall.team_game_record_detail_item.encode(message.items[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified response_team_game_record_detail message, length delimited. Does not implicitly {@link hall.response_team_game_record_detail.verify|verify} messages.
         * @function encodeDelimited
         * @memberof hall.response_team_game_record_detail
         * @static
         * @param {hall.Iresponse_team_game_record_detail} message response_team_game_record_detail message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        response_team_game_record_detail.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a response_team_game_record_detail message from the specified reader or buffer.
         * @function decode
         * @memberof hall.response_team_game_record_detail
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {hall.response_team_game_record_detail} response_team_game_record_detail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_game_record_detail.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.hall.response_team_game_record_detail();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.kindid = reader.uint32();
                    break;
                case 2:
                    if (!(message.items && message.items.length))
                        message.items = [];
                    message.items.push($root.hall.team_game_record_detail_item.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("kindid"))
                throw $util.ProtocolError("missing required 'kindid'", { instance: message });
            return message;
        };

        /**
         * Decodes a response_team_game_record_detail message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof hall.response_team_game_record_detail
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {hall.response_team_game_record_detail} response_team_game_record_detail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        response_team_game_record_detail.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a response_team_game_record_detail message.
         * @function verify
         * @memberof hall.response_team_game_record_detail
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        response_team_game_record_detail.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.kindid))
                return "kindid: integer expected";
            if (message.items != null && message.hasOwnProperty("items")) {
                if (!Array.isArray(message.items))
                    return "items: array expected";
                for (var i = 0; i < message.items.length; ++i) {
                    var error = $root.hall.team_game_record_detail_item.verify(message.items[i]);
                    if (error)
                        return "items." + error;
                }
            }
            return null;
        };

        /**
         * Creates a response_team_game_record_detail message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof hall.response_team_game_record_detail
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {hall.response_team_game_record_detail} response_team_game_record_detail
         */
        response_team_game_record_detail.fromObject = function fromObject(object) {
            if (object instanceof $root.hall.response_team_game_record_detail)
                return object;
            var message = new $root.hall.response_team_game_record_detail();
            if (object.kindid != null)
                message.kindid = object.kindid >>> 0;
            if (object.items) {
                if (!Array.isArray(object.items))
                    throw TypeError(".hall.response_team_game_record_detail.items: array expected");
                message.items = [];
                for (var i = 0; i < object.items.length; ++i) {
                    if (typeof object.items[i] !== "object")
                        throw TypeError(".hall.response_team_game_record_detail.items: object expected");
                    message.items[i] = $root.hall.team_game_record_detail_item.fromObject(object.items[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a response_team_game_record_detail message. Also converts values to other types if specified.
         * @function toObject
         * @memberof hall.response_team_game_record_detail
         * @static
         * @param {hall.response_team_game_record_detail} message response_team_game_record_detail
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        response_team_game_record_detail.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.items = [];
            if (options.defaults)
                object.kindid = 0;
            if (message.kindid != null && message.hasOwnProperty("kindid"))
                object.kindid = message.kindid;
            if (message.items && message.items.length) {
                object.items = [];
                for (var j = 0; j < message.items.length; ++j)
                    object.items[j] = $root.hall.team_game_record_detail_item.toObject(message.items[j], options);
            }
            return object;
        };

        /**
         * Converts this response_team_game_record_detail to JSON.
         * @function toJSON
         * @memberof hall.response_team_game_record_detail
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        response_team_game_record_detail.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return response_team_game_record_detail;
    })();

    return hall;
})();

$root.login = (function() {

    /**
     * Namespace login.
     * @exports login
     * @namespace
     */
    var login = {};

    login.login = (function() {

        /**
         * Properties of a login.
         * @memberof login
         * @interface Ilogin
         * @property {number} uid login uid
         * @property {string} secret login secret
         */

        /**
         * Constructs a new login.
         * @memberof login
         * @classdesc Represents a login.
         * @implements Ilogin
         * @constructor
         * @param {login.Ilogin=} [properties] Properties to set
         */
        function login(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * login uid.
         * @member {number} uid
         * @memberof login.login
         * @instance
         */
        login.prototype.uid = 0;

        /**
         * login secret.
         * @member {string} secret
         * @memberof login.login
         * @instance
         */
        login.prototype.secret = "";

        /**
         * Creates a new login instance using the specified properties.
         * @function create
         * @memberof login.login
         * @static
         * @param {login.Ilogin=} [properties] Properties to set
         * @returns {login.login} login instance
         */
        login.create = function create(properties) {
            return new login(properties);
        };

        /**
         * Encodes the specified login message. Does not implicitly {@link login.login.verify|verify} messages.
         * @function encode
         * @memberof login.login
         * @static
         * @param {login.Ilogin} message login message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        login.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.uid);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.secret);
            return writer;
        };

        /**
         * Encodes the specified login message, length delimited. Does not implicitly {@link login.login.verify|verify} messages.
         * @function encodeDelimited
         * @memberof login.login
         * @static
         * @param {login.Ilogin} message login message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        login.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a login message from the specified reader or buffer.
         * @function decode
         * @memberof login.login
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {login.login} login
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        login.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.login.login();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint32();
                    break;
                case 2:
                    message.secret = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("secret"))
                throw $util.ProtocolError("missing required 'secret'", { instance: message });
            return message;
        };

        /**
         * Decodes a login message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof login.login
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {login.login} login
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        login.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a login message.
         * @function verify
         * @memberof login.login
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        login.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid))
                return "uid: integer expected";
            if (!$util.isString(message.secret))
                return "secret: string expected";
            return null;
        };

        /**
         * Creates a login message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof login.login
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {login.login} login
         */
        login.fromObject = function fromObject(object) {
            if (object instanceof $root.login.login)
                return object;
            var message = new $root.login.login();
            if (object.uid != null)
                message.uid = object.uid >>> 0;
            if (object.secret != null)
                message.secret = String(object.secret);
            return message;
        };

        /**
         * Creates a plain object from a login message. Also converts values to other types if specified.
         * @function toObject
         * @memberof login.login
         * @static
         * @param {login.login} message login
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        login.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.uid = 0;
                object.secret = "";
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.secret != null && message.hasOwnProperty("secret"))
                object.secret = message.secret;
            return object;
        };

        /**
         * Converts this login to JSON.
         * @function toJSON
         * @memberof login.login
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        login.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return login;
    })();

    login.kick = (function() {

        /**
         * Properties of a kick.
         * @memberof login
         * @interface Ikick
         * @property {number} uid kick uid
         * @property {number} subid kick subid
         */

        /**
         * Constructs a new kick.
         * @memberof login
         * @classdesc Represents a kick.
         * @implements Ikick
         * @constructor
         * @param {login.Ikick=} [properties] Properties to set
         */
        function kick(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * kick uid.
         * @member {number} uid
         * @memberof login.kick
         * @instance
         */
        kick.prototype.uid = 0;

        /**
         * kick subid.
         * @member {number} subid
         * @memberof login.kick
         * @instance
         */
        kick.prototype.subid = 0;

        /**
         * Creates a new kick instance using the specified properties.
         * @function create
         * @memberof login.kick
         * @static
         * @param {login.Ikick=} [properties] Properties to set
         * @returns {login.kick} kick instance
         */
        kick.create = function create(properties) {
            return new kick(properties);
        };

        /**
         * Encodes the specified kick message. Does not implicitly {@link login.kick.verify|verify} messages.
         * @function encode
         * @memberof login.kick
         * @static
         * @param {login.Ikick} message kick message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        kick.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.uid);
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.subid);
            return writer;
        };

        /**
         * Encodes the specified kick message, length delimited. Does not implicitly {@link login.kick.verify|verify} messages.
         * @function encodeDelimited
         * @memberof login.kick
         * @static
         * @param {login.Ikick} message kick message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        kick.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a kick message from the specified reader or buffer.
         * @function decode
         * @memberof login.kick
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {login.kick} kick
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        kick.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.login.kick();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.uid = reader.uint32();
                    break;
                case 2:
                    message.subid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("uid"))
                throw $util.ProtocolError("missing required 'uid'", { instance: message });
            if (!message.hasOwnProperty("subid"))
                throw $util.ProtocolError("missing required 'subid'", { instance: message });
            return message;
        };

        /**
         * Decodes a kick message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof login.kick
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {login.kick} kick
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        kick.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a kick message.
         * @function verify
         * @memberof login.kick
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        kick.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.uid))
                return "uid: integer expected";
            if (!$util.isInteger(message.subid))
                return "subid: integer expected";
            return null;
        };

        /**
         * Creates a kick message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof login.kick
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {login.kick} kick
         */
        kick.fromObject = function fromObject(object) {
            if (object instanceof $root.login.kick)
                return object;
            var message = new $root.login.kick();
            if (object.uid != null)
                message.uid = object.uid >>> 0;
            if (object.subid != null)
                message.subid = object.subid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a kick message. Also converts values to other types if specified.
         * @function toObject
         * @memberof login.kick
         * @static
         * @param {login.kick} message kick
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        kick.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.uid = 0;
                object.subid = 0;
            }
            if (message.uid != null && message.hasOwnProperty("uid"))
                object.uid = message.uid;
            if (message.subid != null && message.hasOwnProperty("subid"))
                object.subid = message.subid;
            return object;
        };

        /**
         * Converts this kick to JSON.
         * @function toJSON
         * @memberof login.kick
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        kick.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return kick;
    })();

    return login;
})();

$root.netmsg = (function() {

    /**
     * Namespace netmsg.
     * @exports netmsg
     * @namespace
     */
    var netmsg = {};

    netmsg.netmsg = (function() {

        /**
         * Properties of a netmsg.
         * @memberof netmsg
         * @interface Inetmsg
         * @property {string} name netmsg name
         * @property {Uint8Array} payload netmsg payload
         * @property {number|null} [sessionid] netmsg sessionid
         */

        /**
         * Constructs a new netmsg.
         * @memberof netmsg
         * @classdesc Represents a netmsg.
         * @implements Inetmsg
         * @constructor
         * @param {netmsg.Inetmsg=} [properties] Properties to set
         */
        function netmsg(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * netmsg name.
         * @member {string} name
         * @memberof netmsg.netmsg
         * @instance
         */
        netmsg.prototype.name = "";

        /**
         * netmsg payload.
         * @member {Uint8Array} payload
         * @memberof netmsg.netmsg
         * @instance
         */
        netmsg.prototype.payload = $util.newBuffer([]);

        /**
         * netmsg sessionid.
         * @member {number} sessionid
         * @memberof netmsg.netmsg
         * @instance
         */
        netmsg.prototype.sessionid = 0;

        /**
         * Creates a new netmsg instance using the specified properties.
         * @function create
         * @memberof netmsg.netmsg
         * @static
         * @param {netmsg.Inetmsg=} [properties] Properties to set
         * @returns {netmsg.netmsg} netmsg instance
         */
        netmsg.create = function create(properties) {
            return new netmsg(properties);
        };

        /**
         * Encodes the specified netmsg message. Does not implicitly {@link netmsg.netmsg.verify|verify} messages.
         * @function encode
         * @memberof netmsg.netmsg
         * @static
         * @param {netmsg.Inetmsg} message netmsg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        netmsg.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.payload);
            if (message.sessionid != null && Object.hasOwnProperty.call(message, "sessionid"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.sessionid);
            return writer;
        };

        /**
         * Encodes the specified netmsg message, length delimited. Does not implicitly {@link netmsg.netmsg.verify|verify} messages.
         * @function encodeDelimited
         * @memberof netmsg.netmsg
         * @static
         * @param {netmsg.Inetmsg} message netmsg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        netmsg.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a netmsg message from the specified reader or buffer.
         * @function decode
         * @memberof netmsg.netmsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {netmsg.netmsg} netmsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        netmsg.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.netmsg.netmsg();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.payload = reader.bytes();
                    break;
                case 3:
                    message.sessionid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("name"))
                throw $util.ProtocolError("missing required 'name'", { instance: message });
            if (!message.hasOwnProperty("payload"))
                throw $util.ProtocolError("missing required 'payload'", { instance: message });
            return message;
        };

        /**
         * Decodes a netmsg message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof netmsg.netmsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {netmsg.netmsg} netmsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        netmsg.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a netmsg message.
         * @function verify
         * @memberof netmsg.netmsg
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        netmsg.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isString(message.name))
                return "name: string expected";
            if (!(message.payload && typeof message.payload.length === "number" || $util.isString(message.payload)))
                return "payload: buffer expected";
            if (message.sessionid != null && message.hasOwnProperty("sessionid"))
                if (!$util.isInteger(message.sessionid))
                    return "sessionid: integer expected";
            return null;
        };

        /**
         * Creates a netmsg message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof netmsg.netmsg
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {netmsg.netmsg} netmsg
         */
        netmsg.fromObject = function fromObject(object) {
            if (object instanceof $root.netmsg.netmsg)
                return object;
            var message = new $root.netmsg.netmsg();
            if (object.name != null)
                message.name = String(object.name);
            if (object.payload != null)
                if (typeof object.payload === "string")
                    $util.base64.decode(object.payload, message.payload = $util.newBuffer($util.base64.length(object.payload)), 0);
                else if (object.payload.length)
                    message.payload = object.payload;
            if (object.sessionid != null)
                message.sessionid = object.sessionid >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a netmsg message. Also converts values to other types if specified.
         * @function toObject
         * @memberof netmsg.netmsg
         * @static
         * @param {netmsg.netmsg} message netmsg
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        netmsg.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.name = "";
                if (options.bytes === String)
                    object.payload = "";
                else {
                    object.payload = [];
                    if (options.bytes !== Array)
                        object.payload = $util.newBuffer(object.payload);
                }
                object.sessionid = 0;
            }
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.payload != null && message.hasOwnProperty("payload"))
                object.payload = options.bytes === String ? $util.base64.encode(message.payload, 0, message.payload.length) : options.bytes === Array ? Array.prototype.slice.call(message.payload) : message.payload;
            if (message.sessionid != null && message.hasOwnProperty("sessionid"))
                object.sessionid = message.sessionid;
            return object;
        };

        /**
         * Converts this netmsg to JSON.
         * @function toJSON
         * @memberof netmsg.netmsg
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        netmsg.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return netmsg;
    })();

    netmsg.heartbeat = (function() {

        /**
         * Properties of a heartbeat.
         * @memberof netmsg
         * @interface Iheartbeat
         */

        /**
         * Constructs a new heartbeat.
         * @memberof netmsg
         * @classdesc Represents a heartbeat.
         * @implements Iheartbeat
         * @constructor
         * @param {netmsg.Iheartbeat=} [properties] Properties to set
         */
        function heartbeat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new heartbeat instance using the specified properties.
         * @function create
         * @memberof netmsg.heartbeat
         * @static
         * @param {netmsg.Iheartbeat=} [properties] Properties to set
         * @returns {netmsg.heartbeat} heartbeat instance
         */
        heartbeat.create = function create(properties) {
            return new heartbeat(properties);
        };

        /**
         * Encodes the specified heartbeat message. Does not implicitly {@link netmsg.heartbeat.verify|verify} messages.
         * @function encode
         * @memberof netmsg.heartbeat
         * @static
         * @param {netmsg.Iheartbeat} message heartbeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        heartbeat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified heartbeat message, length delimited. Does not implicitly {@link netmsg.heartbeat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof netmsg.heartbeat
         * @static
         * @param {netmsg.Iheartbeat} message heartbeat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        heartbeat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a heartbeat message from the specified reader or buffer.
         * @function decode
         * @memberof netmsg.heartbeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {netmsg.heartbeat} heartbeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        heartbeat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.netmsg.heartbeat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a heartbeat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof netmsg.heartbeat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {netmsg.heartbeat} heartbeat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        heartbeat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a heartbeat message.
         * @function verify
         * @memberof netmsg.heartbeat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        heartbeat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a heartbeat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof netmsg.heartbeat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {netmsg.heartbeat} heartbeat
         */
        heartbeat.fromObject = function fromObject(object) {
            if (object instanceof $root.netmsg.heartbeat)
                return object;
            return new $root.netmsg.heartbeat();
        };

        /**
         * Creates a plain object from a heartbeat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof netmsg.heartbeat
         * @static
         * @param {netmsg.heartbeat} message heartbeat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        heartbeat.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this heartbeat to JSON.
         * @function toJSON
         * @memberof netmsg.heartbeat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        heartbeat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return heartbeat;
    })();

    netmsg.notify_system_message = (function() {

        /**
         * Properties of a notify_system_message.
         * @memberof netmsg
         * @interface Inotify_system_message
         * @property {number} type notify_system_message type
         * @property {string} text notify_system_message text
         */

        /**
         * Constructs a new notify_system_message.
         * @memberof netmsg
         * @classdesc Represents a notify_system_message.
         * @implements Inotify_system_message
         * @constructor
         * @param {netmsg.Inotify_system_message=} [properties] Properties to set
         */
        function notify_system_message(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * notify_system_message type.
         * @member {number} type
         * @memberof netmsg.notify_system_message
         * @instance
         */
        notify_system_message.prototype.type = 0;

        /**
         * notify_system_message text.
         * @member {string} text
         * @memberof netmsg.notify_system_message
         * @instance
         */
        notify_system_message.prototype.text = "";

        /**
         * Creates a new notify_system_message instance using the specified properties.
         * @function create
         * @memberof netmsg.notify_system_message
         * @static
         * @param {netmsg.Inotify_system_message=} [properties] Properties to set
         * @returns {netmsg.notify_system_message} notify_system_message instance
         */
        notify_system_message.create = function create(properties) {
            return new notify_system_message(properties);
        };

        /**
         * Encodes the specified notify_system_message message. Does not implicitly {@link netmsg.notify_system_message.verify|verify} messages.
         * @function encode
         * @memberof netmsg.notify_system_message
         * @static
         * @param {netmsg.Inotify_system_message} message notify_system_message message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_system_message.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.type);
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
            return writer;
        };

        /**
         * Encodes the specified notify_system_message message, length delimited. Does not implicitly {@link netmsg.notify_system_message.verify|verify} messages.
         * @function encodeDelimited
         * @memberof netmsg.notify_system_message
         * @static
         * @param {netmsg.Inotify_system_message} message notify_system_message message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_system_message.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a notify_system_message message from the specified reader or buffer.
         * @function decode
         * @memberof netmsg.notify_system_message
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {netmsg.notify_system_message} notify_system_message
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_system_message.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.netmsg.notify_system_message();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.type = reader.uint32();
                    break;
                case 2:
                    message.text = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("type"))
                throw $util.ProtocolError("missing required 'type'", { instance: message });
            if (!message.hasOwnProperty("text"))
                throw $util.ProtocolError("missing required 'text'", { instance: message });
            return message;
        };

        /**
         * Decodes a notify_system_message message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof netmsg.notify_system_message
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {netmsg.notify_system_message} notify_system_message
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_system_message.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a notify_system_message message.
         * @function verify
         * @memberof netmsg.notify_system_message
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        notify_system_message.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.type))
                return "type: integer expected";
            if (!$util.isString(message.text))
                return "text: string expected";
            return null;
        };

        /**
         * Creates a notify_system_message message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof netmsg.notify_system_message
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {netmsg.notify_system_message} notify_system_message
         */
        notify_system_message.fromObject = function fromObject(object) {
            if (object instanceof $root.netmsg.notify_system_message)
                return object;
            var message = new $root.netmsg.notify_system_message();
            if (object.type != null)
                message.type = object.type >>> 0;
            if (object.text != null)
                message.text = String(object.text);
            return message;
        };

        /**
         * Creates a plain object from a notify_system_message message. Also converts values to other types if specified.
         * @function toObject
         * @memberof netmsg.notify_system_message
         * @static
         * @param {netmsg.notify_system_message} message notify_system_message
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        notify_system_message.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.type = 0;
                object.text = "";
            }
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = message.text;
            return object;
        };

        /**
         * Converts this notify_system_message to JSON.
         * @function toJSON
         * @memberof netmsg.notify_system_message
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        notify_system_message.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return notify_system_message;
    })();

    netmsg.notify_update_score = (function() {

        /**
         * Properties of a notify_update_score.
         * @memberof netmsg
         * @interface Inotify_update_score
         * @property {number|Long} score notify_update_score score
         * @property {netmsg.Inotify_system_message|null} [msg] notify_update_score msg
         */

        /**
         * Constructs a new notify_update_score.
         * @memberof netmsg
         * @classdesc Represents a notify_update_score.
         * @implements Inotify_update_score
         * @constructor
         * @param {netmsg.Inotify_update_score=} [properties] Properties to set
         */
        function notify_update_score(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * notify_update_score score.
         * @member {number|Long} score
         * @memberof netmsg.notify_update_score
         * @instance
         */
        notify_update_score.prototype.score = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * notify_update_score msg.
         * @member {netmsg.Inotify_system_message|null|undefined} msg
         * @memberof netmsg.notify_update_score
         * @instance
         */
        notify_update_score.prototype.msg = null;

        /**
         * Creates a new notify_update_score instance using the specified properties.
         * @function create
         * @memberof netmsg.notify_update_score
         * @static
         * @param {netmsg.Inotify_update_score=} [properties] Properties to set
         * @returns {netmsg.notify_update_score} notify_update_score instance
         */
        notify_update_score.create = function create(properties) {
            return new notify_update_score(properties);
        };

        /**
         * Encodes the specified notify_update_score message. Does not implicitly {@link netmsg.notify_update_score.verify|verify} messages.
         * @function encode
         * @memberof netmsg.notify_update_score
         * @static
         * @param {netmsg.Inotify_update_score} message notify_update_score message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_update_score.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).sint64(message.score);
            if (message.msg != null && Object.hasOwnProperty.call(message, "msg"))
                $root.netmsg.notify_system_message.encode(message.msg, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified notify_update_score message, length delimited. Does not implicitly {@link netmsg.notify_update_score.verify|verify} messages.
         * @function encodeDelimited
         * @memberof netmsg.notify_update_score
         * @static
         * @param {netmsg.Inotify_update_score} message notify_update_score message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        notify_update_score.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a notify_update_score message from the specified reader or buffer.
         * @function decode
         * @memberof netmsg.notify_update_score
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {netmsg.notify_update_score} notify_update_score
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_update_score.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.netmsg.notify_update_score();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.score = reader.sint64();
                    break;
                case 2:
                    message.msg = $root.netmsg.notify_system_message.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("score"))
                throw $util.ProtocolError("missing required 'score'", { instance: message });
            return message;
        };

        /**
         * Decodes a notify_update_score message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof netmsg.notify_update_score
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {netmsg.notify_update_score} notify_update_score
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        notify_update_score.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a notify_update_score message.
         * @function verify
         * @memberof netmsg.notify_update_score
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        notify_update_score.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.score) && !(message.score && $util.isInteger(message.score.low) && $util.isInteger(message.score.high)))
                return "score: integer|Long expected";
            if (message.msg != null && message.hasOwnProperty("msg")) {
                var error = $root.netmsg.notify_system_message.verify(message.msg);
                if (error)
                    return "msg." + error;
            }
            return null;
        };

        /**
         * Creates a notify_update_score message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof netmsg.notify_update_score
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {netmsg.notify_update_score} notify_update_score
         */
        notify_update_score.fromObject = function fromObject(object) {
            if (object instanceof $root.netmsg.notify_update_score)
                return object;
            var message = new $root.netmsg.notify_update_score();
            if (object.score != null)
                if ($util.Long)
                    (message.score = $util.Long.fromValue(object.score)).unsigned = false;
                else if (typeof object.score === "string")
                    message.score = parseInt(object.score, 10);
                else if (typeof object.score === "number")
                    message.score = object.score;
                else if (typeof object.score === "object")
                    message.score = new $util.LongBits(object.score.low >>> 0, object.score.high >>> 0).toNumber();
            if (object.msg != null) {
                if (typeof object.msg !== "object")
                    throw TypeError(".netmsg.notify_update_score.msg: object expected");
                message.msg = $root.netmsg.notify_system_message.fromObject(object.msg);
            }
            return message;
        };

        /**
         * Creates a plain object from a notify_update_score message. Also converts values to other types if specified.
         * @function toObject
         * @memberof netmsg.notify_update_score
         * @static
         * @param {netmsg.notify_update_score} message notify_update_score
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        notify_update_score.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.score = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.score = options.longs === String ? "0" : 0;
                object.msg = null;
            }
            if (message.score != null && message.hasOwnProperty("score"))
                if (typeof message.score === "number")
                    object.score = options.longs === String ? String(message.score) : message.score;
                else
                    object.score = options.longs === String ? $util.Long.prototype.toString.call(message.score) : options.longs === Number ? new $util.LongBits(message.score.low >>> 0, message.score.high >>> 0).toNumber() : message.score;
            if (message.msg != null && message.hasOwnProperty("msg"))
                object.msg = $root.netmsg.notify_system_message.toObject(message.msg, options);
            return object;
        };

        /**
         * Converts this notify_update_score to JSON.
         * @function toJSON
         * @memberof netmsg.notify_update_score
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        notify_update_score.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return notify_update_score;
    })();

    return netmsg;
})();

module.exports = $root;
